---------------------------------------------------------------------------------------------------------
--			     									       --
-- 	PROCEDURES STOCKEES 				Date de dernière mise à jour : 05/02/2009      --
--			     									       --
---------------------------------------------------------------------------------------------------------

-------------------------------
-- PROCEDURES STOCKEES ZCL23 --
-------------------------------

IF OBJECT_ID('dbo.PS_IDENTITE_CREATION_VISITEUR', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_IDENTITE_CREATION_VISITEUR;
GO
CREATE PROCEDURE dbo.PS_IDENTITE_CREATION_VISITEUR
	@NOM VARCHAR(35),
	@PRENOM VARCHAR(35),
	@DATENAISSANCE DATETIME,
	@SEXE VARCHAR(1), /*F ou M*/
	@NATIONALITE VARCHAR(50), /* iso 3 */
	@ID VARCHAR(14) OUTPUT
AS
	DECLARE @NATIONALITEID VARCHAR(14)
	DECLARE @NOMJEUNEFILLE VARCHAR(35)
	DECLARE @SOCIETE VARCHAR(35)
	DECLARE @SOCIETEID VARCHAR(14)
	DECLARE @CODECIVILITE INT
	DECLARE @CIVILITE VARCHAR(30)
	DECLARE @INTERDIT VARCHAR(1)
	DECLARE @DEBUTINTERDIT DATETIME
	DECLARE @FININTERDIT DATETIME
	DECLARE @NATUREID VARCHAR(35)
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
	DECLARE @PAYS VARCHAR(35)
BEGIN
	SET @NOM = UPPER(@NOM)
	SET @PRENOM = @PRENOM
	SET @NATIONALITE = UPPER(@NATIONALITE)
	SET @SEXE = UPPER(@SEXE)

	INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
	SET @IDENTITY = (SELECT @@IDENTITY AS ID)
	SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
	SET @ID = @FLAG + @IDENTITY

	IF EXISTS (SELECT * FROM PAYS WHERE UPPER(CODEISO3) = @NATIONALITE) BEGIN
		SET @NATIONALITEID = (SELECT TOP 1 PAYSID FROM PAYS WHERE UPPER(CODEISO3) = @NATIONALITE)
	END
	ELSE BEGIN
		SET @NATIONALITEID = 'VPARDEFAUT'
	END

	SET @PAYS = (SELECT LIBELLE FROM PAYS WHERE PAYSID = @NATIONALITEID)

	IF @SEXE = 'F' BEGIN
		SET @CODECIVILITE = 2
		SET @CIVILITE = 'Mme'
		SET @NOMJEUNEFILLE = @NOM
	END
	ELSE BEGIN
		IF @SEXE = 'M' BEGIN
			SET @CODECIVILITE = 1
			SET @CIVILITE = 'M.'
		END
	END

	SET @SOCIETEID = 'VPARDEFAUT'
	SET @SOCIETE = '**********'
	SET @INTERDIT = '0'
	SET @DEBUTINTERDIT = CONVERT(DATETIME,CONVERT(VARCHAR,CURRENT_TIMESTAMP,103),103)
	SET @FININTERDIT = CURRENT_TIMESTAMP + 36525
	SET @NATUREID = 'VPARDEFAUT'

	INSERT INTO INTERLOCUTEUR (INTERLOCUTEURID, SOCIETEID, SOCIETE, NOM, NOMJEUNEFILLE, PRENOM, NOMPRENOM, DATENAISSANCE, NATIONALITEID, PAYS, CODECIVILITE, CIVILITE, NATUREID, INTERDIT, DEBUTINTERDIT, FININTERDIT, DATECREATION, DATEMAJ)
		VALUES (@ID, @SOCIETEID, @SOCIETE, @NOM, @NOMJEUNEFILLE, @PRENOM, @NOM+' '+@PRENOM, CONVERT(DATETIME,@DATENAISSANCE,103), @NATIONALITEID, @PAYS, @CODECIVILITE, @CIVILITE, @NATUREID, @INTERDIT, CONVERT(DATETIME,@DEBUTINTERDIT,103), CONVERT(DATETIME,@FININTERDIT,103), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
END

GO

IF OBJECT_ID('dbo.PS_IDENTITE_CREATION_PIECE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_IDENTITE_CREATION_PIECE;
GO
CREATE PROCEDURE dbo.PS_IDENTITE_CREATION_PIECE
	@TYPEPIECE VARCHAR(2), /* P pour passeport et ID pour carte identite */
	@PAYSEMETTEUR VARCHAR(4),
	@NPIECE VARCHAR(20),
	@PREFEMETTRICE VARCHAR(3),
	@DATEEXPIRATION DATETIME,
	@OPTIONS VARCHAR(15),
	@INTERLOCUTEURID VARCHAR(14)
AS
	DECLARE @ID VARCHAR(14)
	DECLARE @TYPEIDENTITEID INT
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
BEGIN
	INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
	SET @IDENTITY = (SELECT @@IDENTITY AS ID)
	SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
	SET @ID = @FLAG + @IDENTITY

	SET @TYPEIDENTITEID = 0

	IF @TYPEPIECE = 'P' BEGIN
		SET @TYPEIDENTITEID = -1
	END
	IF (@TYPEPIECE LIKE 'A%') OR (@TYPEPIECE LIKE 'C%') OR (@TYPEPIECE LIKE 'I%') BEGIN
		SET @TYPEIDENTITEID = -4
	END
	IF @TYPEPIECE = 'TS' BEGIN
		SET @TYPEIDENTITEID = -3
	END
	IF @TYPEPIECE = 'ID' AND @PAYSEMETTEUR = 'FRA' BEGIN
		SET @TYPEIDENTITEID = -2
	END
	IF @TYPEPIECE = 'VD' BEGIN
		SET @TYPEIDENTITEID = -5
	END
	IF @TYPEPIECE = 'V' BEGIN
		SET @TYPEIDENTITEID = -5
	END

	INSERT INTO IDENTITES (IDENTITEID, TYPEIDENTITEID, FINVALIDITE, NUMERO, INTERLOCUTEURID, DATECREATION, DATEMAJ)
		VALUES (@ID, @TYPEIDENTITEID, @DATEEXPIRATION, @NPIECE, @INTERLOCUTEURID, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)

	UPDATE INTERLOCUTEUR SET IDENTITEID = @ID WHERE INTERLOCUTEURID = @INTERLOCUTEURID
END
GO

IF OBJECT_ID('dbo.PS_IDENTITE_NUM_PIECE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_IDENTITE_NUM_PIECE;
GO
CREATE PROCEDURE dbo.PS_IDENTITE_NUM_PIECE
	@NPIECE VARCHAR(20),
	@INTERLOCUTEURID VARCHAR(14) OUTPUT
AS
BEGIN
	SET @NPIECE = UPPER(@NPIECE)
 IF EXISTS (SELECT * FROM IDENTITES WHERE UPPER(NUMERO) = @NPIECE AND INTERLOCUTEURID IS NOT NULL) BEGIN
		SET @INTERLOCUTEURID = (SELECT TOP 1 INTERLOCUTEURID FROM IDENTITES WHERE UPPER(NUMERO) = @NPIECE AND INTERLOCUTEURID IS NOT NULL)
        IF NOT EXISTS (SELECT * FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@INTERLOCUTEURID)  BEGIN
		   SET @INTERLOCUTEURID = '-1'
	    END
	END
	ELSE BEGIN
		SET @INTERLOCUTEURID = '-1'
	END
END

GO


IF OBJECT_ID('dbo.PS_IDENTITE_CREATION_PIECE_UNQ', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_IDENTITE_CREATION_PIECE_UNQ;
GO
CREATE PROCEDURE dbo.PS_IDENTITE_CREATION_PIECE_UNQ
	@TYPEPIECE VARCHAR(2), /* P pour passeport et ID pour carte identite */
	@PAYSEMETTEUR VARCHAR(4),
	@NPIECE VARCHAR(20),
	@PREFEMETTRICE VARCHAR(3),
	@DATEEXPIRATION DATETIME,
	@OPTIONS VARCHAR(15),
	@INTERLOCUTEURID VARCHAR(14)
AS
	DECLARE @ID VARCHAR(14)
	DECLARE @TYPEIDENTITEID INT
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
	DECLARE @OLD_INTERID VARCHAR(14)
BEGIN
	/* Suppression d'une ancienne piece identique*/
	EXEC PS_IDENTITE_NUM_PIECE  @NPIECE,@OLD_INTERID OUTPUT
	UPDATE INTERLOCUTEUR SET IDENTITEID = '' WHERE INTERLOCUTEURID = @OLD_INTERID
	DELETE FROM  IDENTITES WHERE UPPER(NUMERO) = @NPIECE
	/* Creation d'une piece*/
	INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
	SET @IDENTITY = (SELECT @@IDENTITY AS ID)
	SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
	SET @ID = @FLAG + @IDENTITY

	IF @TYPEPIECE = 'P' BEGIN
		SET @TYPEIDENTITEID = -1
	END
	ELSE IF @TYPEPIECE = 'IR' BEGIN
		SET @TYPEIDENTITEID = -4
	END
	ELSE IF @TYPEPIECE = 'TS' BEGIN
		SET @TYPEIDENTITEID = -3
	END
	ELSE IF @TYPEPIECE = 'ID' BEGIN
		SET @TYPEIDENTITEID = -2
	END
	ELSE IF @TYPEPIECE = 'VD' BEGIN
		SET @TYPEIDENTITEID = -5
	END
	ELSE IF @TYPEPIECE = 'V' BEGIN
		SET @TYPEIDENTITEID = -5
	END
	ELSE BEGIN
		SET @TYPEIDENTITEID = 0
	END

	INSERT INTO IDENTITES(IDENTITEID, TYPEIDENTITEID, FINVALIDITE, NUMERO, INTERLOCUTEURID, DATECREATION, DATEMAJ)
		VALUES (@ID, @TYPEIDENTITEID, @DATEEXPIRATION, @NPIECE, @INTERLOCUTEURID, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)

	UPDATE INTERLOCUTEUR SET IDENTITEID = @ID WHERE INTERLOCUTEURID = @INTERLOCUTEURID
END
GO

IF OBJECT_ID('dbo.PS_IDENTITE_CREATION', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_IDENTITE_CREATION;
GO
CREATE PROCEDURE dbo.PS_IDENTITE_CREATION
	@TYPEPIECE VARCHAR(2),
	@PAYSEMETTEUR VARCHAR(4),
	@NPIECE VARCHAR(20),
	@PREFEMETTRICE VARCHAR(3),
	@NOM VARCHAR(35),
	@PRENOM VARCHAR(35),
	@DATENAISSANCE DATETIME,
	@SEXE VARCHAR(1),
	@NATIONALITE VARCHAR(50), /* iso 3 */
	@DATEEXPIRATION DATETIME,
	@OPTIONS VARCHAR(15),
	@INTERLOCUTEURID VARCHAR(14) OUTPUT
AS
BEGIN
	EXEC PS_IDENTITE_CREATION_VISITEUR @NOM, @PRENOM, @DATENAISSANCE, @SEXE, @NATIONALITE, @INTERLOCUTEURID OUTPUT
	EXEC PS_IDENTITE_CREATION_PIECE @TYPEPIECE, @PAYSEMETTEUR, @NPIECE, @PREFEMETTRICE, @DATEEXPIRATION, @OPTIONS, @INTERLOCUTEURID
END

GO

IF OBJECT_ID('dbo.PS_IDENTITE_CRITERES_DEUX', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_IDENTITE_CRITERES_DEUX;
GO
CREATE PROCEDURE dbo.PS_IDENTITE_CRITERES_DEUX
	@NOM VARCHAR(35),
	@PRENOM VARCHAR(35),
	@DATENAISSANCE DATETIME
AS
BEGIN
	IF EXISTS (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR WHERE ((UPPER(NOM) = @NOM OR UPPER(NOMJEUNEFILLE) = @NOM) AND (UPPER(PRENOM) LIKE(@PRENOM+'%'))) OR ((UPPER(NOM) = @NOM OR UPPER(NOMJEUNEFILLE) = @NOM) AND dbo.TRUNC(DATENAISSANCE) = @DATENAISSANCE)) BEGIN
		SELECT INTERLOCUTEURID FROM INTERLOCUTEUR WHERE ((UPPER(NOM) = @NOM OR UPPER(NOMJEUNEFILLE) = @NOM) AND (UPPER(PRENOM) LIKE(@PRENOM+'%'))) OR ((UPPER(NOM) = @NOM OR UPPER(NOMJEUNEFILLE) = @NOM) AND dbo.TRUNC(DATENAISSANCE) = @DATENAISSANCE)
	END
	ELSE BEGIN
		SELECT '-1' AS INTERLOCUTEURID
	END
END

GO

IF OBJECT_ID('dbo.PS_IDENTITE_CRITERES_TROIS', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_IDENTITE_CRITERES_TROIS;
GO
CREATE PROCEDURE dbo.PS_IDENTITE_CRITERES_TROIS
	@NOM VARCHAR(35),
	@PRENOM VARCHAR(35),
	@DATENAISSANCE DATETIME
AS
BEGIN
	IF EXISTS (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR WHERE (UPPER(NOM) = @NOM OR UPPER(NOMJEUNEFILLE) = @NOM) AND UPPER(PRENOM) LIKE(@PRENOM+'%') AND dbo.TRUNC(DATENAISSANCE) = @DATENAISSANCE) BEGIN
		SELECT INTERLOCUTEURID FROM INTERLOCUTEUR WHERE (UPPER(NOM) = @NOM OR UPPER(NOMJEUNEFILLE) = @NOM) AND UPPER(PRENOM) LIKE(@PRENOM+'%') AND dbo.TRUNC(DATENAISSANCE) = @DATENAISSANCE
	END
	ELSE BEGIN
		SELECT '-1' AS INTERLOCUTEURID
	END
END

GO

IF OBJECT_ID('dbo.PS_IDENTITE_MAJ_VISITEUR', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_IDENTITE_MAJ_VISITEUR;
GO
CREATE PROCEDURE dbo.PS_IDENTITE_MAJ_VISITEUR
	@NOM VARCHAR(35),
	@PRENOM VARCHAR(35),
	@DATENAISSANCE DATETIME,
	@SEXE VARCHAR(1),
	@NATIONALITE VARCHAR(50), /* iso 3 */
	@INTERLOCUTEURID VARCHAR(14)
AS
	DECLARE @NATIONALITEID VARCHAR(14)
	DECLARE @NOMJEUNEFILLE VARCHAR(35)
	DECLARE @CODECIVILITE INT
	DECLARE @CIVILITE VARCHAR(30)
	DECLARE @PAYS VARCHAR(35)
BEGIN
	SET @NOM = UPPER(@NOM)
	SET @PRENOM = @PRENOM
	SET @NATIONALITE = UPPER(@NATIONALITE)
	SET @SEXE = UPPER(@SEXE)

	IF EXISTS (SELECT * FROM PAYS WHERE UPPER(CODEISO3) = @NATIONALITE) BEGIN
		SET @NATIONALITEID = (SELECT TOP 1 PAYSID FROM PAYS WHERE UPPER(CODEISO3) = @NATIONALITE)
	END
	ELSE BEGIN
		SET @NATIONALITEID = 'VPARDEFAUT'
	END

	SET @PAYS = (SELECT LIBELLE FROM PAYS WHERE PAYSID = @NATIONALITEID)

	IF @SEXE = 'F' BEGIN
		SET @CODECIVILITE = 2
		SET @CIVILITE = 'Mme'
		SET @NOMJEUNEFILLE = @NOM
		SET @NOM = (SELECT NOM FROM INTERLOCUTEUR WHERE INTERLOCUTEURID = @INTERLOCUTEURID)
		SET @NOM = UPPER(@NOM)
	END
	ELSE BEGIN
		IF @SEXE = 'M' BEGIN
			SET @CODECIVILITE = 1
			SET @CIVILITE = 'M.'
		END
	END

	UPDATE INTERLOCUTEUR SET NOM = @NOM, NOMJEUNEFILLE = @NOMJEUNEFILLE, PRENOM = @PRENOM, NOMPRENOM = @NOM + ' ' + @PRENOM, DATENAISSANCE = CONVERT(DATETIME,@DATENAISSANCE,103), NATIONALITEID = @NATIONALITEID, PAYS = @PAYS, CODECIVILITE = @CODECIVILITE, CIVILITE = @CIVILITE WHERE INTERLOCUTEURID = @INTERLOCUTEURID
END

GO

IF OBJECT_ID('dbo.PS_IDENTITE_NUM_PIECE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_IDENTITE_NUM_PIECE;
GO
CREATE PROCEDURE dbo.PS_IDENTITE_NUM_PIECE
	@NPIECE VARCHAR(20),
	@INTERLOCUTEURID VARCHAR(14) OUTPUT
AS
BEGIN
	SET @NPIECE = UPPER(@NPIECE)
	IF EXISTS (SELECT * FROM IDENTITES WHERE UPPER(NUMERO) = @NPIECE) BEGIN
		SET @INTERLOCUTEURID = (SELECT TOP 1 INTERLOCUTEURID FROM IDENTITES WHERE UPPER(NUMERO) = @NPIECE AND INTERLOCUTEURID IS NOT NULL)
        IF NOT EXISTS (SELECT * FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@INTERLOCUTEURID)  BEGIN
		   SET @INTERLOCUTEURID = '-1'
	    END
	END
	ELSE BEGIN
		SET @INTERLOCUTEURID = '-1'
	END
END

GO

IF OBJECT_ID('dbo.PS_CVISITE_CREATION_SOCIETE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_CVISITE_CREATION_SOCIETE;
GO
CREATE PROCEDURE dbo.PS_CVISITE_CREATION_SOCIETE
	@SOCIETE VARCHAR(35),
	@ISRESIDANT VARCHAR(1),
	@ADRESSE VARCHAR(150),
	@CODEPOSTAL VARCHAR(10),
	@VILLE VARCHAR(35),

	@ID VARCHAR(14) OUTPUT
AS
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
BEGIN
	SET @SOCIETE = UPPER(@SOCIETE)

	IF EXISTS (SELECT * FROM SOCIETE WHERE UPPER(NOM) = @SOCIETE AND ISRESIDANT = @ISRESIDANT)
		SET @ID = (SELECT SOCIETEID FROM SOCIETE WHERE UPPER(NOM) = @SOCIETE AND ISRESIDANT = @ISRESIDANT)
	ELSE BEGIN
		INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
		SET @IDENTITY = (SELECT @@IDENTITY AS ID)
		SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
		SET @ID = @FLAG + @IDENTITY
		INSERT INTO SOCIETE(SOCIETEID, NOM, ISRESIDANT, ADRESSE, ADRESSE2, CP, VILLE, INTERDIT, DEBUTINTERDIT, FININTERDIT, DATECREATION, DATEMAJ)
			VALUES (@ID, @SOCIETE, @ISRESIDANT, @ADRESSE, @ADRESSE, @CODEPOSTAL, @VILLE, '0', CURRENT_TIMESTAMP-1, CURRENT_TIMESTAMP+(365*100), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	END
END
GO

IF OBJECT_ID('dbo.PS_CVISITE_CREATION_FONCTION', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_CVISITE_CREATION_FONCTION;
GO
CREATE PROCEDURE dbo.PS_CVISITE_CREATION_FONCTION
	@LIBELLE VARCHAR(30),
	@ID INT OUTPUT
AS
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
BEGIN
	SET @LIBELLE = UPPER(@LIBELLE)

	IF EXISTS (SELECT * FROM FONCTION WHERE UPPER(LIBELLE) = @LIBELLE) BEGIN
		SET @ID = (SELECT CODEFONCTION FROM FONCTION WHERE UPPER(LIBELLE) = @LIBELLE)
	END
	ELSE BEGIN
		INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
		SET @IDENTITY = (SELECT @@IDENTITY AS ID)
		SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
		SET @ID = @FLAG + @IDENTITY
		INSERT INTO FONCTION(CODEFONCTION, LIBELLE, DATECREATION, DATEMAJ)
			VALUES (@ID, @LIBELLE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	END
END
GO

IF OBJECT_ID('dbo.PS_CVISITE_CREATION_VISITEUR', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_CVISITE_CREATION_VISITEUR;
GO
CREATE PROCEDURE dbo.PS_CVISITE_CREATION_VISITEUR
	@NOM VARCHAR(35),
	@PRENOM VARCHAR(35),
	@SOCIETE VARCHAR(200),
	@FONCTION VARCHAR(35),
	@ADRESSE VARCHAR(150),
	@CODEPOSTAL VARCHAR(10),
	@VILLE VARCHAR(35),
	@TEL VARCHAR(20),
	@FAX VARCHAR(20),
	@EMAIL VARCHAR(150),
	@INTERDIT VARCHAR(1),
	@DEBUTINTERDIT DATETIME,
	@FININTERDIT DATETIME,
	@ID VARCHAR(14) OUTPUT
AS
	DECLARE @CIVID INT
	DECLARE @SOCID VARCHAR(14)
	DECLARE @FCTID INT
	DECLARE @NATUREID VARCHAR(14)
	DECLARE @PAYSID VARCHAR(14)
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
BEGIN
	SET @NOM = UPPER(@NOM)
	SET @PRENOM = @PRENOM
	SET @SOCIETE = UPPER(@SOCIETE)
	SET @FONCTION = UPPER(@FONCTION)
	SET @NATUREID = 'VPARDEFAUT'
	SET @PAYSID = 'VPARDEFAUT'
	EXEC PS_CVISITE_CREATION_SOCIETE @SOCIETE, 0, @ADRESSE, @CODEPOSTAL, @VILLE, @SOCID OUTPUT
	EXEC PS_CVISITE_CREATION_FONCTION @FONCTION, @FCTID OUTPUT

	IF EXISTS (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR WHERE UPPER(NOM) = @NOM AND UPPER(PRENOM) = @PRENOM AND UPPER(SOCIETE) = @SOCIETE) BEGIN
		SET @ID = (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR WHERE UPPER(NOM) = @NOM AND UPPER(PRENOM) = @PRENOM AND UPPER(SOCIETE) = @SOCIETE)
		UPDATE INTERLOCUTEUR SET CODEFONCTION = @FCTID, FONCTION = @FONCTION, SOCIETEID = @SOCID, TELEPHONE = @TEL, FAX = @FAX, EMAIL = @EMAIL, NATUREID=@NATUREID, NATIONALITEID=@PAYSID, INTERDIT = @INTERDIT, DEBUTINTERDIT = @DEBUTINTERDIT, FININTERDIT = @FININTERDIT, DATEMAJ = CURRENT_TIMESTAMP WHERE INTERLOCUTEURID = @ID
	END
	ELSE BEGIN
		INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
		SET @IDENTITY = (SELECT @@IDENTITY AS ID)
		SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
		SET @ID = @FLAG + @IDENTITY

		INSERT INTO INTERLOCUTEUR (INTERLOCUTEURID, NOM, PRENOM, NOMPRENOM, CODEFONCTION, FONCTION, SOCIETEID, SOCIETE, TELEPHONE, FAX, EMAIL, NATUREID, NATIONALITEID, INTERDIT, DEBUTINTERDIT, FININTERDIT, DATECREATION, DATEMAJ)
			VALUES (@ID, @NOM, @PRENOM, @NOM+' '+@PRENOM, @FCTID, @FONCTION, @SOCID, @SOCIETE, @TEL, @FAX, @EMAIL, @NATUREID, @PAYSID, @INTERDIT, @DEBUTINTERDIT, @FININTERDIT, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	END
END
GO

-------------------------------
-- PROCEDURES STOCKEES ZCL25 --
-------------------------------

/*
	récupération id
	retourne l'ID (codecivilite) modifiee ou cree

	Dependances :
	seq_identity

	MAH 30/06/2008
*/
IF OBJECT_ID('dbo.PS_ZCL25_SELECTIONCIVILITE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ZCL25_SELECTIONCIVILITE;
GO
CREATE PROCEDURE dbo.PS_ZCL25_SELECTIONCIVILITE
	@LIBELLE VARCHAR(30),
	@ID INT OUTPUT
AS
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
BEGIN
	SET @LIBELLE = UPPER(@LIBELLE)
	IF EXISTS (SELECT * FROM CIVILITE WHERE UPPER(CIVILITE) = @LIBELLE) BEGIN
		SET @ID = (SELECT CODECIVILITE FROM CIVILITE WHERE UPPER(CIVILITE) = @LIBELLE)
	END
	ELSE
		SET @ID = 0
END
GO
/*
	recuperation id nationalite

	Dependances :
	seq_identity

	MAH 08/07/2008
*/
IF OBJECT_ID('dbo.PS_ZCL25_SELECTIONNATIONALITE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ZCL25_SELECTIONNATIONALITE;
GO
CREATE PROCEDURE dbo.PS_ZCL25_SELECTIONNATIONALITE
	@LIBELLE VARCHAR(50),
	@ID VARCHAR(35) OUTPUT
AS

BEGIN
	SET @LIBELLE = UPPER(@LIBELLE)

	IF EXISTS (SELECT * FROM PAYS WHERE UPPER(NATIONALITE) = @LIBELLE) BEGIN
		SET @ID = (SELECT PAYSID FROM PAYS WHERE UPPER(NATIONALITE) = @LIBELLE)
	END
	ELSE BEGIN
		SET @ID = 'VPARDEFAUT'
	END
END
GO
/*
	récupération id
	retourne l'ID

	Dependances :
	seq_identity

	MAH 30/06/2008
*/
IF OBJECT_ID('dbo.PS_ZCL25_SELECTIONTYPEVISITE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ZCL25_SELECTIONTYPEVISITE;
GO
CREATE PROCEDURE dbo.PS_ZCL25_SELECTIONTYPEVISITE
	@LIBELLE VARCHAR(30),
	@ID INT OUTPUT
AS
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
BEGIN
	SET @LIBELLE = UPPER(@LIBELLE)
	IF EXISTS (SELECT * FROM TYPEVISITE WHERE UPPER(TYPEVISITE) = @LIBELLE) BEGIN
		SET @ID = (SELECT TYPEVISITEID FROM TYPEVISITE WHERE UPPER(TYPEVISITE) = @LIBELLE)
	END
	ELSE
		SET @ID = 0
END
GO
/*
	Creation de bureau

	MAH 30/06/2008
*/
IF OBJECT_ID('dbo.PS_ZCL25_CREATIONBUREAU', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ZCL25_CREATIONBUREAU;
GO
CREATE PROCEDURE dbo.PS_ZCL25_CREATIONBUREAU
	@BUREAU VARCHAR(15),
	@ETAGEID VARCHAR(14),
	@ID VARCHAR(14) OUTPUT
AS
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
BEGIN
	SET @BUREAU = UPPER(@BUREAU)
	IF @ETAGEID = ''
		SET @ETAGEID = 'VPARDEFAUT'

	IF EXISTS (SELECT * FROM BUREAUX WHERE UPPER(BUREAU) = @BUREAU AND ETAGEID  = @ETAGEID)
		SET @ID = (SELECT BUREAUID FROM BUREAUX WHERE UPPER(BUREAU) = @BUREAU AND ETAGEID  = @ETAGEID)
	ELSE BEGIN
		INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
		SET @IDENTITY = (SELECT @@IDENTITY AS ID)
		SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
		SET @ID = @FLAG + @IDENTITY
		INSERT INTO BUREAUX (BUREAUID, ETAGEID, BUREAU, DATECREATION, DATEMAJ)
			VALUES (@ID, @ETAGEID, @BUREAU, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	END
END
GO
/*
	Creation ou mise a jour d'une Civilite
	retourne l'ID (codecivilite) modifiee ou cree

	Dependances :
	seq_identity

	MAH 30/06/2008
*/
IF OBJECT_ID('dbo.PS_ZCL25_CREATIONCIVILITE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ZCL25_CREATIONCIVILITE;
GO
CREATE PROCEDURE dbo.PS_ZCL25_CREATIONCIVILITE
	@LIBELLE VARCHAR(30),
	@LIBELLECOURT VARCHAR(5),
	@ID INT OUTPUT
AS
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
BEGIN
	SET @LIBELLE = UPPER(@LIBELLE)
	SET @LIBELLECOURT = UPPER(@LIBELLECOURT)
	IF EXISTS (SELECT * FROM CIVILITE WHERE UPPER(CIVILITE) = @LIBELLE) BEGIN
		SET @ID = (SELECT CODECIVILITE FROM CIVILITE WHERE UPPER(CIVILITE) = @LIBELLE)
		UPDATE CIVILITE SET LIBELLECOURT = @LIBELLECOURT
	END
	ELSE BEGIN
		INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
		SET @IDENTITY = (SELECT @@IDENTITY AS ID)
		SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
		SET @ID = @FLAG + @IDENTITY
		INSERT INTO CIVILITE(CODECIVILITE, CIVILITE, LIBELLECOURT, DATECREATION, DATEMAJ)
			VALUES (@ID, @LIBELLE, @LIBELLECOURT, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	END
END
GO
/*
	Creation ou mise a jour d'un etage
	retourne l'ID (etageid) modifiee ou cree

	Dependances :
	seq_identity

	MAH 30/06/2008
*/
IF OBJECT_ID('dbo.PS_ZCL25_CREATIONETAGE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ZCL25_CREATIONETAGE;
GO
CREATE PROCEDURE dbo.PS_ZCL25_CREATIONETAGE
	@ETAGE VARCHAR(35),
	@BATIMENTID VARCHAR(14),
	@ID VARCHAR(14) OUTPUT
AS
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
BEGIN
	SET @ETAGE = UPPER(@ETAGE)
	IF @BATIMENTID = ''
		SET @BATIMENTID = 'VPARDEFAUT'

	IF EXISTS (SELECT * FROM ETAGES WHERE UPPER(ETAGE) = @ETAGE AND BATIMENTID = @BATIMENTID)
		SET @ID = (SELECT ETAGEID FROM ETAGES WHERE UPPER(ETAGE) = @ETAGE AND BATIMENTID = @BATIMENTID)
	ELSE BEGIN
		INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
		SET @IDENTITY = (SELECT @@IDENTITY AS ID)
		SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
		SET @ID = @FLAG + @IDENTITY
		INSERT INTO ETAGES(ETAGEID, BATIMENTID, ETAGE, DATECREATION, DATEMAJ)
			VALUES (@ID, @BATIMENTID, @ETAGE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	END
END
GO
/*
	Creation ou mise a jour d'une fonction
	retourne l'ID (codefonction) modifiee ou cree

	Dependances :
	seq_identity

	MAH 30/06/2008
*/
IF OBJECT_ID('dbo.PS_ZCL25_CREATIONFONCTION', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ZCL25_CREATIONFONCTION;
GO
CREATE PROCEDURE dbo.PS_ZCL25_CREATIONFONCTION
	@LIBELLE VARCHAR(30),
	@ID INT OUTPUT
AS
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
BEGIN
	SET @LIBELLE = UPPER(@LIBELLE)

	IF EXISTS (SELECT * FROM FONCTION WHERE UPPER(LIBELLE) = @LIBELLE) BEGIN
		SET @ID = (SELECT CODEFONCTION FROM FONCTION WHERE UPPER(LIBELLE) = @LIBELLE)
	END
	ELSE BEGIN
		INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
		SET @IDENTITY = (SELECT @@IDENTITY AS ID)
		SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
		SET @ID = @FLAG + @IDENTITY
		INSERT INTO FONCTION(CODEFONCTION, LIBELLE, DATECREATION, DATEMAJ)
			VALUES (@ID, @LIBELLE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	END
END
GO
/*
	Creation ou mise a jour d'une nature
	retourne l'ID (natureid) modifiee ou cree

	Dependances :
	seq_identity

	MAH 30/06/2008
*/
IF OBJECT_ID('dbo.PS_ZCL25_CREATIONNATURE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ZCL25_CREATIONNATURE;
GO
CREATE PROCEDURE dbo.PS_ZCL25_CREATIONNATURE
	@LIBELLE VARCHAR(30),
	@ID VARCHAR(14) OUTPUT
AS
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
BEGIN
	SET @LIBELLE = UPPER(@LIBELLE)

	IF EXISTS (SELECT * FROM NATURE WHERE UPPER(LIBELLE) = @LIBELLE) BEGIN
		SET @ID = (SELECT NATUREID FROM NATURE WHERE UPPER(LIBELLE) = @LIBELLE)
	END
	ELSE BEGIN
		INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
		SET @IDENTITY = (SELECT @@IDENTITY AS ID)
		SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
		SET @ID = @FLAG + @IDENTITY
		INSERT INTO NATURE(NATUREID, LIBELLE, INTERDIT, DEBUTINTERDIT, FININTERDIT, DATECREATION, DATEMAJ)
			VALUES (@ID, @LIBELLE, '0', CURRENT_TIMESTAMP-1, CURRENT_TIMESTAMP+(365*100), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	END
END
GO
/*
	Creation ou mise a jour d'un service
	retourne l'ID

	Dependances :
	seq_identity

	MAH 30/06/2008
*/
IF OBJECT_ID('dbo.PS_ZCL25_CREATIONSERVICE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ZCL25_CREATIONSERVICE;
GO
CREATE PROCEDURE dbo.PS_ZCL25_CREATIONSERVICE
	@LIBELLE VARCHAR(30),
	@ID VARCHAR(14) OUTPUT
AS
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
BEGIN
	SET @LIBELLE = UPPER(@LIBELLE)

	IF EXISTS (SELECT * FROM SERVICE WHERE UPPER(LIBELLE) = @LIBELLE) BEGIN
		SET @ID = (SELECT SERVICEID FROM SERVICE WHERE UPPER(LIBELLE) = @LIBELLE)
	END
	ELSE BEGIN
		INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
		SET @IDENTITY = (SELECT @@IDENTITY AS ID)
		SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
		SET @ID = @FLAG + @IDENTITY
		INSERT INTO SERVICE(SERVICEID, LIBELLE, DEPTID, EXTERNALID, DATECREATION, DATEMAJ)
			VALUES (@ID, @LIBELLE, 'VPARDEFAUT', 'VPARDEFAUT', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	END
END
GO
/*
	Creation ou mise a jour d'un site
	retourne l'ID (siteid) modifiee ou cree

	Dependances :
	seq_identity

	MAH 30/06/2008
*/
IF OBJECT_ID('dbo.PS_ZCL25_CREATIONSITE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ZCL25_CREATIONSITE;
GO
CREATE PROCEDURE dbo.PS_ZCL25_CREATIONSITE
	@LIBELLE VARCHAR(35),
	@ID VARCHAR(14) OUTPUT
AS
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
BEGIN
	SET @LIBELLE = UPPER(@LIBELLE)
	IF EXISTS (SELECT * FROM SITE WHERE UPPER(LIBELLE) = @LIBELLE)
		SET @ID = (SELECT SITEID FROM SITE WHERE UPPER(LIBELLE) = @LIBELLE)
	ELSE BEGIN
		INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
		SET @IDENTITY = (SELECT @@IDENTITY AS ID)
		SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
		SET @ID = @FLAG + @IDENTITY
		INSERT INTO SITE(SITEID, LIBELLE, DATECREATION, DATEMAJ)
			VALUES (@ID, @LIBELLE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	END
END
GO
/*
	Creation ou mise a jour d'une societe
	retourne l'ID

	Dependances :
	seq_identity

	MAH 30/06/2008
*/
IF OBJECT_ID('dbo.PS_ZCL25_CREATIONSOCIETE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ZCL25_CREATIONSOCIETE;
GO
CREATE PROCEDURE dbo.PS_ZCL25_CREATIONSOCIETE
	@SOCIETE VARCHAR(35),
	@ISRESIDANT VARCHAR(1),
	@ID VARCHAR(14) OUTPUT
AS
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
BEGIN
	SET @SOCIETE = UPPER(@SOCIETE)

	IF EXISTS (SELECT * FROM SOCIETE WHERE UPPER(NOM) = @SOCIETE AND ISRESIDANT = @ISRESIDANT)
		SET @ID = (SELECT SOCIETEID FROM SOCIETE WHERE UPPER(NOM) = @SOCIETE AND ISRESIDANT = @ISRESIDANT)
	ELSE BEGIN
		INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
		SET @IDENTITY = (SELECT @@IDENTITY AS ID)
		SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
		SET @ID = @FLAG + @IDENTITY
		INSERT INTO SOCIETE(SOCIETEID, NOM, ISRESIDANT, DATECREATION, DATEMAJ)
			VALUES (@ID, @SOCIETE, @ISRESIDANT, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	END
END
GO
/*
	Creation de residants

	Dependances :
	seq_identity

	MAH 30/06/2008
*/
IF OBJECT_ID('dbo.PS_ZCL25_CREATIONRESIDANT', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ZCL25_CREATIONRESIDANT;
GO
CREATE PROCEDURE dbo.PS_ZCL25_CREATIONRESIDANT
	@RM VARCHAR(1), /* SI 1 RESIDANT UPDATE, SI 0 RESIDANT PAS UPDATE */
	@RCTRL VARCHAR(50), /* CLÉ 1 SI MATRICULE, 2 SI NOM+PRENOM+TEL*/
	@RMATRICULE VARCHAR(50),
	@RSOCIETE VARCHAR(200),
	@RCIVILITE VARCHAR(30),
	@RNOM VARCHAR(35),
	@RPRENOM VARCHAR(35),
	@RTEL VARCHAR(20),
	@RSITE VARCHAR(35),
	@RETAGE VARCHAR(7),
	@RBUREAU VARCHAR(15),
	@RFONCTION VARCHAR(35),
	@RSERVICE VARCHAR(35),
	@RLOGIN VARCHAR(20),
	@RPASSWORD VARCHAR(250),
	@RHABILITATIONVISITE VARCHAR(1),
	@RLISTEROUGE VARCHAR(1),
	@RISEXTERN VARCHAR(1),
	@RISACTIF VARCHAR(1),
	@RISRESIDENT VARCHAR(1),
	@RINTERDIT VARCHAR(1),
	@RDEBUTINTERDIT DATETIME,
	@RFININTERDIT DATETIME,
	@RID VARCHAR(14) OUTPUT
AS
	DECLARE @CIVID INT
	DECLARE @SITEID VARCHAR(14)
	DECLARE @SOCID VARCHAR(14)
	DECLARE @ETAGEID VARCHAR(14)
	DECLARE @BUREAUID VARCHAR(14)
	DECLARE @FCTID INT
	DECLARE @SERID VARCHAR(14)
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
BEGIN
	SET @RNOM = UPPER(@RNOM)
	SET @RPRENOM = UPPER(@RPRENOM)
	SET @RMATRICULE = UPPER(@RMATRICULE)
	EXEC PS_ZCL25_CREATIONSOCIETE @RSOCIETE, 1, @SOCID OUTPUT
	EXEC PS_ZCL25_SELECTIONCIVILITE @RCIVILITE, @CIVID OUTPUT
	EXEC PS_ZCL25_CREATIONSITE @RSITE, @SITEID OUTPUT
	EXEC PS_ZCL25_CREATIONETAGE @RETAGE, '', @ETAGEID OUTPUT
	EXEC PS_ZCL25_CREATIONBUREAU @RBUREAU, @ETAGEID, @BUREAUID OUTPUT
	EXEC PS_ZCL25_CREATIONFONCTION @RFONCTION, @FCTID OUTPUT
	EXEC PS_ZCL25_CREATIONSERVICE @RSERVICE, @SERID OUTPUT

	IF @RMATRICULE = ''
		SET @RMATRICULE = @RNOM + @RPRENOM

	IF (@RCTRL = '1')  AND (EXISTS (SELECT * FROM RESIDANTS WHERE MATRICULE = @RMATRICULE)) BEGIN
		SET @RID = (SELECT RESIDANTID FROM RESIDANTS WHERE MATRICULE = @RMATRICULE)
		IF @RM = '1'
			UPDATE RESIDANTS SET CODECIVILITE = @CIVID, CIVILITE = @RCIVILITE, NOM = @RNOM, PRENOM = @RPRENOM, NOMPRENOM = @RNOM + ' ' + @RPRENOM, TELEPHONE = @RTEL, SITE = @RSITE, SITEID = @SITEID, ETAGE = @RETAGE, ETAGEID = @ETAGEID, BUREAU = @RBUREAU, BUREAUID = @BUREAUID, DATEMAJ = CURRENT_TIMESTAMP WHERE RESIDANTID = @RID
	END
	ELSE BEGIN
		IF (@RCTRL = '2')  AND (EXISTS (SELECT * FROM RESIDANTS WHERE UPPER(NOM) = @RNOM AND UPPER(PRENOM) = @RPRENOM AND UPPER(TELEPHONE) = @RTEL)) BEGIN
			SET @RID = (SELECT RESIDANTID FROM RESIDANTS WHERE UPPER(NOM) = @RNOM AND UPPER(PRENOM) = @RPRENOM AND UPPER(TELEPHONE) = @RTEL)
			IF @RM = '1'
				UPDATE RESIDANTS SET CODECIVILITE = @CIVID, CIVILITE = @RCIVILITE, NOM = @RNOM, PRENOM = @RPRENOM, NOMPRENOM = @RNOM + ' ' + @RPRENOM, TELEPHONE = @RTEL, SITE = @RSITE, SITEID = @SITEID, ETAGE = @RETAGE, ETAGEID = @ETAGEID, BUREAU = @RBUREAU, BUREAUID = @BUREAUID, DATEMAJ = CURRENT_TIMESTAMP WHERE RESIDANTID = @RID
		END
		ELSE BEGIN
			INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
			SET @IDENTITY = (SELECT @@IDENTITY AS ID)
			SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
			SET @RID = @FLAG + @IDENTITY

			INSERT INTO RESIDANTS (RESIDANTID, SOCIETE, SOCIETEID, PLANID,	EXTERNALID, CODEFONCTION, FONCTION, SERVICEID, SERVICE, NOM, PRENOM, NOMPRENOM, MATRICULE, THELOGIN, THEPASSWORD, CODECIVILITE, CIVILITE, TELEPHONE, SITE, SITEID, ETAGE, ETAGEID, BUREAU, BUREAUID, HABILITATIONVISITE, LISTEROUGE, ISEXTERN, ISRESIDENT, ISACTIF, INTERDIT, DEBUTINTERDIT, FININTERDIT, DATECREATION, DATEMAJ)
				VALUES (@RID, @RSOCIETE, @SOCID, 'VPARDEFAUT', 'VPARDEFAUT', @FCTID, @RFONCTION, @SERID, @RSERVICE, @RNOM, @RPRENOM, @RNOM+' '+@RPRENOM, @RMATRICULE, @RLOGIN, @RPASSWORD, @CIVID, @RCIVILITE, @RTEL, @RSITE, @SITEID, @RETAGE, @ETAGEID, @RBUREAU, @BUREAUID, @RHABILITATIONVISITE, @RLISTEROUGE, @RISEXTERN, @RISACTIF, @RISRESIDENT, @RINTERDIT, @RDEBUTINTERDIT, @RFININTERDIT, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
		END
	END
END
GO
/*
	Creation de visiteurs

	Dependances :
	seq_identity

	MAH 30/06/2008
*/
IF OBJECT_ID('dbo.PS_ZCL25_CREATIONINTERLOCUTEUR', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ZCL25_CREATIONINTERLOCUTEUR;
GO
CREATE PROCEDURE dbo.PS_ZCL25_CREATIONINTERLOCUTEUR
	@ICIVILITE VARCHAR(30),
	@INOM VARCHAR(35),
	@IPRENOM VARCHAR(35),
	@ISOCIETE VARCHAR(200),
	@ITEL VARCHAR(20),
	@IINTERDIT VARCHAR(1),
	@IDEBUTINTERDIT DATETIME,
	@IFININTERDIT DATETIME,
	@IPAYS VARCHAR(35),
	@IFONCTION VARCHAR(35),
	@INATURE VARCHAR(35),
	@INATIONALITE VARCHAR(50),
	@IID VARCHAR(14) OUTPUT
AS
	DECLARE @CIVID INT
	DECLARE @SOCID VARCHAR(14)
	DECLARE @FCTID INT
	DECLARE @NATUREID VARCHAR(14)
	DECLARE @NATID VARCHAR(14)
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
BEGIN
	SET @INOM = UPPER(@INOM)
	SET @IPRENOM = UPPER(@IPRENOM)
	SET @ISOCIETE = UPPER(@ISOCIETE)
	SET @IFONCTION = UPPER(@IFONCTION)
	SET @INATURE = UPPER(@INATURE)
	SET @INATIONALITE = UPPER(@INATIONALITE)
	EXEC PS_ZCL25_SELECTIONCIVILITE @ICIVILITE, @CIVID OUTPUT
	EXEC PS_ZCL25_CREATIONSOCIETE @ISOCIETE, 0, @SOCID OUTPUT
	EXEC PS_ZCL25_CREATIONFONCTION @IFONCTION, @FCTID OUTPUT
	EXEC PS_ZCL25_CREATIONNATURE @INATURE, @NATUREID OUTPUT
	EXEC PS_ZCL25_SELECTIONNATIONALITE @INATIONALITE, @NATID OUTPUT

	IF EXISTS (SELECT * FROM INTERLOCUTEUR WHERE UPPER(NOM) = @INOM AND UPPER(PRENOM) = @IPRENOM  AND UPPER(SOCIETE) = @ISOCIETE) BEGIN
		SET @IID = (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR WHERE UPPER(NOM) = @INOM AND UPPER(PRENOM) = @IPRENOM AND UPPER(SOCIETE) = @ISOCIETE)
		UPDATE INTERLOCUTEUR SET NATUREID = @NATUREID, NATIONALITEID = @NATID, CODEFONCTION = @FCTID, FONCTION = @IFONCTION, PAYS = @IPAYS, INTERDIT = @IINTERDIT, DEBUTINTERDIT = @IDEBUTINTERDIT, FININTERDIT = @IFININTERDIT, SOCIETEID = @SOCID, CODECIVILITE = @CIVID, CIVILITE = @ICIVILITE, TELEPHONE = @ITEL, DATEMAJ = CURRENT_TIMESTAMP WHERE INTERLOCUTEURID = @IID
	END
	ELSE BEGIN
		INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
		SET @IDENTITY = (SELECT @@IDENTITY AS ID)
		SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
		SET @IID = @FLAG + @IDENTITY

		INSERT INTO INTERLOCUTEUR (INTERLOCUTEURID, NOM, PRENOM, NOMPRENOM, NATUREID, NATIONALITEID, CODEFONCTION, FONCTION, PAYS, INTERDIT, DEBUTINTERDIT, FININTERDIT, SOCIETEID, SOCIETE, CODECIVILITE, CIVILITE, TELEPHONE, DATECREATION, DATEMAJ)
			VALUES (@IID, @INOM, @IPRENOM, @INOM+' '+@IPRENOM, @NATUREID, @NATID, @FCTID, @IFONCTION, @IPAYS, @IINTERDIT, @IDEBUTINTERDIT, @IFININTERDIT, @SOCID, @ISOCIETE, @CIVID, @ICIVILITE, @ITEL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	END
END
GO
/*
	Creation de pre enregistrements

	Dependances :
	seq_identity

	MAH 30/06/2008
*/
IF OBJECT_ID('dbo.PS_ZCL25_CREATIONVISITE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ZCL25_CREATIONVISITE;
GO
CREATE PROCEDURE dbo.PS_ZCL25_CREATIONVISITE
	/* VISITE (RESIDANTS) */
	@RM VARCHAR(1), /* SI 0 PAS D'UPDATE DE RESIDANT */
	@RCTRL VARCHAR(50),
	@RMATRICULE VARCHAR(50),
	@RSOCIETE VARCHAR(200),
	@RCIVILITE VARCHAR(30),
	@RNOM VARCHAR(35),
	@RPRENOM VARCHAR(35),
	@RTEL VARCHAR(20),
	@RSITE VARCHAR(35),
	@RETAGE VARCHAR(7),
	@RBUREAU VARCHAR(15),
	@RFONCTION VARCHAR(35),
	@RSERVICE VARCHAR(35),
	@RLOGIN VARCHAR(20),
	@RPASSWORD VARCHAR(250),
	@RHABILITATIONVISITE VARCHAR(1),
	@RLISTEROUGE VARCHAR(1),
	@RISEXTERN VARCHAR(1),
	@RISACTIF VARCHAR(1),
	@ISRESIDENT VARCHAR(1),
	@RINTERDIT VARCHAR(1),
	@RDEBUTINTERDIT DATETIME,
	@RFININTERDIT DATETIME,

	/* RDV (VISITE)*/
	@VOBJET VARCHAR(35),
	@VTYPE VARCHAR(35),
	@VLIEU VARCHAR(50),
	@VCOMMENTAIRE VARCHAR(200),
	@VDATE DATETIME,
	@VHEURE DATETIME,
	@VFDATE DATETIME,
	@VFHEURE DATETIME,

	/* VISITEUR (INTERLOCUTEUR) */
	@ICIVILITE VARCHAR(30),
	@INOM VARCHAR(35),
	@IPRENOM VARCHAR(35),
	@ISOCIETE VARCHAR(200),
	@ITEL VARCHAR(20),
	@IINTERDIT VARCHAR(1),
	@IDEBUTINTERDIT DATETIME,
	@IFININTERDIT DATETIME,
	@IPAYS VARCHAR(35),
	@IFONCTION VARCHAR(35),
	@INATURE VARCHAR(35),
	@INATIONALITE VARCHAR(50),

	/* RETOUR */
	@VID VARCHAR(14) OUTPUT

AS
	DECLARE @NUMVISITE INT
	DECLARE @SOCIETERESID VARCHAR(35)
	DECLARE @NOMPRENOMRESID VARCHAR(70)
	DECLARE @RID VARCHAR(14)
	DECLARE @IID VARCHAR(14)
	DECLARE @SID VARCHAR(14)
	DECLARE @BID VARCHAR(14)
	DECLARE @TYPEID INT
	DECLARE @VSTATUT VARCHAR(20)
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
BEGIN
	EXEC PS_ZCL25_SELECTIONTYPEVISITE @VTYPE, @TYPEID OUTPUT
	EXEC PS_ZCL25_CREATIONINTERLOCUTEUR @ICIVILITE, @INOM, @IPRENOM, @ISOCIETE, @ITEL, @IINTERDIT, @IDEBUTINTERDIT, @IFININTERDIT, @IPAYS, @IFONCTION, @INATURE, @INATIONALITE, @IID OUTPUT

	EXEC PS_ZCL25_CREATIONRESIDANT @RM, @RCTRL, @RMATRICULE, @RSOCIETE, @RCIVILITE, @RNOM, @RPRENOM, @RTEL, @RSITE, @RETAGE, @RBUREAU, @RFONCTION, @RSERVICE, @RLOGIN, @RPASSWORD, @RHABILITATIONVISITE, @RLISTEROUGE, @RISEXTERN, @RISACTIF, @ISRESIDENT, @RINTERDIT, @RDEBUTINTERDIT, @RFININTERDIT, @RID OUTPUT
	SET @SID = (SELECT SITEID FROM RESIDANTS WHERE RESIDANTID = @RID)
	SET @BID = (SELECT BUREAUID FROM RESIDANTS WHERE RESIDANTID = @RID)

	SET @VSTATUT = (SELECT STATUTVISITE FROM STATUTVISITE WHERE STATUTID = 2)

	SET @NUMVISITE = (SELECT DERNVISITE FROM PARAMETRES)
	SET @NUMVISITE = @NUMVISITE + 1
	UPDATE PARAMETRES SET DERNVISITE = @NUMVISITE

	SET @SOCIETERESID = (SELECT SOCIETE FROM RESIDANTS WHERE RESIDANTID = @RID)
	SET @NOMPRENOMRESID = (SELECT NOMPRENOM FROM RESIDANTS WHERE RESIDANTID = @RID)

	INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
	SET @IDENTITY = (SELECT @@IDENTITY AS ID)
	SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
	SET @VID = @FLAG + @IDENTITY

	INSERT INTO VISITES (VISITEID, CASIERID, PREMIER, NBBDGIMPR, NBBDGIMPRTOTAL, NUMEROVISITE, ORIGINEVISITE, EXTERNALID, INTERLOCUTEURID, RESIDANTID, SITEID, STATUTID, SOCIETERESID, NOMPRENOMRESID, SOCIETEVISIT, NOMPRENOMVISIT, DEBUTPREVU, HDEBUTPREVU, FINPREVU, HFINPREVU, STATUTVISITE, OBJET, TYPEVISITEID, LIEU, OBSERVATION, BUREAUID, PREENREG, DATECREATION, DATEMAJ)
		VALUES (@VID, 0, 0, 0, 0, @NUMVISITE, @NUMVISITE, 'VPARDEFAUT', @IID, @RID, @SID, 2, @SOCIETERESID, @NOMPRENOMRESID, @ISOCIETE, @INOM + ' ' + @IPRENOM, @VDATE, @VHEURE, @VFDATE, @VFHEURE, @VSTATUT, @VOBJET, @TYPEID, @VLIEU, @VCOMMENTAIRE, @BID, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
END
GO
/*
	appel PS_ZCL25_CreationVisite

	Dependances :
	seq_identity

	MAH 08/07/2008
*/
IF OBJECT_ID('dbo.PS_ZCL25_APPELCREATIONVISITE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ZCL25_APPELCREATIONVISITE;
GO
CREATE PROCEDURE dbo.PS_ZCL25_APPELCREATIONVISITE
	/* VISITE (RESIDANTS) */
	@RM VARCHAR(1), /* SI 0 PAS D'UPDATE DE RESIDANT */
	@RMATRICULE VARCHAR(50),
	@RCIVILITE VARCHAR(30),
	@RNOM VARCHAR(35),
	@RPRENOM VARCHAR(35),
	@RTEL VARCHAR(20),
	@RSITE VARCHAR(35),
	@RETAGE VARCHAR(7),
	@RBUREAU VARCHAR(15),

	/* RDV (VISITE)*/
	@VOBJET VARCHAR(35),
	@VLIEU VARCHAR(50),
	@VCOMMENTAIRE VARCHAR(200),
	@VDATE DATETIME,
	@VHEURE DATETIME,

	/* VISITEUR (INTERLOCUTEUR) */
	@ICIVILITE VARCHAR(30),
	@INOM VARCHAR(35),
	@IPRENOM VARCHAR(35),
	@ISOCIETE VARCHAR(200),
	@ITEL VARCHAR(20)
AS
	DECLARE @VID VARCHAR(14)
	DECLARE @RCTRL VARCHAR(50)
	DECLARE @RSOCIETE VARCHAR(35)
	DECLARE @RFONCTION VARCHAR(35)
	DECLARE @RSERVICE VARCHAR(35)
	DECLARE @RLOGIN VARCHAR(20)
	DECLARE @RPASSWORD VARCHAR(250)
	DECLARE @RHABILITATIONVISITE VARCHAR(1)
	DECLARE @RLISTEROUGE VARCHAR(1)
	DECLARE @RISEXTERN VARCHAR(1)
	DECLARE @RISACTIF VARCHAR(1)
	DECLARE @RISRESIDENT VARCHAR(1)
	DECLARE @RINTERDIT VARCHAR(1)
	DECLARE @RDEBUTINTERDIT DATETIME
	DECLARE @RFININTERDIT DATETIME
	DECLARE @IINTERDIT VARCHAR(1)
	DECLARE @IDEBUTINTERDIT DATETIME
	DECLARE @IFININTERDIT DATETIME
	DECLARE @IPAYS VARCHAR(35)
	DECLARE @IFONCTION VARCHAR(35)
	DECLARE @INATURE VARCHAR(35)
	DECLARE @INATIONALITE VARCHAR(50)
	DECLARE @VTYPE VARCHAR(35)
	DECLARE @VFDATE DATETIME
	DECLARE @VFHEURE DATETIME
BEGIN
	SET @RCTRL = '2'
	SET @RSOCIETE = '**********'
	SET @RFONCTION = '**********'
	SET @RSERVICE = '**********'
	SET @RLOGIN = UPPER(@RNOM)
	SET @RPASSWORD = UPPER(@RPRENOM)
	SET @RHABILITATIONVISITE = '1'
	SET @RLISTEROUGE = '0'
	SET @RISEXTERN = '0'
	SET @RISACTIF = '1'
	SET @RISRESIDENT = '1'
	SET @RINTERDIT = '0'
	SET @RDEBUTINTERDIT = CONVERT(DATETIME,CONVERT(VARCHAR,CURRENT_TIMESTAMP,103),103)
	SET @RFININTERDIT = CURRENT_TIMESTAMP + (360*100)
	SET @IINTERDIT = '0'
	SET @IDEBUTINTERDIT = CONVERT(DATETIME,CONVERT(VARCHAR,CURRENT_TIMESTAMP,103),103)
	SET @IFININTERDIT = CURRENT_TIMESTAMP + (360*100)
	SET @IPAYS = 'FRANCE'
	SET @IFONCTION = '**********'
	SET @INATURE = 'VISITEUR'
	SET @INATIONALITE = 'FRANCAIS'
	SET @VTYPE = ''
	SET @VFDATE = @VDATE
	SET @VFHEURE = '15/09/1986 18:00'

	EXEC PS_ZCL25_CREATIONVISITE @RM, @RCTRL, @RMATRICULE, @RSOCIETE, @RCIVILITE, @RNOM, @RPRENOM, @RTEL, @RSITE, @RETAGE, @RBUREAU, @RFONCTION, @RSERVICE, @RLOGIN, @RPASSWORD, @RHABILITATIONVISITE, @RLISTEROUGE, @RISEXTERN, @RISACTIF, @RISRESIDENT, @RINTERDIT, @RDEBUTINTERDIT, @RFININTERDIT, @VOBJET, @VTYPE, @VLIEU, @VCOMMENTAIRE, @VDATE, @VHEURE, @VFDATE, @VFHEURE, @ICIVILITE, @INOM, @IPRENOM, @ISOCIETE, @ITEL, @IINTERDIT, @IDEBUTINTERDIT, @IFININTERDIT, @IPAYS, @IFONCTION, @INATURE, @INATIONALITE, @VID OUTPUT
	SELECT @VID
END
GO
/*
	Entrée des gens

	DEP : Créer guichet TELEM_IMP sur telemaque
	MAH 03/07/2008
*/
IF OBJECT_ID('dbo.PS_ZCL25_UPDATEVISITE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ZCL25_UPDATEVISITE;
GO
CREATE PROCEDURE dbo.PS_ZCL25_UPDATEVISITE
	@VID VARCHAR(14),
	@GUICHET VARCHAR(40)

AS
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
	DECLARE @VISITEID VARCHAR(14)
	DECLARE @GUICHETID VARCHAR(14)
	DECLARE @NUMVISITE INT
BEGIN
	INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
	SET @IDENTITY = (SELECT @@IDENTITY AS ID)
	SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
	SET @VISITEID = @FLAG + @IDENTITY

	SET @NUMVISITE = (SELECT DERNVISITE FROM PARAMETRES)
	SET @NUMVISITE = @NUMVISITE + 1
	UPDATE PARAMETRES SET DERNVISITE = @NUMVISITE

	IF @GUICHET = ''
		SET @GUICHET = 'TELEM_IMP'

	IF EXISTS (SELECT * FROM GUICHET WHERE GUICHET = @GUICHET)
		SET @GUICHETID = (SELECT TOP 1 GUICHETID FROM GUICHET WHERE GUICHET = @GUICHET)
	ELSE
		SET @GUICHETID = 'VPARDEFAUT'

	INSERT INTO VISITES (VISITEID,INTERLOCUTEURID, RESIDANTID, CODESALLE, SITEID, STATUTID, EXTERNALID, SOCIETERESID, NOMPRENOMRESID, SOCIETEVISIT, NOMPRENOMVISIT, DEBUTPREVU, FINPREVU, HDEBUTPREVU, HFINPREVU, NUMEROBADGE, NUMEROVISITE, DEBUTVISITE, FINVISITE, HDEBUT, HFIN, STATUTVISITE, TYPEVISITEID, BOITE, CASIER, OBJET, CASIERID, PIECE, NUMERO, VALIDITE, PARKING, IMMATRICULATION, GUICHETID, OBSERVATION, BUREAUID, LIEU, DATECREATION, DATEMAJ, DATESYNCHRO, ORIGINEVISITE, NBBDGIMPR, NBBDGIMPRTOTAL, FREE1, FREE2, FREE3, FREE4, FREE5, FREE6, FREE7, FREE8, FREE9, FREE10, MARQUE, MODELE, COTE, PREMIER, PREENREG, ZONE, DESCENTE, ECHANGES, BADGEPHYSIQUE, ATTENDU, ATTENDU_VENU, DATEHEUREENTREEPARKING, DATEHEURESORTIEPARKING, STATUTPARKING) SELECT @VISITEID, INTERLOCUTEURID, RESIDANTID, CODESALLE, SITEID, STATUTID, EXTERNALID, SOCIETERESID, NOMPRENOMRESID, SOCIETEVISIT, NOMPRENOMVISIT, DEBUTPREVU, FINPREVU, HDEBUTPREVU, HFINPREVU, NUMEROBADGE, NUMEROVISITE, DEBUTVISITE, FINVISITE, HDEBUT, HFIN, STATUTVISITE, TYPEVISITEID, BOITE, CASIER, OBJET, CASIERID, PIECE, NUMERO, VALIDITE, PARKING, IMMATRICULATION, GUICHETID, OBSERVATION, BUREAUID, LIEU, DATECREATION, DATEMAJ, DATESYNCHRO, ORIGINEVISITE, NBBDGIMPR, NBBDGIMPRTOTAL, FREE1, FREE2, FREE3, FREE4, FREE5, FREE6, FREE7, FREE8, FREE9, FREE10, MARQUE, MODELE, COTE, PREMIER, PREENREG, ZONE, DESCENTE, ECHANGES, BADGEPHYSIQUE, ATTENDU, ATTENDU_VENU, DATEHEUREENTREEPARKING, DATEHEURESORTIEPARKING, STATUTPARKING FROM VISITES WHERE VISITEID = @VID
	UPDATE VISITES SET GUICHETID = @GUICHETID, STATUTID = 8, STATUTVISITE = 'EN COURS', DATECREATION = CURRENT_TIMESTAMP, DATEMAJ = CURRENT_TIMESTAMP, DEBUTVISITE = CURRENT_TIMESTAMP, HDEBUT = CURRENT_TIMESTAMP, FINVISITE = FINPREVU, NUMEROVISITE = @NUMVISITE WHERE VISITEID = @VISITEID

	INSERT INTO ZCL25_VISITES VALUES (@VISITEID, 0)
END

GO

-------------------------------
-- PROCEDURES STOCKEES ZCL27 --
-------------------------------

/*	PROCEDURE STOCKEE : ZCL27_ENREGBADGE */
IF OBJECT_ID('dbo.ZCL27_ENREGBADGE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.ZCL27_ENREGBADGE;
GO
CREATE PROCEDURE dbo.ZCL27_ENREGBADGE
	@Num VARCHAR(20),
	@Val INT,
	@SiteID VARCHAR(14)
AS
	IF EXISTS (SELECT * FROM ZCL27_BADGE WHERE B_CARD_NO = @Num AND SITEID = @SiteID)
		UPDATE ZCL27_BADGE SET B_ASSIGNED = @Val, CARDQUALITY = 'Pool', DATEMAJ = CURRENT_TIMESTAMP
			WHERE B_CARD_NO = @Num AND SITEID = @SiteID
	ELSE
		INSERT INTO ZCL27_BADGE (B_CARD_NO, B_ASSIGNED, SITEID, DATECREATION, DATEMAJ) VALUES (@Num, @Val, @SiteID, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
GO

/*	PROCEDURE STOCKEE : ZCL27_ENREGWORKGROUP */
IF OBJECT_ID('dbo.ZCL27_ENREGWORKGROUP', 'P') IS NOT NULL
	DROP PROCEDURE dbo.ZCL27_ENREGWORKGROUP;
GO
CREATE PROCEDURE dbo.ZCL27_ENREGWORKGROUP
	@Name VARCHAR(40),
	@Id VARCHAR(20),
	@SiteID VARCHAR(14)
AS
	IF EXISTS (SELECT * FROM ZCL27_WORKGROUP WHERE WG_ID = @Id AND SITEID = @SiteID)
		UPDATE ZCL27_WORKGROUP SET WG_NAME = @Name, DATEMAJ = CURRENT_TIMESTAMP
			WHERE WG_ID = @Id AND SITEID = @SiteID
	ELSE
		INSERT INTO ZCL27_WORKGROUP (WG_NAME, WG_ID, SITEID, DATECREATION, DATEMAJ) VALUES (@Name, @Id, @SiteID, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
GO

/*	PROCEDURE STOCKEE : ZCL27_ENREGEMPLOYEE */
IF OBJECT_ID('dbo.ZCL27_ENREGEMPLOYEE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.ZCL27_ENREGEMPLOYEE;
GO
CREATE PROCEDURE dbo.ZCL27_ENREGEMPLOYEE
	@InterlocuteurID VARCHAR(14),
	@SiteID VARCHAR(14),
	@ECard VARCHAR(45),
	@EFirst VARCHAR(45),
	@ELast VARCHAR(45),
	@EStartDate DATETIME,
	@EStartDatet DATETIME,
	@EEndDate DATETIME,
	@EEndDatet DATETIME,
	@StatutEntree INT,
	@EWId VARCHAR(45)
AS
	IF NOT EXISTS (SELECT * FROM ZCL27_BADGE WHERE B_CARD_NO = @ECard AND SITEID = @SiteID)
		INSERT INTO ZCL27_BADGE (B_CARD_NO, B_ASSIGNED, CARDQUALITY, SITEID, DATECREATION, DATEMAJ)
			VALUES (@ECard, 1, 'Creation', @SiteID, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	INSERT INTO ZCL27_EMPLOYEE (INTERLOCUTEURID, SITEID, E_CARDASSIGNED, E_CARDNUMBER, E_FIRSTNAME, E_LASTNAME, E_STARTDATE, E_STARTDATETIME, E_ENDDATE, E_ENDDATETIME, E_WG_ID, STATUT_ENTREE, STATUT_SORTIE, DATECREATION, DATEMAJ)
		VALUES (@InterlocuteurID, @SiteID, 0, @ECard, @EFirst, @ELast, @EStartDate, @EStartDatet, @EEndDate, @EEndDatet, @EWId, @StatutEntree, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
GO

/*	PROCEDURE STOCKEE : ZCL27_UPDATEEMPLOYEE */
IF OBJECT_ID('dbo.ZCL27_UPDATEEMPLOYEE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.ZCL27_UPDATEEMPLOYEE;
GO
CREATE PROCEDURE dbo.ZCL27_UPDATEEMPLOYEE
	@ID INT,
	@ECard VARCHAR(45),
	@ECardAssigned INT,
	@EID INT,
	@ELastUpdatedTime VARCHAR(19),
	@EReference INT,
	@EVisitor INT,
	@StatutSortie INT,
	@SiteID VARCHAR(14)
AS
	IF @StatutSortie = 1
		UPDATE ZCL27_BADGE SET B_ASSIGNED = @ECardAssigned WHERE B_CARD_NO = @ECard AND SITEID = @SiteID

	UPDATE ZCL27_EMPLOYEE SET
		E_CARDASSIGNED = @ECardAssigned,
		E_EMPLOYEEID = @EID,
		E_LASTUPDATEDTIME = @ELastUpdatedTime,
		E_REFERENCE = @EReference,
		E_VISITOR = @EVisitor,
		STATUT_SORTIE = @StatutSortie,
		DATEMAJ = CURRENT_TIMESTAMP
		WHERE ID_EMPLOYEE = @ID
GO

/*	PROCEDURE STOCKEE : ZCL27_SORTIE */
IF OBJECT_ID('dbo.ZCL27_SORTIE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.ZCL27_SORTIE;
GO
CREATE PROCEDURE dbo.ZCL27_SORTIE
	@Id INTEGER,
	@SiteID VARCHAR(14),
	@EndDate DATETIME,
	@EndDateT DATETIME,
	@CardNumber VARCHAR(20)
AS
	DECLARE @InterlocuteurID VARCHAR(14)
	DECLARE @VisiteID VARCHAR(14)
BEGIN
	IF EXISTS (SELECT INTERLOCUTEURID FROM ZCL27_EMPLOYEE WHERE SITEID = @SiteID AND E_EMPLOYEEID = @Id)
	BEGIN
		SET @InterlocuteurID = (SELECT TOP 1 INTERLOCUTEURID FROM ZCL27_EMPLOYEE WHERE SITEID = @SiteID AND E_EMPLOYEEID = @Id)
		UPDATE VISITES SET STATUTID = 16, STATUTVISITE = 'Terminee ctrl', HFIN = @EndDateT, FINVISITE = @EndDate, DATEMAJ = CURRENT_TIMESTAMP WHERE INTERLOCUTEURID = @InterlocuteurID AND SITEID = @SiteID AND STATUTID = 8
		UPDATE ZCL27_BADGE SET B_ASSIGNED = 0 WHERE B_CARD_NO = @CardNumber AND SITEID = @SiteID
	END
END
GO

/*	PROCEDURE STOCKEE : ZCL27_SUPPEMPLOYEE */
IF OBJECT_ID('dbo.ZCL27_SUPPEMPLOYEE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.ZCL27_SUPPEMPLOYEE;
GO
CREATE PROCEDURE dbo.ZCL27_SUPPEMPLOYEE
	@InterlocuteurID VARCHAR(14),
	@SiteID VARCHAR(14),
	@CardNO VARCHAR(20)
AS
	INSERT INTO ZCL27_EMPLOYEE (SITEID, INTERLOCUTEURID, E_CARDNUMBER, E_CARDASSIGNED, E_FIRSTNAME, E_LASTNAME, E_EMPLOYEEID,
		E_STARTDATE, E_STARTDATETIME, E_ENDDATE, E_ENDDATETIME, E_WG_ID, E_LASTUPDATEDTIME, E_REFERENCE, E_VISITOR,
		STATUT_ENTREE, STATUT_SORTIE, DATECREATION, DATEMAJ)
		SELECT SITEID, INTERLOCUTEURID, E_CARDNUMBER, E_CARDASSIGNED, E_FIRSTNAME, E_LASTNAME, E_EMPLOYEEID,
			E_STARTDATE, E_STARTDATETIME, E_ENDDATE, E_ENDDATETIME, E_WG_ID, E_LASTUPDATEDTIME, E_REFERENCE, E_VISITOR,
			-1, 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
		FROM ZCL27_EMPLOYEE
		WHERE INTERLOCUTEURID = @InterlocuteurID AND SITEID = @SiteID AND E_CARDNUMBER = @CardNO AND E_EMPLOYEEID IS NOT NULL
GO
/*	PROCEDURE STOCKEE : ZCL27_PURGEEMPLOYEEI */
IF OBJECT_ID('dbo.ZCL27_PURGEEMPLOYEEI', 'P') IS NOT NULL
	DROP PROCEDURE dbo.ZCL27_PURGEEMPLOYEEI;
GO
CREATE PROCEDURE dbo.ZCL27_PURGEEMPLOYEEI
AS
	INSERT INTO ZCL27_EMPLOYEE_LOG (ID_EMPLOYEE, SITEID, INTERLOCUTEURID, E_CARDNUMBER, E_CARDASSIGNED, E_FIRSTNAME, E_LASTNAME, E_EMPLOYEEID, E_STARTDATE, E_STARTDATETIME, E_ENDDATE, E_ENDDATETIME, E_WG_ID, E_LASTUPDATEDTIME, E_REFERENCE, E_VISITOR, STATUT_ENTREE, STATUT_SORTIE, DATECREATION, DATEMAJ, DATELOG)
		SELECT ID_EMPLOYEE, SITEID, INTERLOCUTEURID, E_CARDNUMBER, E_CARDASSIGNED, E_FIRSTNAME, E_LASTNAME, E_EMPLOYEEID, E_STARTDATE, E_STARTDATETIME, E_ENDDATE, E_ENDDATETIME, E_WG_ID, E_LASTUPDATEDTIME, E_REFERENCE, E_VISITOR, STATUT_ENTREE, STATUT_SORTIE, DATECREATION, DATEMAJ, CURRENT_TIMESTAMP FROM ZCL27_EMPLOYEE WHERE STATUT_SORTIE = 1;
	DELETE FROM ZCL27_EMPLOYEE WHERE ID_EMPLOYEE IN (SELECT ID_EMPLOYEE FROM ZCL27_EMPLOYEE_LOG);
GO

/*	PROCEDURE STOCKEE : ZCL27_ENREGPARAMT */
IF OBJECT_ID('dbo.ZCL27_ENREGPARAMT', 'P') IS NOT NULL
	DROP PROCEDURE dbo.ZCL27_ENREGPARAMT;
GO
CREATE PROCEDURE dbo.ZCL27_ENREGPARAMT
	@Hliste datetime,
	@freq int,
	@Hlog datetime,
	@Hsort1 datetime,
	@Hsort2 datetime
AS
	IF EXISTS (SELECT * FROM ZCL27_PARAMETRE)
		UPDATE ZCL27_PARAMETRE
			SET H_LISTE	= @Hliste, FREQ_EMPL = @freq, H_LOG = @Hlog,
			H_SORTIE1 = @Hsort1, H_SORTIE2 = @Hsort2, DATEMAJ = CURRENT_TIMESTAMP
	ELSE
		INSERT INTO ZCL27_PARAMETRE (H_LISTE, FREQ_EMPL, H_LOG, H_SORTIE1, H_SORTIE2, DATECREATION, DATEMAJ)
			VALUES (@Hliste, @freq, @Hlog, @Hsort1, @Hsort2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
GO

/*	PROCEDURE STOCKEE : ZCL27_ENREGSITE */
IF OBJECT_ID('dbo.ZCL27_ENREGSITE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.ZCL27_ENREGSITE;
GO
CREATE PROCEDURE dbo.ZCL27_ENREGSITE
	@SiteID VARCHAR(14),
	@ServiceUrl VARCHAR(300)
AS
	IF EXISTS (SELECT * FROM ZCL27_SITE WHERE SITEID = @SiteID)
		UPDATE ZCL27_SITE SET SERVICEURL = @ServiceUrl, DATEMAJ = CURRENT_TIMESTAMP WHERE SITEID = @SiteID
	ELSE
		INSERT INTO ZCL27_SITE (SITEID, SERVICEURL, DATECREATION, DATEMAJ)
			VALUES (@SiteID, @ServiceUrl, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)

	IF @ServiceUrl = ''
		DELETE FROM ZCL27_SITE WHERE SITEID = @SiteID
GO


-----------------------------------
-- PROCEDURES STOCKEES OMNIGARDE --
-----------------------------------
IF OBJECT_ID('dbo.PS_OMNI_CORRIGE_AGENTS', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_OMNI_CORRIGE_AGENTS;
GO

CREATE PROCEDURE dbo.PS_OMNI_CORRIGE_AGENTS
AS
BEGIN
	-- Vérification des Agents et qualifications
	-- Verification des Qualifications
	INSERT INTO QPERSONNEL (PERSONNELID,QUALIFID) SELECT DISTINCT PERSONNELID,0 FROM PERSONNEL WHERE PERSONNELID NOT IN (SELECT PERSONNELID FROM QPERSONNEL)
	-- Modification des agents
	UPDATE AGENTPRESENT SET NOMPRENOM=(SELECT NOM +' '+PRENOM AS AGENT FROM PERSONNEL WHERE PERSONNELID=AGENTPRESENT.PERSONNELID)
	UPDATE AGENTPRESENT SET FONCTION=(SELECT FONCTION.LIBELLE AS FONCTION FROM PERSONNEL LEFT OUTER JOIN FONCTION ON FONCTION.CODEFONCTION=PERSONNEL.CODEFONCTION WHERE PERSONNEL.PERSONNELID=AGENTPRESENT.PERSONNELID) WHERE SURSITE = 0
	UPDATE AGENTPRESENT SET SITEID=(SELECT SITEID FROM PERSONNEL WHERE PERSONNEL.PERSONNELID=AGENTPRESENT.PERSONNELID) WHERE SITEID IS NULL
	-- Ajout des agents
	INSERT INTO AGENTPRESENT (PERSONNELID,NOMPRENOM,SURSITE,PARPRISE,FONCTION,SITEID) SELECT PERSONNELID,NOM +' '+PRENOM AS AGENT,0 AS SURSITE,0 AS PARPRISE,FONCTION.LIBELLE AS FONCTION,SITEID FROM PERSONNEL LEFT OUTER JOIN FONCTION ON FONCTION.CODEFONCTION=PERSONNEL.CODEFONCTION WHERE PERSONNELID NOT IN (SELECT PERSONNELID FROM AGENTPRESENT)
	-- Suppression des agents
	DELETE FROM AGENTPRESENT WHERE PERSONNELID NOT IN (SELECT PERSONNELID FROM PERSONNEL)
END
GO

IF OBJECT_ID('dbo.PS_REORDER_SITE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_REORDER_SITE;
GO
CREATE PROCEDURE dbo.PS_REORDER_SITE
AS
	DECLARE @siteid varchar(14)
BEGIN
	DECLARE CURSEUR CURSOR
	FOR SELECT SITEID FROM SITE WHERE (SORTORDER='' OR SORTORDER IS NULL)

	OPEN CURSEUR
	FETCH NEXT FROM CURSEUR
	INTO @siteid

	WHILE @@FETCH_STATUS = 0
	BEGIN
		UPDATE SITE SET SORTORDER=(SELECT (ISNULL(MAX(SORTORDER),0))+1 FROM SITE) WHERE SITEID=@siteid;
		FETCH NEXT FROM CURSEUR
		INTO @siteid
	END
	CLOSE CURSEUR
	DEALLOCATE CURSEUR
END
GO

-------------------------------------------
-- PROCEDURES STOCKEES TELEMAQUE ACCUEIL --
-------------------------------------------


IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='Split' AND TYPE='TF')
  DROP FUNCTION dbo.Split
GO

CREATE FUNCTION dbo.Split(@RowData nvarchar(4000),@SplitOn nvarchar(5))
RETURNS @RtnValue table
(
	Id int identity(1,1),
	Data nvarchar(100)
)
AS
BEGIN
	Declare @Cnt int
	Set @Cnt = 1

	While (Charindex(@SplitOn,@RowData)>0)
	Begin
		Insert Into @RtnValue (data)
		Select
			Data = ltrim(rtrim(Substring(@RowData,1,Charindex(@SplitOn,@RowData)-1)))

		Set @RowData = Substring(@RowData,Charindex(@SplitOn,@RowData)+1,len(@RowData))
		Set @Cnt = @Cnt + 1
	End

	Insert Into @RtnValue (data)
	Select Data = ltrim(rtrim(@RowData))

	Return
END
GO


IF EXISTS (SELECT NAME FROM SYSOBJECTS WHERE NAME='IsVisiteurRestreint' AND TYPE='FN')
  DROP FUNCTION IsVisiteurRestreint;
GO
CREATE FUNCTION dbo.IsVisiteurRestreint
(
    @IntelocuteurID VARCHAR(14)
)
RETURNS VARCHAR(64)
AS
BEGIN
    DECLARE @NatureID VARCHAR(14)
    DECLARE @PaysID VARCHAR(14)
    DECLARE @SocieteID VARCHAR(14)

    DECLARE @IdNature VARCHAR(14)
    DECLARE @IdPays VARCHAR(14)
    DECLARE @IdSociete VARCHAR(14)
    DECLARE @Retour varchar(50)
    set @Retour ='0'
	IF NOT EXISTS(SELECT INTERLOCUTEURID FROM INTERLOCUTEUR WHERE INTERDIT='2' AND INTERLOCUTEURID=@IntelocuteurID) BEGIN
		Set @NatureID=(SELECT top 1 NATUREID FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@IntelocuteurID)
		Set @PaysID=(SELECT top 1 NATIONALITEID FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@IntelocuteurID)
		Set @SocieteID=(SELECT top 1 SOCIETEID FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@IntelocuteurID)
		IF  NOT EXISTS (SELECT TOP 1 NATUREID FROM NATURE WHERE INTERDIT='2' AND NATUREID=@NatureID) BEGIN
			IF  NOT EXISTS (SELECT TOP 1 PAYSID FROM PAYS WHERE INTERDIT='2' AND PAYSID=@PAYSID) BEGIN
				IF  NOT EXISTS (SELECT TOP 1 SOCIETEID FROM SOCIETE WHERE INTERDIT='2' AND SOCIETEID=@SOCIETEID) BEGIN
					set @Retour ='1'
 				END
				ELSE set @Retour ='-4'
			END
			ELSE set @Retour ='-3'
		END
		ELSE set @Retour ='-2'
	END
	ELSE set @Retour ='-1'

    RETURN @Retour
END
GO
IF EXISTS (SELECT NAME FROM SYSOBJECTS WHERE NAME='IsVisiteurInterdit' AND TYPE='FN')
  DROP FUNCTION IsVisiteurInterdit;
GO
CREATE FUNCTION dbo.IsVisiteurInterdit
(
    @IntelocuteurID VARCHAR(14),
    @dt datetime

)
RETURNS VARCHAR(64)
AS
BEGIN
    DECLARE @NatureID VARCHAR(14)
    DECLARE @PaysID VARCHAR(14)
    DECLARE @SocieteID VARCHAR(14)
    DECLARE @IdInter VARCHAR(14)
    DECLARE @IdNature VARCHAR(14)
    DECLARE @IdPays VARCHAR(14)
    DECLARE @IdSociete VARCHAR(14)
    DECLARE @Retour varchar(50)

    set @Retour ='0'
	Set @IdInter=(SELECT INTERLOCUTEURID FROM INTERLOCUTEUR WHERE ((INTERDIT=0 AND (@dt BETWEEN DEBUTINTERDIT AND FININTERDIT)) OR INTERDIT='2') AND INTERLOCUTEURID=@IntelocuteurID)
	IF @IdInter<>'' BEGIN
		Set @NatureID=(SELECT top 1 NATUREID FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@IntelocuteurID)
		Set @PaysID=(SELECT top 1 NATIONALITEID FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@IntelocuteurID)
		Set @SocieteID=(SELECT top 1 SOCIETEID FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@IntelocuteurID)
		Set @IdNature=(SELECT NATUREID FROM NATURE WHERE ((INTERDIT=0 AND (@dt BETWEEN DEBUTINTERDIT AND FININTERDIT)) OR INTERDIT='2') AND NATUREID=@NatureID)
		IF  @IdNature <> '' BEGIN
			Set @PaysID=(SELECT PAYSID FROM PAYS WHERE ((INTERDIT=0 AND (@dt BETWEEN DEBUTINTERDIT AND FININTERDIT)) OR INTERDIT='2') AND PAYSID=@PAYSID)
			IF  @PaysID <> '' BEGIN
				Set @SocieteID=(SELECT SOCIETEID FROM SOCIETE WHERE ((INTERDIT=0 AND (@dt BETWEEN DEBUTINTERDIT AND FININTERDIT)) OR INTERDIT='2') AND SOCIETEID=@SOCIETEID)
				IF  @SocieteID <> ''
					set @Retour ='1'
 				ELSE set @Retour ='-4'
			END
			ELSE set @Retour ='-3'
		END
		ELSE set @Retour ='-2'
	END
	ELSE set @Retour ='-1'

    RETURN @Retour
END
GO

-----------------------------------
-- PROCEDURES STOCKEES TELEMAQUE --
-----------------------------------

IF OBJECT_ID('dbo.SORTIE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.SORTIE;
GO
CREATE PROCEDURE dbo.SORTIE
	@VISITEID VARCHAR(14),
	@FINVISITE DATETIME
AS
	DECLARE @STATUTID VARCHAR(14)
BEGIN
	SET @STATUTID = (SELECT TOP 1 STATUTID FROM VISITES WHERE VISITEID = @VISITEID)
	IF @STATUTID = 1 OR @STATUTID = 8 BEGIN
		SET @STATUTID = 16
	END
	IF @STATUTID = 33 OR @STATUTID = 34 BEGIN
		SET @STATUTID = 35
	END
	UPDATE VISITES
		SET STATUTID = @STATUTID, STATUTVISITE = 'Terminée TelemAccess', FINVISITE = CONVERT(DATETIME,@FINVISITE,103), HFIN = CONVERT(DATETIME,@FINVISITE,103), DATEMAJ = CURRENT_TIMESTAMP
		WHERE VISITEID = @VISITEID
END
GO

IF OBJECT_ID('dbo.PURGE_DELETE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PURGE_DELETE;
GO
CREATE PROCEDURE dbo.PURGE_DELETE
AS
BEGIN
 DELETE VISITES WHERE STATUTID IN (-2,-1) AND FINPREVU<=GETDATE()-400
END
GO

IF OBJECT_ID('dbo.PURGE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PURGE;
GO
CREATE PROCEDURE dbo.PURGE
	@SITEID VARCHAR(14),
	@FINVISITE DATETIME
AS
BEGIN
    UPDATE VISITES SET STATUTID=-2,STATUTVISITE='AUTO-DELETE',DATEMAJ=GETDATE() WHERE SITEID = @SITEID AND STATUTID IN (2, 4, 32 ) AND FINPREVU<GETDATE() AND ORIGINEVISITE NOT IN (SELECT DISTINCT ORIGINEVISITE FROM VISITES WHERE (STATUTID=16 OR STATUTID=8) AND ORIGINEVISITE IS NOT NULL)
    UPDATE VISITES SET STATUTID=-1,STATUTVISITE='AUTO-DELETE',DATEMAJ=GETDATE() WHERE SITEID = @SITEID AND STATUTID IN (2, 4, 32 ) AND FINPREVU<GETDATE()
END
GO

IF OBJECT_ID('dbo.DERN_ACTION_SITE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.DERN_ACTION_SITE;
GO
CREATE PROCEDURE dbo.DERN_ACTION_SITE
	@SITEID VARCHAR(14)
AS
BEGIN
	UPDATE SITE SET TLMQ_DERN_EXEC = CURRENT_TIMESTAMP WHERE SITEID = @SITEID
END
GO

-----------------------------------
-- PROCEDURES STOCKEES GESROOM   --
-----------------------------------

IF OBJECT_ID('dbo.PS_MAJ_LGRESA', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_MAJ_LGRESA;
GO
CREATE PROCEDURE [dbo].[PS_MAJ_LGRESA]

    @codelgreservation VARCHAR(14),
    @porte_code VARCHAR(50)
AS

BEGIN
	IF EXISTS (SELECT * FROM LGRESERVATION WHERE CODELGRESERVATION = @codelgreservation) BEGIN

        UPDATE LGRESERVATION SET PORTE_CODE=@porte_code WHERE CODELGRESERVATION = @codelgreservation
		RETURN @@ROWCOUNT
	END ELSE BEGIN
      RETURN -1
    END
END
GO

IF OBJECT_ID('dbo.PS_INSERT_IN_MAIL', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_INSERT_IN_MAIL;
GO
CREATE PROCEDURE [dbo].[PS_INSERT_IN_MAIL]
 @MAILID VARCHAR(14),
 @codelgreservation VARCHAR(14),
 @PORTE_CODE VARCHAR(50),
 @NOM_SALLE VARCHAR(14),
 @SUJET_MAIL VARCHAR(120),
 @BODY_MAIL VARCHAR(4000)
AS
DECLARE @SITEID_TARGET varchar(14)
SET @SITEID_TARGET=NULL

DECLARE @SITE_TARGET varchar(35)
SET @SITE_TARGET=NULL

DECLARE @TOADDRESS_TARGET varchar(1000)

BEGIN
 IF EXISTS (SELECT SITEID FROM USERS WHERE  USERID IN (SELECT USERID FROM RESERVATION WHERE CODERESERVATION IN (SELECT CODERESERVATION FROM LGRESERVATION WHERE CODELGRESERVATION=@codelgreservation)))
 BEGIN
  SET @SITEID_TARGET=(SELECT SITEID FROM USERS WHERE  USERID IN (SELECT USERID FROM RESERVATION WHERE CODERESERVATION IN (SELECT CODERESERVATION FROM LGRESERVATION WHERE CODELGRESERVATION=@codelgreservation)))
  SET @SITE_TARGET=(SELECT SITE FROM USERS WHERE  USERID IN (SELECT USERID FROM RESERVATION WHERE CODERESERVATION IN (SELECT CODERESERVATION FROM LGRESERVATION WHERE CODELGRESERVATION=@codelgreservation)))
 END
IF EXISTS (SELECT EMAIL FROM RESIDANTS WHERE RESIDANTID IN (SELECT CODEANIMATEUR FROM RESERVATION WHERE CODERESERVATION IN (SELECT CODERESERVATION FROM LGRESERVATION WHERE CODELGRESERVATION=@codelgreservation)))
  BEGIN
    SET @TOADDRESS_TARGET=(SELECT EMAIL FROM RESIDANTS WHERE RESIDANTID IN (SELECT CODEANIMATEUR FROM RESERVATION WHERE CODERESERVATION IN (SELECT CODERESERVATION FROM LGRESERVATION WHERE CODELGRESERVATION=@codelgreservation)) )
    INSERT INTO MAIL (MAILID,SITE,SITEID,USERID,TOADDRESS,SUJET,BODY,STATUT,DATECREATION,DATEMAJ) VALUES (@MAILID,@SITE_TARGET,@SITEID_TARGET,'-1',@TOADDRESS_TARGET,@SUJET_MAIL,@BODY_MAIL,'-1',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP)
    RETURN @@ROWCOUNT
  END
 ELSE BEGIN
  RETURN -1
 END
END
GO

-----------------------------------
-- PROCEDURES STOCKEES ZCL35     --
-----------------------------------

IF OBJECT_ID('dbo.PS_ZCL35_EMP_ASSOCIATION', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ZCL35_EMP_ASSOCIATION;
GO

CREATE PROCEDURE dbo.PS_ZCL35_EMP_ASSOCIATION

	@emp IMAGE,
	@idproprietaire VARCHAR(14),
	@tableproprietaire VARCHAR(20)

AS
	DECLARE @idemp INT
	DECLARE @flag VARCHAR(14)
	DECLARE @identity VARCHAR(14)
	DECLARE @ID VARCHAR(14)
	DECLARE @idtableproprietaire INT
	--DECLARE @idproprietaire VARCHAR(14)
BEGIN
	-- On calcul la plus petite clef possible
	SET @idemp = (SELECT MAX(OFICHIERID) FROM OFICHIER)
	SET @idemp = @idemp + 1
	-- On insère l'emp dans la table OFICHIER
	INSERT INTO OFICHIER(OFICHIERID,LIBELLE,DOCUMENT,TYPEFILE,CONTENTTYPE,DATASIZE,DATECREATION,DATEMAJ)
		VALUES (@idemp,'empreinte.tpl',@emp,-3,'empreinte/tpl',800,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP)

	SET @idproprietaire = UPPER(@idproprietaire)
	SET @tableproprietaire = UPPER(@tableproprietaire)

	-- On vérifie que la fiche propriétaire existe
	if(@tableproprietaire = 'INTERLOCUTEUR')BEGIN

		SET @idproprietaire = (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR WHERE INTERLOCUTEURID = @idproprietaire)
	END
	ELSE BEGIN
		IF(@tableproprietaire = 'PERSONNEL')BEGIN

			SET @idproprietaire = (SELECT CAST(PERSONNELID AS VARCHAR(14)) FROM PERSONNEL WHERE PERSONNELID = CONVERT(INT,@idproprietaire))
		END
		ELSE BEGIN
			SET @idproprietaire = ''
		END
	END
	if (@idproprietaire is not null AND @idproprietaire != '') BEGIN

		-- On insère l'association

		INSERT INTO SEQ_IDENTITY(libelle) VALUES ('OK')
		SET @identity = (SELECT @@IDENTITY AS ID)
		SET @flag = (SELECT SUBSTRING(version, 1, 3) FROM version_sfw)
		SET @ID = @flag + @identity



		INSERT INTO XANNEXE(XANNEXEID,XANNEXE_TYPEID,OFICHIERID, ORIGINEID, ORIGINE, datecreation, datemaj)
			VALUES (@ID,-3,@idemp, @idproprietaire,@tableproprietaire , CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	END


END

go

IF OBJECT_ID('dbo.PS_ZCL35_EMP_INSERTION', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ZCL35_EMP_INSERTION;
GO

--Cette procédure doit etre apelé avant l'envoi aux Bioveins afin de garder une trace des modification de la mémoire des bioveins.
CREATE PROCEDURE dbo.PS_ZCL35_EMP_INSERTION

	@idmembio INT,
	--@idbiovein VARCHAR(15),
	@numdoigt INT,
	@nom VARCHAR(35),
	@prenom VARCHAR(35),
	@idinterlocuteur VARCHAR(15)

AS
	DECLARE @idemp INT
	DECLARE @flag VARCHAR(14)
	DECLARE @identity VARCHAR(14)
	DECLARE @ID VARCHAR(14)
BEGIN

	--on regarde si la ligne existe dans la table ZCL35_Dump
	IF NOT EXISTS (SELECT * FROM ZCL35_DUMP WHERE DUMPID = @idmembio) BEGIN --si elle n'existe pas on la crer
		INSERT INTO ZCL35_DUMP(DUMPID,NUMDOIGT,NOM,PRENOM,INTERLOCUTEURID,STATUT,DATEMAJ,DATECREATION)
			VALUES (@idmembio,@numdoigt,@nom,@prenom,@idinterlocuteur,1,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP)
	END ELSE BEGIN --Sinon on la met à jour
			UPDATE ZCL35_DUMP
			SET NUMDOIGT = @numdoigt, NOM = @nom, PRENOM = @prenom, INTERLOCUTEURID = @idinterlocuteur, STATUT = 1, DATEMAJ = CURRENT_TIMESTAMP
			WHERE DUMPID = @idmembio
			END
END
GO


IF OBJECT_ID('dbo.PS_ZCL35_EMP_INSERTION_ID_BIO', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ZCL35_EMP_INSERTION_ID_BIO;
GO

CREATE PROCEDURE dbo.PS_ZCL35_EMP_INSERTION_ID_BIO
		@ID INT output
AS

BEGIN

	IF NOT EXISTS (SELECT * FROM ZCL35_DUMP WHERE STATUT = 0) BEGIN
		SET @ID = (SELECT MAX(DUMPID) FROM ZCL35_DUMP)
		if(@ID IS NULL) BEGIN
			SET @ID = 0
		END
		SET @ID = @ID + 1
		INSERT INTO ZCL35_DUMP(DUMPID,NUMDOIGT,DATEMAJ,DATECREATION,STATUT)
			VALUES (@ID,5,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,0)
	END ELSE BEGIN
		SET @ID = (select min(DUMPID) FROM ZCL35_DUMP WHERE STATUT = 0)
	END
END
go

IF OBJECT_ID('dbo.PS_ZCL35_SUPPRESSION_EMP', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ZCL35_SUPPRESSION_EMP;
GO

--Cette fonction permet la suppression des EMPs, elle supprime les emp de l'interlocuteur passé en paramètre et retourn la liste des emp à sup des les bioveins
CREATE PROCEDURE dbo.PS_ZCL35_SUPPRESSION_EMP

	@idinterlocuteur varchar(14),
	@listeidbio varchar(max) OUTPUT
AS
	--DECLARE @flag VARCHAR(14)
	--DECLARE @identity VARCHAR(14)
	--DECLARE @ID VARCHAR(14)
	DECLARE @idbio int
	DECLARE @dumpid int
	DECLARE moncurs CURSOR
	FOR
		SELECT DUMPID
		FROM ZCL35_DUMP
		WHERE INTERLOCUTEURID = @idinterlocuteur
BEGIN
	if EXISTS(SELECT * FROM ZCL35_DUMP WHERE INTERLOCUTEURID = @idinterlocuteur) BEGIN
		-- ouverture du curseur
		OPEN moncurs

		-- lecture du premier enregistrement
		FETCH moncurs INTO @idbio

		-- boucle de traitement
		WHILE @@fetch_Status = 0
		BEGIN
			SET @listeidbio = @listeidbio + CAST(@idbio as varchar(4)) + ';'
			FETCH moncurs INTO @idbio
		END
		CLOSE moncurs
		DEALLOCATE moncurs
		DELETE FROM ZCL35_DUMP WHERE INTERLOCUTEURID = @idinterlocuteur
	END
END
GO

-----------------------------------------------------------------------------------------------
-------------------PROCEDURES ET FONCTION POUR MOTEUR DE REGLES--------------------------------
IF OBJECT_ID('dbo.GET_ACTION', 'FN') IS NOT NULL
	DROP FUNCTION dbo.GET_ACTION;
GO
CREATE  FUNCTION dbo.GET_ACTION(@MYSTATUTVISITE INT) RETURNS VARCHAR(50)
AS
BEGIN
    DECLARE @LOCACTION VARCHAR(50)
	SET @LOCACTION=-5
    SET @LOCACTION= CASE
		WHEN @MYSTATUTVISITE='WEB INTERDIT' THEN -2
		WHEN @MYSTATUTVISITE='WEB EN ATTENTE' THEN  -3
		WHEN @MYSTATUTVISITE='WEB ACCOMPAGNER' THEN  -4
		WHEN @MYSTATUTVISITE='WEB OK'THEN   -5
		ELSE  -5
	END
	RETURN  @LOCACTION;
END
GO

IF OBJECT_ID('dbo.GET_STATUTVISITE', 'FN') IS NOT NULL
	DROP FUNCTION dbo.GET_STATUTVISITE;
GO
CREATE  FUNCTION dbo.GET_STATUTVISITE(@MYACTION INT) RETURNS VARCHAR(50)
AS
BEGIN
    DECLARE @LOCSTATUTVISITE VARCHAR(50)
	SET @LOCSTATUTVISITE=''
    SET @LOCSTATUTVISITE= CASE
		WHEN @MYACTION=-2 THEN 'WEB INTERDIT'
		WHEN @MYACTION=-3 THEN 'WEB EN ATTENTE'
		WHEN @MYACTION=-4 THEN 'WEB ACCOMPAGNER'
		WHEN @MYACTION=-5 THEN 'WEB OK'
		ELSE 'WEB OK'
	END
	RETURN  @LOCSTATUTVISITE;
END
GO

IF OBJECT_ID('dbo.GET_REGION_PAYS', 'FN') IS NOT NULL
	DROP FUNCTION dbo.GET_REGION_PAYS;
GO
CREATE FUNCTION dbo.GET_REGION_PAYS(@MYVISITEID VARCHAR(14)) RETURNS INT
AS
BEGIN
	DECLARE  @UE_HORS_UE INT
	DECLARE  @MYNATION VARCHAR(35);
	SET @MYNATION =(SELECT LIBELLEUS FROM PAYS WHERE PAYSID IN (SELECT I.NATIONALITEID FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=@MYVISITEID))
	SET @UE_HORS_UE=(SELECT TREF.VALEUR FROM TABLEREFERENCE TREF WHERE TREF.ID=102 AND TREF.TEXTE=@MYNATION)
	RETURN  ISNULL(@UE_HORS_UE,1)
END
GO

IF OBJECT_ID('dbo.DETECT_AW_VALIDE', 'FN') IS NOT NULL
	DROP FUNCTION dbo.DETECT_AW_VALIDE;
GO
CREATE  FUNCTION dbo.DETECT_AW_VALIDE(@MYVISITEID  VARCHAR(14)) RETURNS INT
AS
BEGIN
	DECLARE @MYDEBUT DATETIME
	DECLARE @MYFIN DATETIME
	DECLARE @DATEDUJOUR DATETIME
	DECLARE @MYINTERID VARCHAR(14)
	DECLARE @MYSOCID VARCHAR(14)
	DECLARE @TMP INT
	DECLARE @C_OK INT

	SET @MYDEBUT=(SELECT  CONVERT(DATETIME,CONVERT(VARCHAR(10),DEBUTPREVU,103),103)  FROM VISITES  WHERE VISITEID=@MYVISITEID)
	SET @MYFIN=(SELECT  CONVERT(DATETIME,CONVERT(VARCHAR(10),FINPREVU,103),103) FROM VISITES  WHERE VISITEID=@MYVISITEID)
	SET @MYINTERID=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=@MYVISITEID)
	SET @MYSOCID=(SELECT SOCIETEID FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=@MYVISITEID))
	SET @C_OK=1
	SET @DATEDUJOUR=CONVERT(DATETIME,@MYDEBUT,103)
	WHILE (1=1) BEGIN
		IF (CONVERT(DATETIME,@DATEDUJOUR,103)>CONVERT(DATETIME,@MYFIN,103) OR @C_OK=0)
		BEGIN
			BREAK
		END
		SET @TMP =(SELECT COUNT(*) FROM (SELECT X.XANNEXEID   FROM XANNEXE X WHERE X.XANNEXE_TYPEID=-1 AND  X.ORIGINE='VISITES' AND X.ORIGINEID=@MYVISITEID AND X.INFORMATION_TYPEID=-2  AND CONVERT(DATETIME,CONVERT(VARCHAR(10),@DATEDUJOUR,103),103)<=CONVERT(DATETIME,CONVERT(VARCHAR(10),X.DATEFIN,103),103) AND CONVERT(DATETIME,CONVERT(VARCHAR(10),@DATEDUJOUR,103),103)>=CONVERT(DATETIME,CONVERT(VARCHAR(10),X.FREEDATE01,103),103) AND (ISNULL(X.ETAT,1) = 1) AND X.REFID IN (SELECT XX.XANNEXEID FROM XANNEXE XX WHERE XX.ORIGINE='SOCIETE' AND XX.ORIGINEID=@MYSOCID)
			UNION SELECT X.XANNEXEID   FROM XANNEXE X WHERE X.XANNEXE_TYPEID=-1 AND  X.ORIGINE='VISITES' AND X.ORIGINEID=@MYVISITEID AND X.INFORMATION_TYPEID=-2  AND CONVERT(DATETIME,CONVERT(VARCHAR(10),@DATEDUJOUR,103),103)<=CONVERT(DATETIME,CONVERT(VARCHAR(10),X.DATEFIN,103),103) AND CONVERT(DATETIME,CONVERT(VARCHAR(10),@DATEDUJOUR,103),103)>=CONVERT(DATETIME,CONVERT(VARCHAR(10),X.FREEDATE01,103),103)  AND (ISNULL(X.ETAT,1) = 1) AND X.REFID IN (SELECT XX.XANNEXEID FROM XANNEXE XX WHERE XX.ORIGINE='INTERLOCUTEUR' AND XX.ORIGINEID=@MYINTERID ) ) AS A)
		IF (@TMP =0) BEGIN
			SET @C_OK=0;
		END
		SET @DATEDUJOUR=@DATEDUJOUR+1
	END
	RETURN  @C_OK
END

GO

 IF OBJECT_ID('dbo.F_REGLE_LIMITE_DATE', 'FN') IS NOT NULL
DROP FUNCTION [dbo].[F_REGLE_LIMITE_DATE]
GO

CREATE FUNCTION dbo.F_REGLE_LIMITE_DATE(@DATE1 DATETIME,@DATE2 DATETIME, @FLAG INTEGER) RETURNS DATETIME
AS
BEGIN
DECLARE @DATE_LIMIT DATETIME
	IF @FLAG=0 BEGIN
		IF @DATE1<=@DATE2 BEGIN
			SET @DATE_LIMIT=@DATE1
		END
		ELSE BEGIN
			SET @DATE_LIMIT=@DATE2
		END
	END
	ELSE
		IF @DATE1<=@DATE2 BEGIN
			SET @DATE_LIMIT=@DATE2
		END
		ELSE
			SET @DATE_LIMIT=@DATE1
	RETURN @DATE_LIMIT
END
GO

IF OBJECT_ID('dbo.PS_REGLE_SOUMETTRE_ENQUETE', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[PS_REGLE_SOUMETTRE_ENQUETE]
GO
  CREATE PROCEDURE [dbo].[PS_REGLE_SOUMETTRE_ENQUETE]
	@MYREGLEID INT,
	@MYVISITEID VARCHAR(14),
	@FORCE INT
AS
	DECLARE @MYDATECREA DATETIME;
	DECLARE @MYDATEDEBUT DATETIME;
 	DECLARE @MYDELAI INT;
 	DECLARE @TMPCOUNT INT;
 	DECLARE @MYNATIONALITE VARCHAR(14);
	DECLARE @REF_DELAI INT;
	DECLARE @ETAT_ENQUETE INT;
 	DECLARE @MYSITEID VARCHAR(14);
	DECLARE @MYINTERLOCUTEURID VARCHAR(14);
	DECLARE @DATEFIN_FICHE  DATETIME;
	DECLARE @MYDEBUTPREVU  DATETIME;
	DECLARE @MYFINPREVU DATETIME;
	DECLARE @MYTYPEVISITE VARCHAR(50);
	DECLARE @DATESAISIE DATETIME;
	DECLARE @MYNATUREVISITE VARCHAR(50);
	DECLARE @CENTRE VARCHAR(35);
	DECLARE @MYPOLE VARCHAR(100)
BEGIN

		SET @MYDEBUTPREVU=(SELECT CONVERT(DATETIME,V.DEBUTPREVU,103) FROM VISITES V WHERE V.VISITEID=@MYVISITEID)
		SET @MYFINPREVU=(SELECT CONVERT(DATETIME,V.FINPREVU,103) FROM VISITES V WHERE V.VISITEID=@MYVISITEID)
		SET @MYTYPEVISITE =( SELECT TYPEVISITE FROM TYPEVISITE TV WHERE TV.TYPEVISITEID=(SELECT V.TYPEVISITEID FROM VISITES V WHERE V.VISITEID=@MYVISITEID))
		SET @DATESAISIE = (SELECT CONVERT(DATETIME,V.DATEMAJ,103) FROM VISITES V WHERE V.VISITEID=@MYVISITEID)
		SET @MYPOLE = (SELECT S.NOM FROM VISITES V,RESIDANTS R,SOCIETE S WHERE V.RESIDANTID=R.RESIDANTID AND R.SOCIETEID=S.SOCIETEID AND V.VISITEID=@MYVISITEID )
		SET @MYDATECREA =(SELECT CONVERT(DATETIME,I.DATECREATION,103) FROM INTERLOCUTEUR I, VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=@MYVISITEID)
		SET @MYNATUREVISITE =(SELECT ISNULL(NATUREVISITE,'-2') FROM VISITES WHERE VISITEID=@MYVISITEID)
		SET @MYINTERLOCUTEURID=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=@MYVISITEID)
		SET @MYSITEID=(SELECT SITEID  FROM VISITES WHERE VISITEID=@MYVISITEID)
		SET @CENTRE=(SELECT LIBELLE FROM SITE WHERE SITEID=@MYSITEID)
		SET @MYDATEDEBUT =(SELECT CONVERT(DATETIME,V.DEBUTPREVU,103)   FROM VISITES V WHERE V.VISITEID=@MYVISITEID )
		SET @MYDELAI=(SELECT CONVERT(INT,ISNULL(FREE2,'0')) FROM REGLES WHERE REGLEID=@MYREGLEID)
		SET @REF_DELAI =(SELECT CONVERT(INT,ISNULL(FREE3,'0')) FROM REGLES WHERE REGLEID=@MYREGLEID)
		IF @REF_DELAI=1 BEGIN
			SET @DATEFIN_FICHE=(SELECT FININTERDIT FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID )
		END
		IF EXISTS (SELECT ENQUETE FROM VALIDATION_ENQUETE WHERE EXTERNALID=@MYINTERLOCUTEURID AND EXTERN_TYPE='INTERLOCUTEUR'  AND TYPEVISITE=@MYNATUREVISITE AND ENQUETE='0')
		BEGIN
		  DELETE FROM VALIDATION_ENQUETE WHERE  EXTERNALID=@MYINTERLOCUTEURID AND EXTERN_TYPE='INTERLOCUTEUR' AND TYPEVISITE=@MYNATUREVISITE AND ENQUETE='0'
		  INSERT INTO VALIDATION_ENQUETE (SITEID,EXTERNALID,EXTERN_TYPE,CIVILITE,NOM,PRENOM,NOMJEUNEFILLE,DATENAISSANCE,LIEUNAISSANCE,PAYSNAISSANCE, NATIONALITE, ADRESSE,VILLE,CP,FONCTION,SOCIETE,DATECREATION,CENTRE,VISITEID,CODEACTIVITE,TYPEVISITE,DEBUTPREVU,FINPREVU,DATESAISIE,POLE) SELECT @MYSITEID,@MYINTERLOCUTEURID,'INTERLOCUTEUR',CIVILITE,NOM,PRENOM,NOMJEUNEFILLE,DATENAISSANCE,LIEUNAISSANCE,PAYS_NAISSANCE,PAYS,ADRESSE,VILLE,CODEPOSTAL,FONCTION,SOCIETE,CURRENT_TIMESTAMP,@CENTRE,@MYVISITEID,@MYTYPEVISITE,@MYNATUREVISITE,@MYDEBUTPREVU,@MYFINPREVU,@DATESAISIE,@MYPOLE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID;
		END
		IF @FORCE=0 BEGIN
		SET @MYNATIONALITE=(SELECT I.NATIONALITEID FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=@MYVISITEID)
		SET @TMPCOUNT= (SELECT COUNT(*) FROM REGLES TREG, VISITES V WHERE V.VISITEID=@MYVISITEID AND TREG.REGLEID=@MYREGLEID  AND (TREG.TYPEVISITE=-2 OR TREG.TYPEVISITE=(SELECT TYPEVISITEID FROM VISITES WHERE VISITEID=@MYVISITEID)) AND ( ((TREG.FREE1=CONVERT(VARCHAR(14),dbo.GET_REGION_PAYS(@MYVISITEID) )  OR TREG.FREE1='2') AND @MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=@MYNATIONALITE)
		AND (ISNULL(TREG.NATUREVISITE,'-2')='-2' OR ISNULL(TREG.NATUREVISITE,'-2')=(SELECT CASE WHEN ISNULL(@MYNATUREVISITE,'-2')='VISITE' THEN '0' ELSE '1' END) ))
		 IF @TMPCOUNT>0 BEGIN
			SET @TMPCOUNT=(SELECT COUNT(*) FROM VALIDATION_ENQUETE WHERE EXTERNALID=@MYINTERLOCUTEURID AND EXTERN_TYPE='INTERLOCUTEUR' AND TYPEVISITE=@MYNATUREVISITE)
			IF @TMPCOUNT=0 BEGIN -- SI PAS ENQUETE ALORS INSERER ENQUETE
				INSERT INTO VALIDATION_ENQUETE (SITEID,EXTERNALID,EXTERN_TYPE,CIVILITE,NOM,PRENOM,NOMJEUNEFILLE,DATENAISSANCE,LIEUNAISSANCE,PAYSNAISSANCE, NATIONALITE, ADRESSE,VILLE,CP,FONCTION,SOCIETE,DATECREATION,CENTRE,VISITEID,CODEACTIVITE,TYPEVISITE,DEBUTPREVU,FINPREVU,DATESAISIE,POLE) SELECT @MYSITEID,@MYINTERLOCUTEURID,'INTERLOCUTEUR',CIVILITE,NOM,PRENOM,NOMJEUNEFILLE,DATENAISSANCE,LIEUNAISSANCE,PAYS_NAISSANCE,PAYS,ADRESSE,VILLE,CODEPOSTAL,FONCTION,SOCIETE,CURRENT_TIMESTAMP,@CENTRE,@MYVISITEID,@MYTYPEVISITE,@MYNATUREVISITE,@MYDEBUTPREVU,@MYFINPREVU,@DATESAISIE,@MYPOLE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID;
			END ELSE
				IF EXISTS (SELECT ENQUETE FROM VALIDATION_ENQUETE WHERE EXTERNALID=@MYINTERLOCUTEURID AND EXTERN_TYPE='INTERLOCUTEUR'  AND TYPEVISITE=@MYNATUREVISITE AND ((@REF_DELAI=0 AND DATECREATION+@MYDELAI<=CURRENT_TIMESTAMP) OR (@REF_DELAI=1 AND @DATEFIN_FICHE<=CURRENT_TIMESTAMP)))
				BEGIN
					 IF EXISTS (SELECT TOP(1) ENQUETE FROM VALIDATION_ENQUETE WHERE  EXTERNALID=@MYINTERLOCUTEURID AND EXTERN_TYPE='INTERLOCUTEUR' AND TYPEVISITE=@MYNATUREVISITE AND ((@REF_DELAI=0 AND DATECREATION+ @MYDELAI<=CURRENT_TIMESTAMP) OR (@REF_DELAI=1 AND @DATEFIN_FICHE<=CURRENT_TIMESTAMP)) ORDER BY DATECREATION DESC)
					 BEGIN 	-- SI FIN VALIDITE ENQUETE
						SET @ETAT_ENQUETE =(SELECT TOP(1) ENQUETE FROM VALIDATION_ENQUETE WHERE  EXTERNALID=@MYINTERLOCUTEURID AND EXTERN_TYPE='INTERLOCUTEUR' AND TYPEVISITE=@MYNATUREVISITE AND ((@REF_DELAI=0 AND DATECREATION+ @MYDELAI<=CURRENT_TIMESTAMP) OR (@REF_DELAI=1 AND @DATEFIN_FICHE<=CURRENT_TIMESTAMP)) ORDER BY DATECREATION DESC)
						IF @ETAT_ENQUETE=1 OR @ETAT_ENQUETE=0 BEGIN
							DELETE FROM VALIDATION_ENQUETE WHERE  EXTERNALID=@MYINTERLOCUTEURID AND EXTERN_TYPE='INTERLOCUTEUR' AND TYPEVISITE=@MYNATUREVISITE AND ((@REF_DELAI=0 AND DATECREATION+@MYDELAI<=CURRENT_TIMESTAMP) OR (@REF_DELAI=1 AND @DATEFIN_FICHE<=CURRENT_TIMESTAMP));
							INSERT INTO VALIDATION_ENQUETE (SITEID,EXTERNALID,EXTERN_TYPE,CIVILITE,NOM,PRENOM,NOMJEUNEFILLE,DATENAISSANCE,LIEUNAISSANCE,PAYSNAISSANCE, NATIONALITE, ADRESSE,VILLE,CP,FONCTION,SOCIETE,DATECREATION,CENTRE,VISITEID,CODEACTIVITE,TYPEVISITE,DEBUTPREVU,FINPREVU,DATESAISIE,POLE) SELECT @MYSITEID,@MYINTERLOCUTEURID,'INTERLOCUTEUR',CIVILITE,NOM,PRENOM,NOMJEUNEFILLE,DATENAISSANCE,LIEUNAISSANCE,PAYS_NAISSANCE,PAYS,ADRESSE,VILLE,CODEPOSTAL,FONCTION,SOCIETE,CURRENT_TIMESTAMP,@CENTRE,@MYVISITEID,@MYTYPEVISITE,@MYNATUREVISITE,@MYDEBUTPREVU,@MYFINPREVU,@DATESAISIE,@MYPOLE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID;
						END
					END
				END
				ELSE -- SI MODIF AVANT DEPART ENQUETE
					IF EXISTS (SELECT ENQUETE FROM VALIDATION_ENQUETE WHERE EXTERNALID=@MYINTERLOCUTEURID AND EXTERN_TYPE='INTERLOCUTEUR'  AND TYPEVISITE=@MYNATUREVISITE AND ENQUETE='0')
					BEGIN
						DELETE FROM VALIDATION_ENQUETE WHERE  EXTERNALID=@MYINTERLOCUTEURID AND EXTERN_TYPE='INTERLOCUTEUR' AND TYPEVISITE=@MYNATUREVISITE AND ENQUETE='0'
						INSERT INTO VALIDATION_ENQUETE (SITEID,EXTERNALID,EXTERN_TYPE,CIVILITE,NOM,PRENOM,NOMJEUNEFILLE,DATENAISSANCE,LIEUNAISSANCE,PAYSNAISSANCE, NATIONALITE, ADRESSE,VILLE,CP,FONCTION,SOCIETE,DATECREATION,CENTRE,VISITEID,CODEACTIVITE,TYPEVISITE,DEBUTPREVU,FINPREVU,DATESAISIE,POLE) SELECT @MYSITEID,@MYINTERLOCUTEURID,'INTERLOCUTEUR',CIVILITE,NOM,PRENOM,NOMJEUNEFILLE,DATENAISSANCE,LIEUNAISSANCE,PAYS_NAISSANCE,PAYS,ADRESSE,VILLE,CODEPOSTAL,FONCTION,SOCIETE,CURRENT_TIMESTAMP,@CENTRE,@MYVISITEID,@MYTYPEVISITE,@MYNATUREVISITE,@MYDEBUTPREVU,@MYFINPREVU,@DATESAISIE,@MYPOLE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID;
					END

		END
 END
	ELSE
		BEGIN
		IF EXISTS (SELECT EXTERNALID FROM VALIDATION_ENQUETE WHERE EXTERNALID=@MYINTERLOCUTEURID AND EXTERN_TYPE='INTERLOCUTEUR' AND TYPEVISITE=@MYNATUREVISITE) BEGIN
	    DELETE FROM VALIDATION_ENQUETE WHERE  EXTERNALID=@MYINTERLOCUTEURID AND EXTERN_TYPE='INTERLOCUTEUR' AND TYPEVISITE=@MYNATUREVISITE
		END
		INSERT INTO VALIDATION_ENQUETE (SITEID,EXTERNALID,EXTERN_TYPE,CIVILITE,NOM,PRENOM,NOMJEUNEFILLE,DATENAISSANCE,LIEUNAISSANCE,PAYSNAISSANCE, NATIONALITE, ADRESSE,VILLE,CP,FONCTION,SOCIETE,DATECREATION,CENTRE,VISITEID,CODEACTIVITE,TYPEVISITE,DEBUTPREVU,FINPREVU,DATESAISIE,POLE) SELECT @MYSITEID,@MYINTERLOCUTEURID,'INTERLOCUTEUR',CIVILITE,NOM,PRENOM,NOMJEUNEFILLE,DATENAISSANCE,LIEUNAISSANCE,PAYS_NAISSANCE,PAYS,ADRESSE,VILLE,CODEPOSTAL,FONCTION,SOCIETE,CURRENT_TIMESTAMP,@CENTRE,@MYVISITEID,@MYTYPEVISITE,@MYNATUREVISITE,@MYDEBUTPREVU,@MYFINPREVU,@DATESAISIE,@MYPOLE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID;
		END
END

GO
IF OBJECT_ID('dbo.GET_VISITE_TRAVAIL', 'FN') IS NOT NULL
DROP FUNCTION [dbo].[GET_VISITE_TRAVAIL]
GO
CREATE FUNCTION dbo.GET_VISITE_TRAVAIL(@VISITEID VARCHAR(14)) RETURNS VARCHAR(1)
AS
BEGIN
	DECLARE @WK VARCHAR(1)
    SET @WK=(SELECT ISNULL(NATUREVISITE,'-2') FROM VISITES WHERE VISITEID=@VISITEID)
	RETURN @WK
END

GO

IF OBJECT_ID('dbo.REGLE_CALCUL_CUMUL', 'FN') IS NOT NULL
DROP FUNCTION [dbo].[REGLE_CALCUL_CUMUL]
GO
CREATE FUNCTION [dbo].[REGLE_CALCUL_CUMUL](@MODE_COMPTAGE VARCHAR(1),@PERIODE_GLISSANTE VARCHAR(1), @NBR_MAX INTEGER, @DUREE_PERIODE INTEGER, @MYVISITEID VARCHAR(14)) RETURNS INTEGER
AS
BEGIN
	DECLARE @JOURS INTEGER
	IF @MODE_COMPTAGE='0' BEGIN
	SET @JOURS=(SELECT SUM(A.TOTAL) FROM (
	SELECT SUM(abs(datediff(day,dbo.F_REGLE_LIMITE_DATE(DEBUTPREVU,CONVERT(DATETIME,CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,103),103),1),FINPREVU+1))) TOTAL
 
	FROM VISITES WHERE
		INTERLOCUTEURID=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=@MYVISITEID)
		AND STATUTID=2
		AND NATUREVISITE =(SELECT NATUREVISITE FROM VISITES WHERE VISITEID=@MYVISITEID)
		AND FINPREVU>=CONVERT(DATETIME,CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,103),103)
		AND DATECREATION<=(SELECT DATECREATION FROM VISITES WHERE VISITEID=@MYVISITEID)
		AND (
			(@PERIODE_GLISSANTE='1' AND YEAR(CURRENT_TIMESTAMP)=YEAR(DEBUTPREVU) )
		  OR
			(@PERIODE_GLISSANTE='2' AND DATEADD(d,@DUREE_PERIODE,DEBUTPREVU)>=CURRENT_TIMESTAMP)
		 OR
			(@PERIODE_GLISSANTE='0' )
		)
		AND SITEID=(SELECT SITEID FROM VISITES WHERE VISITEID=@MYVISITEID)
		AND STATUTID='2'
		UNION SELECT COUNT(*) TOTAL FROM (SELECT CONVERT(VARCHAR(10),FINVISITE,103) FINVISITE

		FROM VISITES WHERE INTERLOCUTEURID=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=@MYVISITEID)
		AND STATUTID=16
		AND NATUREVISITE =(SELECT NATUREVISITE FROM VISITES WHERE VISITEID=@MYVISITEID)
		AND SITEID=(SELECT SITEID FROM VISITES WHERE VISITEID=@MYVISITEID)
		AND (

			(@PERIODE_GLISSANTE='1' AND YEAR(CURRENT_TIMESTAMP)=YEAR(DEBUTVISITE) )
		  OR
			(@PERIODE_GLISSANTE='2' AND DATEADD(d,@DUREE_PERIODE,DEBUTVISITE)>=CURRENT_TIMESTAMP)
		 OR
			(@PERIODE_GLISSANTE='0' )

		)
			GROUP BY  CONVERT(VARCHAR(10),FINVISITE,103)

		) AS B) AS A
		)
		END ELSE BEGIN
		SET @JOURS=(SELECT SUM(A.TOTAL) FROM ( SELECT COUNT(VISITEID) TOTAL
		FROM VISITES WHERE INTERLOCUTEURID=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=@MYVISITEID)
		AND STATUTID=16
		AND NATUREVISITE =(SELECT NATUREVISITE FROM VISITES WHERE VISITEID=@MYVISITEID)
		AND SITEID=(SELECT SITEID FROM VISITES WHERE VISITEID=@MYVISITEID)
		AND (

			(@PERIODE_GLISSANTE='1' AND YEAR(CURRENT_TIMESTAMP)=YEAR(DEBUTVISITE) )
		  OR
			(@PERIODE_GLISSANTE='2' AND DATEADD(d,@DUREE_PERIODE,DEBUTVISITE)>=CURRENT_TIMESTAMP)
		 OR
			(@PERIODE_GLISSANTE='0' )

		)
			--GROUP BY  CONVERT(VARCHAR(10),FINVISITE,103)

		) AS A
		)
		END
	RETURN @JOURS
END

GO

IF OBJECT_ID('dbo.PS_REGLES_EXEC_ACTIONS', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[PS_REGLES_EXEC_ACTIONS]
GO
CREATE PROCEDURE [dbo].[PS_REGLES_EXEC_ACTIONS]
@MYREGLEID INT,
 @MYVISITEID VARCHAR(14)
AS
	DECLARE @MYINTERLOCUTEURID VARCHAR(14)
	DECLARE @LCID INT
	DECLARE @RAID INT
	DECLARE @TAID INT
BEGIN

	SET @MYINTERLOCUTEURID=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=@MYVISITEID)
	DECLARE  EMP_ACTION CURSOR
	FOR SELECT RA.REGLEID,RA.ACTIONID,RR.TYPEACTION FROM REGLE_ACTION RA,REGLES RR WHERE RA.REGLEID=@MYREGLEID AND RA.ACTIONID=RR.REGLEID
	OPEN EMP_ACTION
	FETCH NEXT FROM EMP_ACTION
	INTO @LCID,@RAID,@TAID
	WHILE @@FETCH_STATUS=0
	BEGIN
		IF @TAID=-23 BEGIN
			UPDATE XANNEXE SET DATERETOUR=NULL, ETAT=0, DATESYNCHRO=NULL WHERE ORIGINE='INTERLOCUTEUR' AND ORIGINEID=@MYVISITEID AND INFORMATION_TYPEID=(SELECT FREE1 FROM REGLES WHERE REGLEID=@RAID) AND XANNEXE_TYPEID=-1 AND ETAT>-1;
			UPDATE XANNEXE SET DATERETOUR=NULL, ETAT=0,DATESYNCHRO=NULL WHERE ORIGINE='VISITES' AND ORIGINEID=@MYVISITEID AND INFORMATION_TYPEID=(SELECT FREE1 FROM REGLES WHERE REGLEID=@RAID) AND XANNEXE_TYPEID=-1 AND ETAT>-1;
		END
		IF @TAID=-22 BEGIN
			UPDATE VISITES SET FINPREVU=CONVERT(DATETIME,dbo.F_REGLE_LIMITE_DATE(FINPREVU,DATEADD(day, (SELECT CAST(FREE1 AS INT) FROM REGLES WHERE REGLEID=@RAID)-1,DEBUTPREVU),0),103),DATESYNCHRO=NULL WHERE VISITEID=@MYVISITEID
		END
		IF @TAID=-24 BEGIN
			EXEC PS_REGLE_SOUMETTRE_ENQUETE @RAID,@MYVISITEID,0
		END
		IF @TAID=-25 BEGIN
			EXEC PS_REGLE_SOUMETTRE_ENQUETE @RAID,@MYVISITEID,1
		END
		FETCH NEXT FROM EMP_ACTION
		INTO @LCID,@RAID,@TAID
	END
	CLOSE EMP_ACTION
	DEALLOCATE EMP_ACTION
END
GO

IF OBJECT_ID('dbo.PS_REGLE_CUMUL_VISITES', 'P') IS NOT NULL
	DROP PROCEDURE [dbo].[PS_REGLE_CUMUL_VISITES]
GO
CREATE PROCEDURE [dbo].[PS_REGLE_CUMUL_VISITES]
	@MYVISITEID VARCHAR(14),
	@MYREGLEID INT,
	@MYACTION  INT OUTPUT,
	@MYMESSAGE  VARCHAR(4000) OUTPUT,
	@MYACTIONBLOQUANTE  INT OUTPUT
AS
	DECLARE @MYNATIONALITE VARCHAR(14)
	DECLARE @NBR_MAX INTEGER
	DECLARE @ANNEE_GLISSANTE VARCHAR(14)
	DECLARE @JOURS INTEGER
	DECLARE @DUREE_PERIODE INTEGER
	DECLARE @MODE_COMPTAGE VARCHAR(1)
	DECLARE @TMPINT VARCHAR(20)
	DECLARE @MYNATURE VARCHAR(10)
BEGIN
	
	SET @MYACTION=0
	SET @MYMESSAGE=''
	SET @NBR_MAX=(SELECT CAST (FREE2 AS INTEGER)FROM REGLES WHERE REGLEID=@MYREGLEID)
	SET @MODE_COMPTAGE = (SELECT FREE5 FROM REGLES WHERE REGLEID=@MYREGLEID)
	SET @ANNEE_GLISSANTE=(SELECT FREE4 FROM REGLES WHERE REGLEID=@MYREGLEID)
	SET @DUREE_PERIODE=(SELECT FREE3 FROM REGLES WHERE REGLEID=@MYREGLEID)
	SET @JOURS=dbo.REGLE_CALCUL_CUMUL(@MODE_COMPTAGE,@ANNEE_GLISSANTE,@NBR_MAX,@DUREE_PERIODE,@MYVISITEID)
	SET @MYNATURE = (SELECT NATUREVISITE FROM VISITES WHERE VISITEID=@MYVISITEID)
	UPDATE VISITES SET FREE7=@JOURS WHERE VISITEID=@MYVISITEID	 
	 
	IF EXISTS (SELECT REGLEID  FROM REGLES TREG WHERE TREG.REGLEID=@MYREGLEID  AND ( (TREG.FREE1=CONVERT(VARCHAR(14),dbo.GET_REGION_PAYS(@MYVISITEID))
	AND @MYNATIONALITE<>'VPARDEFAUT' ) OR TREG.FREE1='-2' OR TREG.FREE1=@MYNATIONALITE) AND @NBR_MAX<ABS(@JOURS))
	BEGIN
		EXEC PS_REGLES_EXEC_ACTIONS @MYREGLEID,@MYVISITEID
		SET @MYACTION=(SELECT TYPEACTION FROM REGLES WHERE REGLEID=@MYREGLEID)
		SET @MYMESSAGE=(SELECT MESSAGE FROM REGLES WHERE REGLEID=@MYREGLEID)
		SET @TMPINT=CONVERT(VARCHAR(20),ABS(@NBR_MAX-@JOURS))
		SET @MYMESSAGE=SUBSTRING(@MYMESSAGE+' ('+@TMPINT+' Jours)',0,4000)
		SET @MYACTIONBLOQUANTE =(SELECT ACTIONBLOQUANTE FROM REGLES WHERE REGLEID=@MYREGLEID)
	END
END

GO



IF OBJECT_ID('dbo.PS_REGLE_DELAI_ANTICIPATION', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[PS_REGLE_DELAI_ANTICIPATION]
GO
CREATE PROCEDURE [dbo].[PS_REGLE_DELAI_ANTICIPATION]
 @MYVISITEID VARCHAR(14),
 @MYREGLEID INT,
 @MYACTION  INT OUTPUT,
 @MYMESSAGE  VARCHAR(500) OUTPUT,
 @MYACTIONBLOQUANTE  INT OUTPUT
AS
DECLARE @MYDATECREA DATETIME
DECLARE @MYDATEDEBUT DATETIME
DECLARE @MYDELAI INT
DECLARE @MYNATIONALITE VARCHAR(14)
BEGIN
  SET @MYACTION=0
  SET @MYMESSAGE=''
  SET @MYDATECREA =(SELECT  CONVERT(DATETIME,CONVERT(VARCHAR(10),V.DATECREATION,103),103) FROM VISITES V WHERE V.VISITEID=@MYVISITEID )
  SET @MYDATEDEBUT=(SELECT CONVERT(DATETIME,CONVERT(VARCHAR(10),V.DEBUTPREVU,103),103)  FROM VISITES V WHERE V.VISITEID=@MYVISITEID)
  SET @MYDELAI=(SELECT CONVERT(INT,FREE2) FROM REGLES WHERE REGLEID=@MYREGLEID)
  SET @MYNATIONALITE=(SELECT I.NATIONALITEID FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=@MYVISITEID)
  IF EXISTS (SELECT REGLEID FROM REGLES TREG WHERE TREG.REGLEID=@MYREGLEID  AND ( ((TREG.FREE1=CONVERT(VARCHAR(10),dbo.GET_REGION_PAYS(@MYVISITEID)) OR TREG.FREE1='2') AND @MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=@MYNATIONALITE) AND CONVERT(DATETIME,@MYDATEDEBUT,103)-CONVERT(DATETIME,@MYDATECREA,103)-@MYDELAI<0)
	BEGIN
		EXEC PS_REGLES_EXEC_ACTIONS @MYREGLEID,@MYVISITEID
		SET @MYACTION=(SELECT TYPEACTION FROM REGLES WHERE REGLEID=@MYREGLEID)
		SET @MYMESSAGE=(SELECT MESSAGE FROM REGLES WHERE REGLEID=@MYREGLEID)
		SET @MYACTIONBLOQUANTE=(SELECT ACTIONBLOQUANTE FROM REGLES WHERE REGLEID=@MYREGLEID)
    END
END
GO

IF OBJECT_ID('dbo.PS_REGLE_ENQUETE_DEMANDEE', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[PS_REGLE_ENQUETE_DEMANDEE]
GO
CREATE PROCEDURE [dbo].[PS_REGLE_ENQUETE_DEMANDEE]
	@MYVISITEID VARCHAR(14),
	@MYREGLEID INT,
	@MYACTION  INT OUTPUT,
	@MYMESSAGE  VARCHAR(500) OUTPUT,
	@MYACTIONBLOQUANTE  INT OUTPUT
AS
	DECLARE @MYDATECREA DATETIME
	DECLARE @MYDATEDEBUT DATETIME
	DECLARE @MYDELAI INT
	DECLARE @MYNATIONALITE VARCHAR(14)
BEGIN
	SET @MYACTION=-1
	SET @MYDATECREA =(SELECT CONVERT(DATETIME,I.DATECREATION,103) FROM INTERLOCUTEUR I, VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=@MYVISITEID)
	SET @MYDATEDEBUT =(SELECT CONVERT(DATETIME,V.DEBUTPREVU,103)   FROM VISITES V WHERE V.VISITEID=@MYVISITEID )
	SET @MYDELAI=(SELECT CONVERT(INT,FREE2) FROM REGLES WHERE REGLEID=@MYREGLEID)
	SET @MYNATIONALITE=(SELECT I.NATIONALITEID FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=@MYVISITEID)
	IF EXISTS (SELECT REGLEID FROM REGLES TREG  WHERE TREG.REGLEID=@MYREGLEID  AND (( (TREG.FREE1=CONVERT(VARCHAR,dbo.GET_REGION_PAYS(@MYVISITEID)) OR TREG.FREE1='2') AND @MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=@MYNATIONALITE) AND @MYDATEDEBUT-@MYDATECREA-@MYDELAI<0)
	BEGIN
		SET @MYACTION=(SELECT TYPEACTION FROM REGLES WHERE REGLEID=@MYREGLEID )
		SET @MYMESSAGE=(SELECT MESSAGE FROM REGLES WHERE REGLEID=@MYREGLEID)
		SET @MYACTIONBLOQUANTE=(SELECT ACTIONBLOQUANTE FROM REGLES WHERE REGLEID=@MYREGLEID)
	END
END

GO


IF OBJECT_ID('dbo.PS_REGLE_RESTREINTS', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[PS_REGLE_RESTREINTS]
GO
CREATE PROCEDURE [dbo].[PS_REGLE_RESTREINTS]
 @MYVISITEID VARCHAR(14),
 @MYREGLEID INT,
 @MYACTION  INT OUTPUT,
 @MYMESSAGE  VARCHAR(500) OUTPUT,
 @MYACTIONBLOQUANTE  INT OUTPUT
AS
	DECLARE @MYINTERLOCUTEURID VARCHAR(14)
	DECLARE @MYNATUREID VARCHAR(14)
	DECLARE @MYINTER INTEGER
	DECLARE @MYNATION INTEGER
	DECLARE @MYSTATUT INTEGER
	DECLARE @MYSOC INTEGER
	DECLARE @VISREST INTEGER
	DECLARE @STATREST INTEGER
	DECLARE @NATIONREST INTEGER
	DECLARE @SOCREST INTEGER
BEGIN
	SET @VISREST=0
	SET @STATREST=0
	SET @NATIONREST=0
	SET @SOCREST=0
	SET @MYACTION=0
	SET @MYMESSAGE=''
	SET @MYINTERLOCUTEURID=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=@MYVISITEID)
	SET @MYNATUREID=dbo.IsVisiteurRestreint(@MYINTERLOCUTEURID)
	SET @MYINTER=(SELECT FREE1 FROM REGLES WHERE REGLEID=@MYREGLEID)
	SET @MYSTATUT=(SELECT FREE2 FROM REGLES WHERE REGLEID=@MYREGLEID )
	SET @MYNATION=(SELECT FREE3 FROM REGLES WHERE REGLEID=@MYREGLEID )
	SET @MYSOC=(SELECT FREE4 FROM REGLES WHERE REGLEID=@MYREGLEID )
	IF @MYINTER=1 BEGIN
		IF @MYNATUREID=-1 BEGIN
			SET @VISREST=1
		END
	END
	IF @MYSTATUT=1 BEGIN
		IF @MYNATUREID=-2 BEGIN
			SET @STATREST=1
		END
	END
	IF @MYNATION=1 BEGIN
		IF @MYNATUREID=-3 BEGIN
			SET @NATIONREST=1
		END
	END
	IF @MYSOC=1 BEGIN
		IF @MYNATUREID=-4 BEGIN
			SET @SOCREST=1
		END
	END
	IF (@VISREST=1 OR @STATREST=1 OR @NATIONREST=1 OR @SOCREST=1) BEGIN
		EXEC PS_REGLES_EXEC_ACTIONS @MYREGLEID,@MYVISITEID
		SET @MYACTION=(SELECT TYPEACTION  FROM REGLES WHERE REGLEID=@MYREGLEID)
		SET @MYMESSAGE=(SELECT MESSAGE FROM REGLES WHERE REGLEID=@MYREGLEID)
		SET @MYACTIONBLOQUANTE=(SELECT ACTIONBLOQUANTE  FROM REGLES WHERE REGLEID=@MYREGLEID)
	END
END

GO

IF OBJECT_ID('dbo.PS_REGLE_INTERDITS', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[PS_REGLE_INTERDITS]
GO
CREATE PROCEDURE [dbo].[PS_REGLE_INTERDITS]
 @MYVISITEID VARCHAR(14),
 @MYREGLEID INT,
 @MYACTION  INT OUTPUT,
 @MYMESSAGE  VARCHAR(500) OUTPUT,
 @MYACTIONBLOQUANTE  INT OUTPUT
AS
	DECLARE @MYINTERLOCUTEURID VARCHAR(14)
	DECLARE @MYNATUREID VARCHAR(14)
	DECLARE @MYINTER INTEGER
	DECLARE @MYNATION INTEGER
	DECLARE @MYSTATUT INTEGER
	DECLARE @MYSOC INTEGER
	DECLARE @VISINT INTEGER
	DECLARE @STATINT INTEGER
	DECLARE @NATIONINT INTEGER
	DECLARE @SOCINT INTEGER
BEGIN
	SET @VISINT=0
	SET @STATINT=0
	SET @NATIONINT=0
	SET @SOCINT=0
	SET @MYACTION=0
	SET @MYMESSAGE=''
	SET @MYINTERLOCUTEURID=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=@MYVISITEID)
	SET @MYNATUREID=dbo.IsVisiteurInterdit(@MYINTERLOCUTEURID,CURRENT_TIMESTAMP)
	SET @MYINTER=(SELECT FREE1 FROM REGLES WHERE REGLEID=@MYREGLEID)
	SET @MYSTATUT=(SELECT FREE2 FROM REGLES WHERE REGLEID=@MYREGLEID )
	SET @MYNATION=(SELECT FREE3 FROM REGLES WHERE REGLEID=@MYREGLEID )
	SET @MYSOC=(SELECT FREE4 FROM REGLES WHERE REGLEID=@MYREGLEID )
	IF @MYINTER=1 BEGIN
		IF @MYNATUREID=-1 BEGIN
			SET @VISINT=1
		END
	END
	IF @MYSTATUT=1 BEGIN
		IF @MYNATUREID=-2 BEGIN
			SET @STATINT=1
		END
	END
	IF @MYNATION=1 BEGIN
		IF @MYNATUREID=-3 BEGIN
			SET @NATIONINT=1
		END
	END
	IF @MYSOC=1 BEGIN
		IF @MYNATUREID=-4 BEGIN
			SET @SOCINT=1
		END
	END
	IF (@VISINT=1 OR @STATINT=1 OR @NATIONINT=1 OR @SOCINT=1) BEGIN
		EXEC PS_REGLES_EXEC_ACTIONS @MYREGLEID,@MYVISITEID
		SET @MYACTION=(SELECT TYPEACTION  FROM REGLES WHERE REGLEID=@MYREGLEID)
		SET @MYMESSAGE=(SELECT MESSAGE FROM REGLES WHERE REGLEID=@MYREGLEID)
		SET @MYACTIONBLOQUANTE=(SELECT ACTIONBLOQUANTE  FROM REGLES WHERE REGLEID=@MYREGLEID)
	END
END

GO

IF OBJECT_ID('dbo.PS_REGLE_MCOMPENSATOIRES', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[PS_REGLE_MCOMPENSATOIRES]
GO
CREATE PROCEDURE [dbo].[PS_REGLE_MCOMPENSATOIRES]
	@MYVISITEID VARCHAR(14),
	@MYREGLEID INT,
	@MYACTION  INT OUTPUT,
	@MYMESSAGE  VARCHAR(500) OUTPUT,
	@MYACTIONBLOQUANTE  INT OUTPUT
AS
	DECLARE @MYDUREEMAX INT
	DECLARE @MYDEBUTPREVU DATETIME
	DECLARE @MYDATEMAJ DATETIME
	DECLARE @TMPCOUNT INT
	DECLARE @MYNATIONALITE VARCHAR(14)
	DECLARE @MYSITEID VARCHAR(14)
	DECLARE @TMP_STR1 varchar(4000)
	DECLARE @TMP_STR2 varchar(4000)
	DECLARE @MYNOMCHAMP VARCHAR(100)
	DECLARE @LISTE_CHAMPS_CTRL VARCHAR(4000)
	DECLARE @MYINTERLOCUTEURID VARCHAR(14)
	DECLARE @NOM_CHAMP VARCHAR(50)
	DECLARE @FLAG_CTRL VARCHAR(50)
BEGIN

	SET @MYSITEID=(SELECT SITEID FROM VISITES WHERE VISITEID=@MYVISITEID)
	SET @TMP_STR1=(SELECT  TOP(1) UPPER(VALEUR) FROM (SELECT VALEUR,'1' AS A FROM PARAMETRAGE WHERE LIBELLE='FORM_VISITEUR' AND SITEID=@MYSITEID UNION SELECT VALEUR,'2' AS A FROM PARAMETRAGE WHERE LIBELLE='FORM_VISITEUR' AND SITEID='ALL' ) AA ORDER BY AA.A);

	SET @TMP_STR2=(SELECT  TOP(1) UPPER(VALEUR) FROM (SELECT VALEUR,'1' AS A FROM PARAMETRAGE WHERE LIBELLE='FORM_VISITEUR_CONTROLE' AND SITEID=@MYSITEID UNION SELECT VALEUR,'2' AS A FROM PARAMETRAGE WHERE LIBELLE='FORM_VISITEUR_CONTROLE' AND SITEID='ALL') BB ORDER BY BB.A);
	DECLARE champ_cursor CURSOR FOR SELECT A.data,B.data FROM SPLIT(@TMP_STR1,',') A ,SPLIT(@TMP_STR2,',') B WHERE A.id=B.id
	OPEN champ_cursor;
	FETCH NEXT FROM champ_cursor INTO @NOM_CHAMP,@FLAG_CTRL
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @FLAG_CTRL='1' BEGIN
			IF LEN(@LISTE_CHAMPS_CTRL)>0 BEGIN
				SET @LISTE_CHAMPS_CTRL=@LISTE_CHAMPS_CTRL+''''+@NOM_CHAMP+''','
			END
			ELSE
				SET @LISTE_CHAMPS_CTRL=''''+@NOM_CHAMP+''','
		END
		FETCH NEXT FROM champ_cursor INTO @NOM_CHAMP,@FLAG_CTRL
	END
	CLOSE champ_cursor;
	DEALLOCATE champ_cursor;
	IF LEN(@LISTE_CHAMPS_CTRL)>0 BEGIN
		SET @LISTE_CHAMPS_CTRL=SUBSTRING(@LISTE_CHAMPS_CTRL,1,LEN(@LISTE_CHAMPS_CTRL)-1)
	END
	SET @MYACTION=0
	SET @MYMESSAGE=''
	SET @MYNATIONALITE =(SELECT I.NATIONALITEID FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=@MYVISITEID)
	IF EXISTS (SELECT REGLEID FROM REGLES TREG WHERE TREG.REGLEID=@MYREGLEID  AND ( ((TREG.FREE1=CONVERT(VARCHAR(14),dbo.GET_REGION_PAYS(@MYVISITEID))  OR TREG.FREE1='2') AND @MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=@MYNATIONALITE))
	BEGIN
		SET @MYINTERLOCUTEURID=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=@MYVISITEID)
		SET @MYNOMCHAMP =(SELECT FREE3 FROM REGLES WHERE REGLEID=@MYREGLEID)
		SET @MYDUREEMAX=(SELECT FREE2 FROM REGLES WHERE REGLEID=@MYREGLEID)
		SET @MYDEBUTPREVU=(SELECT CONVERT(DATETIME,CONVERT(VARCHAR(10),DEBUTPREVU,103),103) FROM VISITES WHERE VISITEID=@MYVISITEID)
		SET @TMPCOUNT=(SELECT COUNT(*) TMPCOUNT FROM (SELECT  TOP(1) VISITEID,SOCIETEVISIT,V.INTERLOCUTEURID,NOMPRENOMVISIT,HFIN,DEBUTPREVU,HDEBUT, ISNULL(V.FINVISITE,CONVERT(DATETIME,CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,103),103)) DATEFINVISITE 	FROM VISITES V,INTERLOCUTEUR I 	WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.INTERLOCUTEURID=@MYINTERLOCUTEURID AND ((STATUTID IN (8,16) AND HFIN IS NOT NULL) OR STATUTID='2') ORDER BY DATEFINVISITE DESC) AS A WHERE
		CASE

			WHEN
				(@MYNOMCHAMP='0')  AND (@MYDEBUTPREVU-(SELECT TOP(1) ACTION_DATE FROM INTER_ACTION WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='CIVILITE' AND CONVERT(DATETIME,ACTION_DATE,103)>CONVERT(DATETIME,A.DATEFINVISITE,103) ORDER BY ACTION_DATE DESC)<=@MYDUREEMAX) THEN 1
			WHEN
				(@MYNOMCHAMP='-1')  AND (@MYDEBUTPREVU-(SELECT TOP(1) ACTION_DATE FROM INTER_ACTION WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='NOM' AND CONVERT(DATETIME,ACTION_DATE,103)>CONVERT(DATETIME,A.DATEFINVISITE,103) ORDER BY ACTION_DATE DESC)<=@MYDUREEMAX) THEN 1
			WHEN
				(@MYNOMCHAMP='-2')  AND (@MYDEBUTPREVU-(SELECT TOP(1) ACTION_DATE FROM INTER_ACTION WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='PRENOM' AND CONVERT(DATETIME,ACTION_DATE,103)>CONVERT(DATETIME,A.DATEFINVISITE,103) ORDER BY ACTION_DATE DESC)<=@MYDUREEMAX) THEN 1
			WHEN
				(@MYNOMCHAMP='-3')  AND (@MYDEBUTPREVU-(SELECT TOP(1) ACTION_DATE FROM INTER_ACTION WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='NOMFILLE' AND CONVERT(DATETIME,ACTION_DATE,103)>CONVERT(DATETIME,A.DATEFINVISITE,103) ORDER BY ACTION_DATE DESC)<=@MYDUREEMAX) THEN 1
			WHEN
				(@MYNOMCHAMP='-4')  AND (@MYDEBUTPREVU-(SELECT TOP(1) ACTION_DATE FROM INTER_ACTION WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='DATE_NAISS' AND CONVERT(DATETIME,ACTION_DATE,103)>CONVERT(DATETIME,A.DATEFINVISITE,103) ORDER BY ACTION_DATE DESC)<=@MYDUREEMAX) THEN 1
			WHEN
				(@MYNOMCHAMP='-5')  AND (@MYDEBUTPREVU-(SELECT TOP(1) ACTION_DATE FROM INTER_ACTION WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='LIEU_NAISS' AND CONVERT(DATETIME,ACTION_DATE,103)>CONVERT(DATETIME,A.DATEFINVISITE,103) ORDER BY ACTION_DATE DESC)<=@MYDUREEMAX) THEN 1
			WHEN
				(@MYNOMCHAMP='-6')  AND (@MYDEBUTPREVU-(SELECT TOP(1) ACTION_DATE FROM INTER_ACTION WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='NATIONALITE' AND CONVERT(DATETIME,ACTION_DATE,103)>CONVERT(DATETIME,A.DATEFINVISITE,103) ORDER BY ACTION_DATE DESC)<=@MYDUREEMAX) THEN 1
			WHEN
				(@MYNOMCHAMP='-7')  AND (@MYDEBUTPREVU-(SELECT TOP(1) ACTION_DATE FROM INTER_ACTION WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='FONCTION' AND CONVERT(DATETIME,ACTION_DATE,103)>CONVERT(DATETIME,A.DATEFINVISITE,103) ORDER BY ACTION_DATE DESC)<=@MYDUREEMAX) THEN 1
			WHEN
				(@MYNOMCHAMP='-8')  AND (@MYDEBUTPREVU-(SELECT TOP(1) ACTION_DATE FROM INTER_ACTION WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='SOCIETE' AND CONVERT(DATETIME,ACTION_DATE,103)>CONVERT(DATETIME,A.DATEFINVISITE,103) ORDER BY ACTION_DATE DESC)<=@MYDUREEMAX) THEN 1
			WHEN
				(@MYNOMCHAMP='-9')  AND (@MYDEBUTPREVU-(SELECT TOP(1) ACTION_DATE FROM INTER_ACTION WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='PAYS_NAISS' AND CONVERT(DATETIME,ACTION_DATE,103)>CONVERT(DATETIME,A.DATEFINVISITE,103) ORDER BY ACTION_DATE DESC)<=@MYDUREEMAX) THEN 1
			WHEN
				(@MYNOMCHAMP='-10')  AND (@MYDEBUTPREVU-(SELECT TOP(1) ACTION_DATE FROM INTER_ACTION WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='NATIONALITE_ORIGNE' AND CONVERT(DATETIME,ACTION_DATE,103)>CONVERT(DATETIME,A.DATEFINVISITE,103) ORDER BY ACTION_DATE DESC)<=@MYDUREEMAX) THEN 1
			WHEN
				(@MYNOMCHAMP='-11')  AND (@MYDEBUTPREVU-(SELECT TOP(1) ACTION_DATE FROM INTER_ACTION WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='PAYS_ADRESSE' AND CONVERT(DATETIME,ACTION_DATE,103)>CONVERT(DATETIME,A.DATEFINVISITE,103) ORDER BY ACTION_DATE DESC)<=@MYDUREEMAX) THEN 1
			WHEN
				(@MYNOMCHAMP='-12')  AND (@MYDEBUTPREVU-(SELECT TOP(1) ACTION_DATE FROM INTER_ACTION WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='ADRESSE' AND CONVERT(DATETIME,ACTION_DATE,103)>CONVERT(DATETIME,A.DATEFINVISITE,103) ORDER BY ACTION_DATE DESC)<=@MYDUREEMAX) THEN 1
			WHEN
				(@MYNOMCHAMP='-13')  AND (@MYDEBUTPREVU-(SELECT TOP(1) ACTION_DATE FROM INTER_ACTION WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='CODEPOSTAL' AND CONVERT(DATETIME,ACTION_DATE,103)>CONVERT(DATETIME,A.DATEFINVISITE,103) ORDER BY ACTION_DATE DESC)<=@MYDUREEMAX) THEN 1
			WHEN
				(@MYNOMCHAMP='-14')  AND (@MYDEBUTPREVU-(SELECT TOP(1) ACTION_DATE FROM INTER_ACTION WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='VILLE' AND CONVERT(DATETIME,ACTION_DATE,103)>CONVERT(DATETIME,A.DATEFINVISITE,103) ORDER BY ACTION_DATE DESC)<=@MYDUREEMAX) THEN 1
			WHEN
				(@MYNOMCHAMP='-15')  AND (@MYDEBUTPREVU-(SELECT TOP(1) ACTION_DATE FROM INTER_ACTION WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='STATUT' AND CONVERT(DATETIME,ACTION_DATE,103)>CONVERT(DATETIME,A.DATEFINVISITE,103) ORDER BY ACTION_DATE DESC)<=@MYDUREEMAX) THEN 1
			WHEN
				(@MYNOMCHAMP='-16')  AND (@MYDEBUTPREVU-(SELECT TOP(1) ACTION_DATE FROM INTER_ACTION WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='TELEPHONE' AND CONVERT(DATETIME,ACTION_DATE,103)>CONVERT(DATETIME,A.DATEFINVISITE,103) ORDER BY ACTION_DATE DESC)<=@MYDUREEMAX) THEN 1
			WHEN
				(@MYNOMCHAMP='-17')  AND (@MYDEBUTPREVU-(SELECT TOP(1) ACTION_DATE FROM INTER_ACTION WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='MOBILE' AND CONVERT(DATETIME,ACTION_DATE,103)>CONVERT(DATETIME,A.DATEFINVISITE,103) ORDER BY ACTION_DATE DESC)<=@MYDUREEMAX) THEN 1
			WHEN
				(@MYNOMCHAMP='-18')  AND (@MYDEBUTPREVU-(SELECT TOP(1) ACTION_DATE FROM INTER_ACTION WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='EMAIL' AND CONVERT(DATETIME,ACTION_DATE,103)>CONVERT(DATETIME,A.DATEFINVISITE,103) ORDER BY ACTION_DATE DESC)<=@MYDUREEMAX) THEN 1
			WHEN
				(@MYNOMCHAMP='-19')  AND (@MYDEBUTPREVU-(SELECT TOP(1) ACTION_DATE FROM INTER_ACTION WHERE INTERLOCUTEURID=@MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND CHARINDEX(NOM_CHAMP,''''+@LISTE_CHAMPS_CTRL+'''')>0 AND CONVERT(DATETIME,ACTION_DATE,103)>CONVERT(DATETIME,A.DATEFINVISITE,103) ORDER BY ACTION_DATE DESC)<=@MYDUREEMAX) THEN 1
			ELSE 0
		END =1);
		IF @TMPCOUNT>0	BEGIN
			EXEC PS_REGLES_EXEC_ACTIONS @MYREGLEID,@MYVISITEID
			SET @MYACTION=(SELECT TYPEACTION FROM REGLES WHERE REGLEID=@MYREGLEID)
			SET @MYMESSAGE=(SELECT MESSAGE FROM REGLES WHERE REGLEID=@MYREGLEID)
			SET @MYACTIONBLOQUANTE  =(SELECT ACTIONBLOQUANTE FROM REGLES WHERE REGLEID=@MYREGLEID)
		   --INSERT INTO ALARME(ALARMEID,LIBELLE,DATEMAJ,DATECREATION) VALUES(-26,@MYVISITEID+':'+@MYMESSAGE,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP)
		END
	END
END
GO

IF OBJECT_ID('dbo.PS_REGLE_ZONE_ACCES', 'P') IS NOT NULL
DROP PROCEDURE dbo.PS_REGLE_ZONE_ACCES
GO
CREATE PROCEDURE dbo.PS_REGLE_ZONE_ACCES
		@MYVISITEID VARCHAR(14),
	@MYREGLEID INT,
	@MYACTION  INT OUTPUT,
	@MYMESSAGE  VARCHAR(500) OUTPUT,
	@MYACTIONBLOQUANTE  INT OUTPUT
AS
BEGIN
	SET @MYACTION=0
	SET @MYMESSAGE=''
	IF  EXISTS (SELECT REGLEID FROM REGLES TREG WHERE TREG.REGLEID=@MYREGLEID  AND TREG.FREE1=(SELECT TOP (1) BATIMENTID FROM BATIMENT WHERE LIBELLE =(SELECT LIEU FROM VISITES WHERE VISITEID=@MYVISITEID)) )
	BEGIN
		EXEC PS_REGLES_EXEC_ACTIONS @MYREGLEID,@MYVISITEID
		SET @MYACTION=(SELECT TYPEACTION FROM REGLES WHERE REGLEID=@MYREGLEID )
		SET @MYMESSAGE=(SELECT MESSAGE FROM REGLES WHERE REGLEID=@MYREGLEID)
		SET @MYACTIONBLOQUANTE=(SELECT ACTIONBLOQUANTE FROM REGLES WHERE REGLEID=@MYREGLEID)
	END
END
GO

IF OBJECT_ID('dbo.PS_REGLE_PRECAUTION_ACCES', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[PS_REGLE_PRECAUTION_ACCES]
GO
CREATE  PROCEDURE [dbo].[PS_REGLE_PRECAUTION_ACCES]
	@MYVISITEID VARCHAR(14),
	@MYREGLEID INT,
	@MYACTION  INT OUTPUT,
	@MYMESSAGE  VARCHAR(500) OUTPUT,
	@MYACTIONBLOQUANTE  INT OUTPUT
AS
	DECLARE @MYNATIONALITE VARCHAR(14)
	DECLARE @JOUR_EXCEPTION VARCHAR(1)
	DECLARE @DUREE_EXCEPTION DEC(5,4)
	DECLARE @TRAITER INT
BEGIN
	SET @MYACTION=0
	SET @MYMESSAGE=''
	SET @JOUR_EXCEPTION=(SELECT PERIODE FROM REGLES WHERE REGLEID=@MYREGLEID)
	SET @DUREE_EXCEPTION=(SELECT (60.0*DATEPART(hour,CONVERT(DATETIME,DUREE,103))+DATEPART(minute,CONVERT(DATETIME,DUREE,103))*1.0)/1440.0 FROM REGLES WHERE REGLEID=@MYREGLEID)
	SET @MYNATIONALITE =(SELECT I.NATIONALITEID FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=@MYVISITEID)
	SET @TRAITER=(SELECT
	CASE
		WHEN (@JOUR_EXCEPTION IS NULL AND (@DUREE_EXCEPTION IS NULL OR @DUREE_EXCEPTION=0.0)) THEN 1
		WHEN (@JOUR_EXCEPTION='0') AND (
		(SELECT COUNT(B.FINVIS) FROM (
			SELECT DISTINCT CONVERT(VARCHAR(10),FINVISITE,103) FINVIS
			FROM VISITES WHERE ORIGINEVISITE =( SELECT ORIGINEVISITE FROM VISITES WHERE VISITEID=@MYVISITEID)
			AND STATUTID<>2 AND STATUTID>0
			UNION SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,103) AS FINVIS
			) B  )<2) THEN 1
		WHEN @JOUR_EXCEPTION='-1' AND ((SELECT COUNT(*) FROM VISITES WHERE VISITEID=@MYVISITEID AND FINPREVU=CURRENT_TIMESTAMP)>0)  THEN 1
		WHEN @JOUR_EXCEPTION IS NULL AND @DUREE_EXCEPTION IS NOT NULL AND ( EXISTS(SELECT VISITEID FROM VISITES WHERE VISITEID=@MYVISITEID AND CURRENT_TIMESTAMP<=DATECREATION+@DUREE_EXCEPTION)) THEN 1
		ELSE 0
	END)
	IF  @TRAITER=1 AND EXISTS (SELECT REGLEID FROM REGLES TREG WHERE TREG.REGLEID=@MYREGLEID  AND ( ((TREG.FREE1=CONVERT(VARCHAR(14),dbo.GET_REGION_PAYS(@MYVISITEID)) OR TREG.FREE1='2') AND @MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=@MYNATIONALITE) )
	BEGIN
		EXEC PS_REGLES_EXEC_ACTIONS @MYREGLEID,@MYVISITEID
		SET @MYACTION=(SELECT TYPEACTION FROM REGLES WHERE REGLEID=@MYREGLEID )
		SET @MYMESSAGE=(SELECT MESSAGE FROM REGLES WHERE REGLEID=@MYREGLEID)
		SET @MYACTIONBLOQUANTE=(SELECT ACTIONBLOQUANTE FROM REGLES WHERE REGLEID=@MYREGLEID)
	END
END

GO

IF OBJECT_ID('dbo.PS_REGLE_SAISIE_RESIDANTS', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[PS_REGLE_SAISIE_RESIDANTS]
GO
CREATE PROCEDURE [dbo].[PS_REGLE_SAISIE_RESIDANTS]
	@MYVISITEID VARCHAR(14),
	@MYREGLEID INT,
	@MYACTION  INT OUTPUT,
	@MYMESSAGE  VARCHAR(500) OUTPUT,
	@MYACTIONBLOQUANTE  INT OUTPUT
AS
	DECLARE @MYNATUREID VARCHAR(14)
	DECLARE @MYNATIONALITE VARCHAR(14)
	DECLARE @STAT_SOC_RESID VARCHAR(14)
BEGIN
	SET @MYACTION=0
	SET @MYMESSAGE=''
	SET @STAT_SOC_RESID=(SELECT FREE3 FROM REGLES WHERE REGLEID=@MYREGLEID)
    SET @MYNATIONALITE=(SELECT I.NATIONALITEID FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=@MYVISITEID)
	SET @MYNATUREID=(SELECT S.NATUREID FROM SOCIETE S WHERE SOCIETEID IN (SELECT SOCIETEID FROM RESIDANTS WHERE RESIDANTID IN (SELECT RESIDANTID FROM VISITES WHERE VISITEID=@MYVISITEID)))
	IF EXISTS(SELECT REGLEID FROM REGLES TREG WHERE TREG.REGLEID=@MYREGLEID  AND (( (TREG.FREE1=CONVERT(VARCHAR(14),dbo.GET_REGION_PAYS(@MYVISITEID))  OR TREG.FREE1='2') AND @MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=@MYNATIONALITE) AND (@STAT_SOC_RESID='-2' OR @STAT_SOC_RESID=@MYNATUREID))
	BEGIN
		EXEC PS_REGLES_EXEC_ACTIONS @MYREGLEID,@MYVISITEID
		SET @MYACTION=(SELECT TYPEACTION FROM REGLES WHERE REGLEID=@MYREGLEID )
	    SET @MYMESSAGE=(SELECT MESSAGE FROM REGLES WHERE REGLEID=@MYREGLEID)
	    SET @MYACTIONBLOQUANTE=(SELECT ACTIONBLOQUANTE FROM REGLES WHERE REGLEID=@MYREGLEID)
	END
END

GO

IF OBJECT_ID('dbo.PS_REGLE_TRANSPORT_ADR', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[PS_REGLE_TRANSPORT_ADR]
GO
CREATE PROCEDURE [dbo].[PS_REGLE_TRANSPORT_ADR]
	@MYVISITEID VARCHAR(14),
	@MYREGLEID INT,
	@MYACTION  INT OUTPUT,
	@MYMESSAGE  VARCHAR(500) OUTPUT,
	@MYACTIONBLOQUANTE  INT OUTPUT
AS
	DECLARE @MYNATIONALITE VARCHAR(14)
	DECLARE @MYCLASSE_ADR INT
BEGIN
	SET @MYACTION=0
	SET @MYMESSAGE=0
	SET @MYNATIONALITE =(SELECT I.NATIONALITEID FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=@MYVISITEID)
	SET @MYCLASSE_ADR = (SELECT FREE3 FROM REGLES WHERE REGLEID=@MYREGLEID)
	IF EXISTS(SELECT REGLEID FROM REGLES TREG WHERE TREG.REGLEID=@MYREGLEID  AND ( ((TREG.FREE1=CONVERT(VARCHAR(14),dbo.GET_REGION_PAYS(@MYVISITEID))  OR TREG.FREE1='2')AND @MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=@MYNATIONALITE))
	BEGIN
		IF EXISTS(SELECT XANNEXEID FROM XANNEXE WHERE XANNEXE_TYPEID=-2 AND ORIGINE='VISITES' AND ORIGINEID=@MYVISITEID AND (@MYCLASSE_ADR=-2 OR INFORMATION_TYPEID=@MYCLASSE_ADR))
		BEGIN
			EXEC PS_REGLES_EXEC_ACTIONS @MYREGLEID,@MYVISITEID
			SET @MYMESSAGE=(SELECT MESSAGE FROM REGLES WHERE REGLEID=@MYREGLEID)
			SET @MYACTION=(SELECT TYPEACTION FROM REGLES WHERE REGLEID=@MYREGLEID )
			SET @MYACTIONBLOQUANTE=(SELECT ACTIONBLOQUANTE FROM REGLES WHERE REGLEID=@MYREGLEID)
		END
	END
END
GO


GO

IF OBJECT_ID('dbo.PS_REGLE_VALIDITE_DOCUMENTS', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[PS_REGLE_VALIDITE_DOCUMENTS]
GO
CREATE PROCEDURE [dbo].[PS_REGLE_VALIDITE_DOCUMENTS]
 @MYVISITEID VARCHAR(14),
 @MYREGLEID INT,
 @MYACTION  INT OUTPUT,
 @MYMESSAGE  VARCHAR(500) OUTPUT,
 @MYACTIONBLOQUANTE  INT OUTPUT
AS
 DECLARE @MYFINPREVU DATETIME
 DECLARE @LOC_DATEFIN DATETIME
 DECLARE @MYTYPEDOCUMENT INT
 DECLARE @LOC_ETATID VARCHAR(1)
BEGIN
	SET @MYACTION=0
	SET @MYMESSAGE=''
	SET @MYTYPEDOCUMENT =(SELECT FREE1 FROM REGLES WHERE REGLEID=@MYREGLEID)
	SET @MYFINPREVU =(SELECT CONVERT(DATETIME,CONVERT(VARCHAR(10),FINPREVU,103),103)  FROM VISITES WHERE VISITEID=@MYVISITEID)
	IF EXISTS (SELECT XANNEXEID FROM XANNEXE X WHERE X.XANNEXE_TYPEID=-1 AND X.ORIGINE='VISITES' AND X.ORIGINEID=@MYVISITEID AND X.INFORMATION_TYPEID=@MYTYPEDOCUMENT)
	BEGIN
		IF @MYTYPEDOCUMENT=-2 BEGIN
			IF (dbo.DETECT_AW_VALIDE(@MYVISITEID)=0) BEGIN
				EXEC PS_REGLES_EXEC_ACTIONS @MYREGLEID,@MYVISITEID
				SET @MYMESSAGE=(SELECT MESSAGE FROM REGLES WHERE REGLEID=@MYREGLEID)
				SET @MYACTION=(SELECT TYPEACTION FROM REGLES WHERE REGLEID=@MYREGLEID )
				SET @MYACTIONBLOQUANTE=(SELECT ACTIONBLOQUANTE FROM REGLES WHERE REGLEID=@MYREGLEID)
			END
		END
		ELSE BEGIN
			SET @LOC_DATEFIN=(SELECT CONVERT(DATETIME,CONVERT(VARCHAR(10),DATEFIN,103),103) FROM XANNEXE X WHERE X.XANNEXE_TYPEID=-1 AND X.INFORMATION_TYPEID=@MYTYPEDOCUMENT AND X.ORIGINE='VISITES' AND X.ORIGINEID=@MYVISITEID AND (ISNULL(X.ETAT,1)=1))
			IF @LOC_DATEFIN IS NULL OR @LOC_DATEFIN='01/01/1900' OR  CONVERT(DATETIME,@LOC_DATEFIN,103)<CONVERT(DATETIME,@MYFINPREVU,103) BEGIN
				EXEC PS_REGLES_EXEC_ACTIONS @MYREGLEID,@MYVISITEID
				SET @MYMESSAGE=(SELECT MESSAGE FROM REGLES WHERE REGLEID=@MYREGLEID)
				SET @MYACTION=(SELECT TYPEACTION FROM REGLES WHERE REGLEID=@MYREGLEID )
				SET @MYACTIONBLOQUANTE=(SELECT ACTIONBLOQUANTE FROM REGLES WHERE REGLEID=@MYREGLEID)
			END
		END
	END
END
GO

IF OBJECT_ID('dbo.PS_REGLE_RESULTAT', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_REGLE_RESULTAT;
GO
CREATE PROCEDURE [dbo].[PS_REGLE_RESULTAT]
  @MYVISITEID VARCHAR(14),
 @MYACTION  INT OUTPUT,
 @MYMESSAGE  VARCHAR(4000) OUTPUT,
 @MYMESSAGETORESID  VARCHAR(4000) OUTPUT,
 @MYMESSAGETOACC  VARCHAR(4000) OUTPUT,
 @MYCATEGORIE  VARCHAR(30) OUTPUT
AS

DECLARE @REGID INT
DECLARE @ACTBL INT
DECLARE @ARBI INT
DECLARE @MESRESI VARCHAR(4000)
DECLARE @MESVALI VARCHAR(4000)
DECLARE @MESACC VARCHAR(4000)
DECLARE @CAT VARCHAR(30)
BEGIN
	SET @MYMESSAGE=''
	SET @MYMESSAGETORESID=''
	SET @MYMESSAGETOACC=''
	SET @MYCATEGORIE=''
	SET @MYACTION=-5 -- PAR DEFAUT, AUTORISER LA VISITE
	DECLARE EMP_RESULTAT CURSOR
	FOR SELECT REGLEID,ACTIONBLOQUANTE,ARBITRAGE,MES_RESI,MES_VALI,MES_ACC,ISNULL(CATEGORIE,'') FROM VISITE_REGLE WHERE VISITEID=@MYVISITEID ORDER BY RANGREGLE ASC;
	OPEN EMP_RESULTAT
	FETCH NEXT FROM EMP_RESULTAT
	INTO @REGID,@ACTBL,@ARBI,@MESRESI,@MESVALI,@MESACC,@CAT
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF CHARINDEX(@CAT,@MYCATEGORIE)=0 BEGIN
			SET @MYCATEGORIE=@MYCATEGORIE+@CAT
		END
		IF @MYACTION<@ARBI AND @ARBI<>-1 BEGIN
			SET @MYACTION=@ARBI
		END
		IF LEN(@MESVALI)>0 BEGIN
			IF LEN(@MYMESSAGE)>0 BEGIN
				SET @MYMESSAGE=@MYMESSAGE+'|'+@MESVALI
			END ELSE
				SET @MYMESSAGE=@MESVALI
		END
		IF LEN(@MESRESI)>0 BEGIN
			IF LEN(@MYMESSAGETORESID)>0 BEGIN
				SET @MYMESSAGETORESID=@MYMESSAGETORESID+'|'+@MESRESI
			END ELSE
				SET @MYMESSAGETORESID=@MESRESI
		END
		IF LEN(@MESACC)>0 BEGIN
			IF LEN(@MYMESSAGETOACC)>0 BEGIN
				SET @MYMESSAGETOACC=@MYMESSAGETOACC+'|'+@MESACC;
			END ELSE
				SET @MYMESSAGETOACC=@MESACC;

		END
		IF @ACTBL<>0 BEGIN
			BREAK
		END
		FETCH NEXT FROM EMP_RESULTAT
		INTO @REGID,@ACTBL,@ARBI,@MESRESI,@MESVALI,@MESACC,@CAT
	END
	Close EMP_RESULTAT
	DEALLOCATE EMP_RESULTAT
END
GO

IF OBJECT_ID('dbo.PS_REGLE_ZRR', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[PS_REGLE_ZRR]
GO
CREATE PROCEDURE [dbo].[PS_REGLE_ZRR]
	@MYVISITEID VARCHAR(14),
	@MYREGLEID INT,
	@MYACTION  INT OUTPUT,
	@MYMESSAGE  VARCHAR(500) OUTPUT,
	@MYACTIONBLOQUANTE  INT OUTPUT
AS
	DECLARE @MYNATIONALITE VARCHAR(14)
	DECLARE @MYZRR_LS VARCHAR(1)
	DECLARE @MYZRR_CODE VARCHAR(25)
	DECLARE @MYZRR_LIB VARCHAR(255)
BEGIN
	SET @MYACTION=0
	SET @MYMESSAGE=''

	SET @MYZRR_CODE = (SELECT ZRR_CODE FROM VISITES WHERE VISITEID=@MYVISITEID)
	SET @MYZRR_LIB = (SELECT ZRR_LIB FROM VISITES WHERE VISITEID=@MYVISITEID)
	SET @MYZRR_LS = (SELECT ZRR_LS FROM VISITES WHERE VISITEID=@MYVISITEID)
	SET @MYNATIONALITE =(SELECT I.NATIONALITEID FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=@MYVISITEID)
	IF  EXISTS (SELECT REGLEID FROM REGLES TREG WHERE TREG.REGLEID=@MYREGLEID  AND ( ((TREG.FREE1=CONVERT(VARCHAR(14),dbo.GET_REGION_PAYS(@MYVISITEID))  OR TREG.FREE1='2') AND @MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=@MYNATIONALITE)
	AND (
			( FREE2='-2' AND @MYZRR_LIB<>'' AND @MYZRR_LIB IS NOT NULL)
			OR
			( FREE2='-3' AND @MYZRR_LIB<>'' AND @MYZRR_LIB IS NOT NULL AND @MYZRR_LS='O')
			OR
			( FREE2='-4' AND @MYZRR_LIB<>'' AND @MYZRR_LIB IS NOT NULL AND @MYZRR_LS='N')
		)
	)
	BEGIN
		EXEC PS_REGLES_EXEC_ACTIONS @MYREGLEID,@MYVISITEID
		SET @MYACTION=(SELECT TYPEACTION FROM REGLES WHERE REGLEID=@MYREGLEID )
		SET @MYMESSAGE=(SELECT MESSAGE FROM REGLES WHERE REGLEID=@MYREGLEID)
		SET @MYACTIONBLOQUANTE=(SELECT ACTIONBLOQUANTE FROM REGLES WHERE REGLEID=@MYREGLEID)
	END
END
GO

IF OBJECT_ID('dbo.PS_REGLE_MINEUR', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[PS_REGLE_MINEUR]
GO
CREATE PROCEDURE [dbo].[PS_REGLE_MINEUR]
	@MYVISITEID VARCHAR(14),
	@MYREGLEID INT,
	@MYACTION  INT OUTPUT,
	@MYMESSAGE  VARCHAR(500) OUTPUT,
	@MYACTIONBLOQUANTE  INT OUTPUT
AS
	DECLARE @MYNATIONALITE VARCHAR(14)
	DECLARE @TRAITER INT
	DECLARE @MYDATENAISSANCE DATETIME
	DECLARE @MYDATEMINEUR INT
BEGIN
	SET @MYACTION=0
	SET @MYMESSAGE=''
	SET @MYDATEMINEUR = (SELECT FREE2 FROM REGLES WHERE REGLEID=@MYREGLEID)
	SET @MYDATENAISSANCE = (SELECT DATENAISSANCE FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=@MYVISITEID)
	SET @MYNATIONALITE =(SELECT I.NATIONALITEID FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=@MYVISITEID)
	IF  EXISTS (SELECT REGLEID FROM REGLES TREG WHERE TREG.REGLEID=@MYREGLEID  AND ( ((TREG.FREE1=CONVERT(VARCHAR(14),dbo.GET_REGION_PAYS(@MYVISITEID))  OR TREG.FREE1='2') AND @MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=@MYNATIONALITE))
	BEGIN
		EXEC PS_REGLES_EXEC_ACTIONS @MYREGLEID,@MYVISITEID
		SET @MYACTION=(SELECT TYPEACTION FROM REGLES WHERE REGLEID=@MYREGLEID )
		SET @MYMESSAGE=(SELECT MESSAGE FROM REGLES WHERE REGLEID=@MYREGLEID)
		SET @MYACTIONBLOQUANTE=(SELECT ACTIONBLOQUANTE FROM REGLES WHERE REGLEID=@MYREGLEID)
	END
END
GO

IF OBJECT_ID('dbo.PS_REGLE_CPPA', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[PS_REGLE_CPPA]
GO
CREATE PROCEDURE [dbo].[PS_REGLE_CPPA]
	@MYVISITEID VARCHAR(14),
	@MYREGLEID INT,
	@MYACTION  INT OUTPUT,
	@MYMESSAGE  VARCHAR(500) OUTPUT,
	@MYACTIONBLOQUANTE  INT OUTPUT
AS
	DECLARE @MYPOLEID VARCHAR(14)
	DECLARE @MYNATIONALITEID VARCHAR(14)
	DECLARE @MYSITEID VARCHAR(14)
	DECLARE @MYCODEACTIVITEID VARCHAR(14)
BEGIN
	SET @MYACTION=0
	SET @MYMESSAGE=''
	SET @MYPOLEID =(SELECT R.SOCIETEID FROM RESIDANTS R,VISITES V WHERE R.RESIDANTID=V.RESIDANTID AND V.VISITEID=@MYVISITEID)
	SET @MYNATIONALITEID =(SELECT I.NATIONALITEID FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=@MYVISITEID)
	SET @MYSITEID =(SELECT V.SITEID FROM VISITES V WHERE V.VISITEID=@MYVISITEID)
	SET @MYCODEACTIVITEID =(SELECT V.TYPEVISITEID FROM VISITES V WHERE V.VISITEID=@MYVISITEID)
	IF EXISTS ( SELECT IDCPPA FROM ZCL15_CPPA WHERE REGLEID=@MYREGLEID AND SOCIETEID=@MYPOLEID AND PAYSID=@MYNATIONALITEID AND (TYPEVISITEID=@MYCODEACTIVITEID  OR TYPEVISITEID='-2') AND
	 SITEID IN (SELECT GRPSITEID FROM V_LISTE_GRPSITE WHERE SITEID=@MYSITEID ))
	BEGIN
		EXEC PS_REGLES_EXEC_ACTIONS @MYREGLEID,@MYVISITEID
		SET @MYACTION=(SELECT TYPEACTION FROM REGLES WHERE REGLEID=@MYREGLEID )
		SET @MYMESSAGE=(SELECT MESSAGE FROM REGLES WHERE REGLEID=@MYREGLEID)
		SET @MYACTIONBLOQUANTE=(SELECT ACTIONBLOQUANTE FROM REGLES WHERE REGLEID=@MYREGLEID)
	END
END
GO

IF OBJECT_ID('dbo.PS_REGLE_LOCALISATIONS', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_REGLE_LOCALISATIONS;
GO
CREATE  PROCEDURE [dbo].[PS_REGLE_LOCALISATIONS]
	@MYVISITEID VARCHAR(14),
	@MYREGLEID INT,
	@MYACTION  INT OUTPUT,
	@MYMESSAGE  VARCHAR(500) OUTPUT,
	@MYACTIONBLOQUANTE  INT OUTPUT
AS
	DECLARE @MYNATIONALITE VARCHAR(14)
	DECLARE @TRAITER INT
BEGIN
	SET @MYACTION=0
	SET @MYMESSAGE=''
	IF EXISTS (SELECT LOCALISATIONID FROM VISITES_LOCALISATION WHERE VISITEID=@MYVISITEID) BEGIN
		SET @MYNATIONALITE =(SELECT I.NATIONALITEID FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=@MYVISITEID)
		IF EXISTS (SELECT REGLEID FROM REGLES TREG WHERE TREG.REGLEID=@MYREGLEID  AND
		(((TREG.FREE1=CONVERT(VARCHAR(14),dbo.GET_REGION_PAYS(@MYVISITEID))  OR TREG.FREE1='2') AND @MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=@MYNATIONALITE)
		AND
		((TREG.FREE2 IN (SELECT LOCALISATIONID FROM VISITES_LOCALISATION WHERE VISITEID=@MYVISITEID) OR TREG.FREE2='-2')))
		BEGIN
			EXEC PS_REGLES_EXEC_ACTIONS @MYREGLEID,@MYVISITEID
			SET @MYACTION=(SELECT TYPEACTION FROM REGLES WHERE REGLEID=@MYREGLEID )
			SET @MYMESSAGE=(SELECT MESSAGE FROM REGLES WHERE REGLEID=@MYREGLEID)
			SET @MYACTIONBLOQUANTE=(SELECT ACTIONBLOQUANTE FROM REGLES WHERE REGLEID=@MYREGLEID)
		END
	END
END
GO

IF OBJECT_ID('dbo.PS_REGLE_DUREEVISITE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_REGLE_DUREEVISITE;
GO
CREATE  PROCEDURE [dbo].[PS_REGLE_DUREEVISITE]
	@MYVISITEID VARCHAR(14),
	@MYREGLEID INT,
	@MYACTION  INT OUTPUT,
	@MYMESSAGE  VARCHAR(500) OUTPUT,
	@MYACTIONBLOQUANTE  INT OUTPUT
AS
	DECLARE @MYNATIONALITE VARCHAR(14)
	DECLARE @TRAITER INT
	DECLARE @DAYSDIFF INT
BEGIN
	SET @MYACTION=0
	SET @MYMESSAGE=''
	SET @MYNATIONALITE =(SELECT I.NATIONALITEID FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=@MYVISITEID)
	IF EXISTS (SELECT REGLEID FROM REGLES TREG WHERE TREG.REGLEID=@MYREGLEID  AND
	(((TREG.FREE1=CONVERT(VARCHAR(14),dbo.GET_REGION_PAYS(@MYVISITEID))  OR TREG.FREE1='2') AND @MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=@MYNATIONALITE))
	SET @DAYSDIFF=(SELECT CAST(Datediff(day,DEBUTPREVU,FINPREVU) AS INT) FROM VISITES WHERE VISITEID=@MYVISITEID)

	IF 'OK' IN (SELECT CASE WHEN FREE3='superieur' AND CAST(FREE2 AS INT)<(@DAYSDIFF) THEN 'OK'
		    WHEN FREE3='superieuregal' AND CAST(FREE2 AS INT)<=(@DAYSDIFF) THEN 'OK'
		    WHEN FREE3='inferieur' AND CAST(FREE2 AS INT)>(@DAYSDIFF) THEN 'OK'
		    WHEN FREE3='inferieuregal' AND CAST(FREE2 AS INT)>=(@DAYSDIFF) THEN 'OK'
		    WHEN FREE3='egal' AND CAST(FREE2 AS INT)=(@DAYSDIFF) THEN 'OK'
		    WHEN FREE3='different' AND CAST(FREE2 AS INT)<>(@DAYSDIFF) THEN 'OK'
		   ELSE 'PASOK' END FROM REGLES  WHERE REGLEID=@MYREGLEID)
	BEGIN
		EXEC PS_REGLES_EXEC_ACTIONS @MYREGLEID,@MYVISITEID
		SET @MYACTION=(SELECT TYPEACTION FROM REGLES WHERE REGLEID=@MYREGLEID )
		SET @MYMESSAGE=(SELECT MESSAGE FROM REGLES WHERE REGLEID=@MYREGLEID)
		SET @MYACTIONBLOQUANTE=(SELECT ACTIONBLOQUANTE FROM REGLES WHERE REGLEID=@MYREGLEID)
	END
END
GO


IF OBJECT_ID('dbo.PS_REGLES_TRT_EXT', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_REGLES_TRT_EXT;
GO
CREATE PROCEDURE [dbo].[PS_REGLES_TRT_EXT]
  @MYVISITEID  VARCHAR(14),
 @OSFIRST VARCHAR(20),
 @ALL_RULES INTEGER,
 @BYPASS VARCHAR(15)
AS
 DECLARE @MYINDICE INT
 DECLARE @MYDELAI INT
 DECLARE @MYCONDITION INT
 DECLARE @MYDATECREA DATETIME
 DECLARE @MYDATEDEBUT DATETIME
 DECLARE @MYSTATUTVISITE VARCHAR(50)
 DECLARE @MYACTION INT
 DECLARE @MYMESSAGE VARCHAR(4000)
 DECLARE @MYMESSAGETORESID VARCHAR(4000)
 DECLARE @MYMESSAGETOACC VARCHAR(4000)
 DECLARE @MYCATEGORIE VARCHAR(30)
 DECLARE @LOCMESSAGE VARCHAR(4000)
 DECLARE @LOCACTION INT
 DECLARE @MYACTIONBLOQUANTE INT
 DECLARE @LCID INT
 DECLARE @SITEID VARCHAR(14)
 DECLARE @TRID INT
 DECLARE @MSID VARCHAR(250)
 DECLARE @MSACC VARCHAR(250)
 DECLARE @CAT VARCHAR(30)
 DECLARE @RANID INT
 DECLARE @TMP INT
 DECLARE @OSHASDONE VARCHAR(50)
 DECLARE @VALIDEUR VARCHAR(50)
 DECLARE @LASTCOLOR VARCHAR(50)
 DECLARE @TMPID INT
BEGIN
-- SUPPRIME LES ARBITRAGES RENDUS AVANT SI TYPEVISITEID EST MODIFIE CERTAINS SONT VALABLESPOUR TOUT TYPE DE VISITE (-2)
 DELETE FROM VISITE_REGLE WHERE VISITEID=@MYVISITEID AND REGLEID IN (SELECT REG.REGLEID FROM REGLES REG,VISITES V WHERE
 (REG.TYPEVISITE NOT IN (-2,V.TYPEVISITEID) OR REG.NATUREVISITE<>'-2' OR  REG.NATUREVISITE NOT IN (SELECT CASE WHEN NATUREVISITE='VISITE' THEN 0 ELSE 1 END FROM VISITES WHERE V.VISITEID=@MYVISITEID)) AND V.VISITEID=@MYVISITEID )
 DECLARE EMP_REGLES_EXT CURSOR
 FOR SELECT REG.REGLEID, REG.SITEID,REG.TYPEREGLE,REG.FREE8,REG.RANGREGLE,REG.MESSAGEACC,REG.CATEGORIE FROM REGLES REG,VISITES V WHERE REG.STATUT=1 AND REG.RANGREGLE<>-1 AND ((@ALL_RULES=1 AND REG.FLAG_TIC=1 AND (REG.PERIODE IS NOT NULL OR (REG.DUREE IS NOT NULL AND CONVERT(VARCHAR(5),CONVERT(DATETIME,REG.DUREE,103),108)<>'00:00'))) OR @ALL_RULES=0) AND (REG.NATUREVISITE='-2' OR REG.NATUREVISITE = (SELECT CASE WHEN NATUREVISITE='VISITE' THEN 0 ELSE 1 END FROM VISITES WHERE VISITEID=@MYVISITEID)) AND (REG.TYPEVISITE=V.TYPEVISITEID OR REG.TYPEVISITE=-2) AND (@BYPASS='NOBYPASS' OR @BYPASS='BYPASS' AND REG.BYPASS='0' ) AND V.VISITEID=@MYVISITEID ORDER BY REG.RANGREGLE ASC
 OPEN EMP_REGLES_EXT
 FETCH NEXT FROM EMP_REGLES_EXT
 INTO @LCID,@SITEID,@TRID,@MSID,@RANID,@MSACC,@CAT
 SET @MYACTION=0
 SET @MYMESSAGETORESID=''
 SET @MYMESSAGETOACC=''
 SET @MYCATEGORIE=''
 SET @MYSTATUTVISITE='WEB OK'
 SET @MYMESSAGE=''
 SET @LOCMESSAGE='';
 SET @MYINDICE=0
 SET @MYACTIONBLOQUANTE=0
 SET @VALIDEUR=(SELECT ISNULL(FREE6,'WEB') FROM VISITES WHERE VISITEID=@MYVISITEID)
 SET @LASTCOLOR=(SELECT ISNULL(RES_MOTEUR1,'WEB OK') FROM VISITES WHERE VISITEID=@MYVISITEID)
 WHILE @@FETCH_STATUS = 0
 	BEGIN
		IF EXISTS(SELECT VISITEID FROM VISITES WHERE VISITEID=@MYVISITEID AND SITEID IN (SELECT SITEID FROM V_LISTE_GRPSITE WHERE GRPSITEID=@SITEID))
		BEGIN
			--INSERT INTO ALARME (ALARMEID,LIBELLE,DATEMAJ,DATECREATION) VALUES (@LCID,@MYVISITEID,CURRENt_TIMESTAMp,CURRENt_TIMESTAMp)
			SET @MYMESSAGETORESID=''
			SET @MYMESSAGETOACC=''
			SET @MYMESSAGE=''
			SET @LOCACTION=0
			IF @TRID=0 BEGIN
				EXEC PS_REGLE_INTERDITS @MYVISITEID,@LCID,@LOCACTION OUTPUT,@LOCMESSAGE OUTPUT,@MYACTIONBLOQUANTE OUTPUT
			END
			IF @TRID=-1 BEGIN
				EXEC PS_REGLE_PRECAUTION_ACCES @MYVISITEID,@LCID,@LOCACTION OUTPUT,@LOCMESSAGE OUTPUT,@MYACTIONBLOQUANTE OUTPUT
			END
			IF @TRID=-2 BEGIN
				 EXEC PS_REGLE_DELAI_ANTICIPATION @MYVISITEID,@LCID,@LOCACTION OUTPUT,@LOCMESSAGE OUTPUT,@MYACTIONBLOQUANTE OUTPUT
			END
			IF @TRID=-3 BEGIN
				 EXEC PS_REGLE_CUMUL_VISITES @MYVISITEID,@LCID,@LOCACTION OUTPUT,@LOCMESSAGE OUTPUT,@MYACTIONBLOQUANTE OUTPUT
			END
			IF @TRID=-4 BEGIN
				 EXEC PS_REGLE_ZONE_ACCES @MYVISITEID,@LCID,@LOCACTION OUTPUT,@LOCMESSAGE OUTPUT,@MYACTIONBLOQUANTE OUTPUT
			END
			IF @TRID=-6 BEGIN
				 EXEC PS_REGLE_MCOMPENSATOIRES @MYVISITEID,@LCID,@LOCACTION OUTPUT,@LOCMESSAGE OUTPUT,@MYACTIONBLOQUANTE OUTPUT
			END
			IF @TRID=-7 BEGIN
				 EXEC PS_REGLE_VALIDITE_DOCUMENTS @MYVISITEID,@LCID,@LOCACTION OUTPUT,@LOCMESSAGE OUTPUT,@MYACTIONBLOQUANTE OUTPUT
			END
			IF @TRID=-9 BEGIN
				 EXEC PS_REGLE_SAISIE_RESIDANTS @MYVISITEID,@LCID,@LOCACTION OUTPUT,@LOCMESSAGE OUTPUT,@MYACTIONBLOQUANTE OUTPUT
			END
			IF @TRID=-10 BEGIN
				 EXEC PS_REGLE_TRANSPORT_ADR @MYVISITEID,@LCID,@LOCACTION OUTPUT,@LOCMESSAGE OUTPUT,@MYACTIONBLOQUANTE OUTPUT
			END
			IF @TRID=-12 BEGIN
				 EXEC PS_REGLE_CPPA @MYVISITEID,@LCID,@LOCACTION OUTPUT,@LOCMESSAGE OUTPUT,@MYACTIONBLOQUANTE OUTPUT
			END
			IF @TRID=-13 BEGIN
				 EXEC PS_REGLE_ZRR @MYVISITEID,@LCID,@LOCACTION OUTPUT,@LOCMESSAGE OUTPUT,@MYACTIONBLOQUANTE OUTPUT
			END
			IF @TRID=-14 BEGIN
				 EXEC PS_REGLE_MINEUR @MYVISITEID,@LCID,@LOCACTION OUTPUT,@LOCMESSAGE OUTPUT,@MYACTIONBLOQUANTE OUTPUT
			END
			IF @TRID=-15 BEGIN
				EXEC PS_REGLE_RESTREINTS @MYVISITEID,@LCID,@LOCACTION OUTPUT,@LOCMESSAGE OUTPUT,@MYACTIONBLOQUANTE OUTPUT
			END
			IF @TRID=-16 BEGIN
				EXEC PS_REGLE_LOCALISATIONS @MYVISITEID,@LCID,@LOCACTION OUTPUT,@LOCMESSAGE OUTPUT,@MYACTIONBLOQUANTE OUTPUT
			END
			IF @TRID=-17 BEGIN
				EXEC PS_REGLE_DUREEVISITE @MYVISITEID,@LCID,@LOCACTION OUTPUT,@LOCMESSAGE OUTPUT,@MYACTIONBLOQUANTE OUTPUT
			END
			DELETE FROM VISITE_REGLE WHERE VISITEID=@MYVISITEID AND REGLEID=@LCID;
			IF @LOCACTION<>0 BEGIN
				SET @MYMESSAGETORESID=@MSID
				SET @MYMESSAGE=@LOCMESSAGE
				SET @MYMESSAGETOACC=@MSACC
				SET @MYCATEGORIE=@CAT
				INSERT INTO VISITE_REGLE (VISITEID,REGLEID,ARBITRAGE,ACTIONBLOQUANTE,RANGREGLE,MES_RESI,MES_VALI,MES_ACC,CATEGORIE,DATECREATION,DATEMAJ)
				VALUES (@MYVISITEID,@LCID,@LOCACTION,@MYACTIONBLOQUANTE,@RANID,SUBSTRING(@MYMESSAGETORESID,0,4000),SUBSTRING(@MYMESSAGE,0,4000),SUBSTRING(@MYMESSAGETOACC,0,4000), SUBSTRING(@MYCATEGORIE,0,2),CURRENT_TIMESTAMP,CURRENT_TIMESTAMP)
			END
		END
		FETCH NEXT FROM EMP_REGLES_EXT
		INTO @LCID,@SITEID,@TRID,@MSID,@RANID,@MSACC,@CAT
	END
	CLOSE EMP_REGLES_EXT
	DEALLOCATE EMP_REGLES_EXT
	IF EXISTS (SELECT REGLEID FROM REGLES WHERE RANGREGLE<>-1 AND STATUT=1 ) BEGIN
		EXEC PS_REGLE_RESULTAT @MYVISITEID,@MYACTION OUTPUT,@MYMESSAGE OUTPUT,@MYMESSAGETORESID OUTPUT,@MYMESSAGETOACC OUTPUT,@MYCATEGORIE OUTPUT
		SET @MYSTATUTVISITE=dbo.GET_STATUTVISITE(@MYACTION)
		IF @VALIDEUR='WEB' BEGIN
			SET @TMPID=0
			UPDATE VISITES SET STATUTVISITE=@MYSTATUTVISITE, RES_MOTEUR1=@MYSTATUTVISITE, FREE8=substring(@MYMESSAGETORESID, 0, 250), FREE9=substring(@MYMESSAGE, 0, 250), FREE2=substring(@MYMESSAGETOACC, 0, 250),LAST_ACTION='WEB',FREE6='WEB', ALERTE=substring(@MYMESSAGE,0,4000),CATEGORIE=substring(@MYCATEGORIE,0,29) WHERE VISITEID=@MYVISITEID;
		END ELSE BEGIN
			IF @OSFIRST='0' BEGIN
				SET @TMPID=0
				UPDATE VISITES SET STATUTVISITE=@MYSTATUTVISITE, RES_MOTEUR1=@MYSTATUTVISITE, FREE8=substring(@MYMESSAGETORESID, 0, 250), FREE9=substring(@MYMESSAGE, 0, 250),FREE2=substring(@MYMESSAGETOACC, 0, 250), LAST_ACTION='WEB', ALERTE=substring(@MYMESSAGE,0,4000),CATEGORIE=substring(@MYCATEGORIE,0,29) WHERE VISITEID=@MYVISITEID;
			END ELSE
				SET @TMPID=0
				UPDATE VISITES SET RES_MOTEUR1=@MYSTATUTVISITE, FREE8=substring(@MYMESSAGETORESID, 0, 250), FREE9=substring(@MYMESSAGE, 0, 250), FREE2=substring(@MYMESSAGETOACC, 0, 250), LAST_ACTION='WEB',ALERTE=substring(@MYMESSAGE,0,4000),CATEGORIE=substring(@MYCATEGORIE,0,29) WHERE VISITEID=@MYVISITEID;
		END
		SET @TMPID=0
		UPDATE VISITES SET DATEMAJ=CURRENT_TIMESTAMP,DATESYNCHRO=NULL,RES_MOTEUR2=@LASTCOLOR WHERE VISITEID=@MYVISITEID;
	END
 END
Go

 

IF OBJECT_ID('dbo.PS_REGLES_BATCH', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[PS_REGLES_BATCH]
GO
CREATE PROCEDURE [dbo].[PS_REGLES_BATCH]
AS
DECLARE @MYINDICE INT
DECLARE @FLAG_EXCEPTION VARCHAR(1)
DECLARE @SITID VARCHAR(14)
DECLARE @ALL_RULES INT
DECLARE @VISID VARCHAR(14)
BEGIN
	SET @ALL_RULES=1  -- SI 1 EXECUTER LES REGLES OU FLAG_TIC=1 SINON TOUTES LES REGLES
	SET @MYINDICE=0
	IF EXISTS (SELECT REGLEID FROM REGLES WHERE (PERIODE IS NOT NULL OR (DUREE IS NOT NULL AND CONVERT(VARCHAR(5),CONVERT(DATETIME,DUREE,103),108)<>'00:00')) AND STATUT=1) BEGIN
		DECLARE PREENREG CURSOR
		FOR SELECT VISITEID,SITEID FROM VISITES WHERE STATUTID=2 AND CONVERT(DATETIME,CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,103),103) <=CONVERT(DATETIME,CONVERT(VARCHAR(10),FINPREVU,103),103)  ORDER BY DATECREATION DESC
		Open PREENREG  -- ouverture du curseur
		Fetch NEXT FROM PREENREG
		Into @VISID,@SITID -- Lecture d'une visite
		WHILE @@FETCH_STATUS=0
		BEGIN
			SET @FLAG_EXCEPTION=(SELECT  TOP(1) UPPER(VALEUR)  FROM (SELECT ISNULL(VALEUR,'0') VALEUR,'1' AS A FROM PARAMETRAGE WHERE LIBELLE='OSFIRST' AND SITEID=@SITID UNION SELECT VALEUR,'2' AS A FROM PARAMETRAGE WHERE LIBELLE='OSFIRST' AND SITEID='ALL') AA ORDER BY AA.A)
			EXEC PS_REGLES_TRT_EXT @VISID,@FLAG_EXCEPTION,@ALL_RULES
			Fetch NEXT FROM PREENREG
			Into @VISID,@SITID  -- Lecture d'une visite
			SET @MYINDICE=@MYINDICE+1
		END
		Close  PREENREG  -- fermeture du curseur
		DEALLOCATE PREENREG
	END
 END
GO

IF OBJECT_ID('dbo.PS_REGLES_ORDER', 'P') IS NOT NULL
DROP PROCEDURE [dbo].[PS_REGLES_ORDER]
GO
CREATE PROCEDURE [dbo].[PS_REGLES_ORDER]
AS
DECLARE @indice int
DECLARE @id INT
DECLARE @rg INT

BEGIN
 SET @INDICE=0
 DECLARE regle_curseur CURSOR
 FOR SELECT REGLEID, RANGREGLE FROM REGLES WHERE RANGREGLE<>-1 ORDER BY RANGREGLE ASC
 OPEN regle_curseur
 FETCH NEXT FROM regle_curseur
 INTO @id,@rg
 WHILE @@FETCH_STATUS = 0
 BEGIN
  UPDATE REGLES SET RANGREGLE=@INDICE WHERE REGLEID=@id
  SET @indice=@indice+1
  FETCH NEXT FROM regle_curseur
  INTO @id,@rg
 END
 CLOSE regle_curseur
 DEALLOCATE regle_curseur
END

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PS_REGLES_UPDOWN]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PS_REGLES_UPDOWN]
GO
CREATE PROCEDURE [dbo].[PS_REGLES_UPDOWN]
@UPDOWN_ID INT,
@SENS Varchar(14)
AS
DECLARE @rg INT
DECLARE @rulecount INT
BEGIN
 SET @rulecount=(SELECT COUNT(*) FROM REGLES WHERE RANGREGLE<>-1)

 SET @rg = (SELECT RANGREGLE FROM REGLES WHERE REGLEID=@UPDOWN_ID)

 IF (@SENS='UP') AND (@rg>0)  BEGIN
    UPDATE REGLES SET RANGREGLE=@rg WHERE RANGREGLE=@rg-1
    UPDATE REGLES SET RANGREGLE=@rg-1 WHERE REGLEID=@UPDOWN_ID
 END
 ELSE IF (@SENS='DOWN') AND (@rg<@rulecount-1)
 BEGIN
   UPDATE REGLES SET RANGREGLE=@rg WHERE RANGREGLE=@rg+1
   UPDATE REGLES SET RANGREGLE=@rg+1 WHERE REGLEID=@UPDOWN_ID
 END
END

GO


IF OBJECT_ID('dbo.PS_TAXI_CREATIONIMPUTATION', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_TAXI_CREATIONIMPUTATION;
GO
CREATE PROCEDURE dbo.PS_TAXI_CREATIONIMPUTATION
	@LIBELLE VARCHAR(35),
	@ID VARCHAR(14) OUTPUT
AS
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
BEGIN
	SET @LIBELLE = UPPER(@LIBELLE)
	IF EXISTS (SELECT * FROM IMPUTATION WHERE UPPER(LIBELLE) = @LIBELLE)
		SET @ID = (SELECT IMPUTATIONID FROM IMPUTATION WHERE UPPER(LIBELLE) = @LIBELLE)
	ELSE BEGIN
		INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
		SET @IDENTITY = (SELECT @@IDENTITY AS ID)
		SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
		SET @ID = @FLAG + @IDENTITY
		INSERT INTO IMPUTATION(IMPUTATIONID, LIBELLE, IMPUTATION_TYPEID, DATECREATION, DATEMAJ)
			VALUES (@ID, @LIBELLE, 'VPARDEFAUT', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	END
END

GO

IF OBJECT_ID('dbo.PS_TAXI_CREATIONEVENEMENT', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_TAXI_CREATIONEVENEMENT;
GO
CREATE PROCEDURE dbo.PS_TAXI_CREATIONEVENEMENT
	@ID_COURSE INT,
	@LIBELLE VARCHAR(200),
	@DATEHEURE DATETIME,
	@USERID VARCHAR(14),
	@ID VARCHAR(14) OUTPUT
AS
	DECLARE @NOW DATETIME
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
BEGIN
	SET @NOW = CURRENT_TIMESTAMP
	SET @LIBELLE = UPPER(@LIBELLE)
	INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
	SET @IDENTITY = (SELECT @@IDENTITY AS ID)
	SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
	SET @ID = @FLAG + @IDENTITY

	INSERT INTO EVENEMENTCOURSE(ID_EVENEMENTCOURSE, ID_COURSE, LIBELLE, DATEHEURE, USERID, DATECREATION, DATEMAJ)
		VALUES (@ID, @ID_COURSE, @LIBELLE, @DATEHEURE, @USERID, @NOW, @NOW)
END

GO

IF OBJECT_ID('dbo.PS_TAXI_CREATIONCOURSE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_TAXI_CREATIONCOURSE;
GO
CREATE PROCEDURE dbo.PS_TAXI_CREATIONCOURSE
	@USERID VARCHAR(14),
	@ENLEVEMENTPREVU DATETIME,
	@LIEUDEPART VARCHAR(40),
	@OBJET VARCHAR(200),
	@MOYENPAIEMENT VARCHAR(50),
	@CODECLIENT VARCHAR(10),
	@IMPUTATION VARCHAR(35),
	@ID_TYPEVEHICULE INT,
	@SITEID VARCHAR(14),
	@ID INT OUTPUT
AS
	DECLARE @NOW DATETIME
	DECLARE @SITE VARCHAR(35)
	DECLARE @EID VARCHAR(14)
	DECLARE @IMPUTATIONID VARCHAR(14)
	DECLARE @EVNMT VARCHAR(200)
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
BEGIN
	EXEC PS_TAXI_CREATIONIMPUTATION @IMPUTATION, @IMPUTATIONID OUTPUT

	SET @NOW = CURRENT_TIMESTAMP

	--SET @SITEID = (SELECT SITEID FROM USERS WHERE USERID = @USERID)

	INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
	SET @IDENTITY = (SELECT @@IDENTITY AS ID)
	SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
	SET @ID = CAST(@FLAG AS INT) + CAST(@IDENTITY AS INT)

	INSERT INTO COURSE(ID_COURSE, SITEID, ID_STATUTCOURSE, DATEHEUREDEMANDE, LIEUDEPART, DATEHEUREDEPART, ID_TYPEVEHICULE, OBJET, MOYENPAIEMENT, IMPUTATIONID, CODECLIENT, DATECREATION, DATEMAJ)
		VALUES (@ID, @SITEID, -1, @NOW, @LIEUDEPART, @ENLEVEMENTPREVU, @ID_TYPEVEHICULE, @OBJET, @MOYENPAIEMENT, @IMPUTATIONID, @CODECLIENT, @NOW, @NOW)

	SET @EVNMT = 'CREATION COURSE'
	EXEC PS_TAXI_CREATIONEVENEMENT @ID, @EVNMT, @NOW, @USERID, @EID OUTPUT
END

GO


IF OBJECT_ID('dbo.PS_TAXI_CREATIONPASSAGER', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_TAXI_CREATIONPASSAGER;
GO
CREATE PROCEDURE dbo.PS_TAXI_CREATIONPASSAGER
	@ID_COURSE INT,
	@RESIDANTID VARCHAR(14),
	@INTERLOCUTEURID VARCHAR(14),
	@CONTACT VARCHAR(200),
	@HANDICAP VARCHAR(200),
	@ANIMAL VARCHAR(200),
	@ID INT OUTPUT
AS
	DECLARE @ORDRE INT
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
BEGIN
	SET @ORDRE = (SELECT MAX(ORDRE) FROM PASSAGERTAXI WHERE ID_COURSE = @ID_COURSE)
	IF @ORDRE IS NULL
		SET @ORDRE = 0
	ELSE
		SET @ORDRE = @ORDRE + 1

	INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
	SET @IDENTITY = (SELECT @@IDENTITY AS ID)
	SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
	SET @ID = CAST(@FLAG AS INT) + CAST(@IDENTITY AS INT)

	INSERT INTO PASSAGERTAXI(ID_PASSAGERTAXI, ID_COURSE, RESIDANTID, INTERLOCUTEURID, CONTACT, HANDICAP, ANIMAL, ORDRE, DATECREATION, DATEMAJ)
		VALUES (@ID, @ID_COURSE, @RESIDANTID, @INTERLOCUTEURID, @CONTACT, @HANDICAP, @ANIMAL, @ORDRE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
END

GO

IF OBJECT_ID('dbo.PS_TAXI_CONFIRMATIONCOURSE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_TAXI_CONFIRMATIONCOURSE;
GO
CREATE PROCEDURE dbo.PS_TAXI_CONFIRMATIONCOURSE
	@ID_COURSE INT,
	@USERID VARCHAR(14),
	@NUMCOURSE VARCHAR(35),
	@REFERENCESTAXI VARCHAR(200),
	@DELAI INT,
	@ADRESSEID VARCHAR(14)
AS
	DECLARE @STATUTCOURSE VARCHAR(35)
	DECLARE @COMPAGNIE VARCHAR(80)
	DECLARE @NOW DATETIME
	DECLARE @EID VARCHAR(14)
	DECLARE @EVNMT VARCHAR(200)
BEGIN
	SET @NOW = CURRENT_TIMESTAMP

	UPDATE COURSE SET ID_STATUTCOURSE = -2, DATEMAJ = @NOW, NUMCOURSE = @NUMCOURSE, REFERENCESTAXI = @REFERENCESTAXI, DELAI = @DELAI, ADRESSEID = @ADRESSEID WHERE ID_COURSE = @ID_COURSE
	SET @STATUTCOURSE = (SELECT LIBELLE FROM STATUTCOURSE WHERE ID_STATUTCOURSE = -2)
	SET @COMPAGNIE = (SELECT SOCIETE FROM ADRESSE WHERE ADRESSEID = @ADRESSEID)
	SET @EVNMT = 'COURSE CONFIRMEE PAR LA COMPAGNIE '+@COMPAGNIE
	EXEC PS_TAXI_CREATIONEVENEMENT @ID_COURSE, @EVNMT, @NOW, @USERID, @EID OUTPUT
END
GO

IF OBJECT_ID('dbo.PS_TAXI_MODIFCOURSE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_TAXI_MODIFCOURSE;
GO
CREATE PROCEDURE dbo.PS_TAXI_MODIFCOURSE
	@ID_COURSE INT,
	@USERID VARCHAR(14),
	@NUMCOURSE VARCHAR(35),
	@REFERENCESTAXI VARCHAR(200)
AS
	DECLARE @COMPAGNIE VARCHAR(80)
	DECLARE @NOW DATETIME
	DECLARE @EID VARCHAR(14)
	DECLARE @EVNMT VARCHAR(200)
BEGIN
	SET @NOW = CURRENT_TIMESTAMP

	UPDATE COURSE SET DATEMAJ = @NOW, NUMCOURSE = @NUMCOURSE, REFERENCESTAXI = @REFERENCESTAXI WHERE ID_COURSE = @ID_COURSE
	SET @EVNMT = 'COURSE MODIFIEE'
	EXEC PS_TAXI_CREATIONEVENEMENT @ID_COURSE, @EVNMT, @NOW, @USERID, @EID OUTPUT
END
GO

IF OBJECT_ID('dbo.PS_TAXI_REFUSCOURSE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_TAXI_REFUSCOURSE;
GO
CREATE PROCEDURE dbo.PS_TAXI_REFUSCOURSE
	@ID_COURSE INT,
	@USERID VARCHAR(14),
	@ADRESSEID VARCHAR(14)
AS
	DECLARE @COMPAGNIE VARCHAR(80)
	DECLARE @NOW DATETIME
	DECLARE @EID VARCHAR(14)
	DECLARE @EVNMT VARCHAR(200)
BEGIN
	SET @NOW = CURRENT_TIMESTAMP
	SET @COMPAGNIE = (SELECT SOCIETE FROM ADRESSE WHERE ADRESSEID = @ADRESSEID)
	SET @EVNMT = 'COURSE REFUSEE PAR LA COMPAGNIE '+@COMPAGNIE
	EXEC PS_TAXI_CREATIONEVENEMENT @ID_COURSE, @EVNMT, @NOW, @USERID, @EID OUTPUT
END
GO

IF OBJECT_ID('dbo.PS_TAXI_ARRIVEETAXI', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_TAXI_ARRIVEETAXI;
GO
CREATE PROCEDURE dbo.PS_TAXI_ARRIVEETAXI
	@ID_COURSE INT,
	@USERID VARCHAR(14)
AS
	DECLARE @NOW DATETIME
	DECLARE @EID VARCHAR(14)
	DECLARE @EVNMT VARCHAR(200)
BEGIN
	SET @NOW = CURRENT_TIMESTAMP
	SET @EVNMT = 'ARRIVEE DU TAXI'
	EXEC PS_TAXI_CREATIONEVENEMENT @ID_COURSE, @EVNMT, @NOW, @USERID, @EID OUTPUT

	UPDATE COURSE SET ID_STATUTCOURSE = -3, DATEMAJ = @NOW, DATEHEUREFIN = @NOW WHERE ID_COURSE = @ID_COURSE
END
GO

IF OBJECT_ID('dbo.PS_TAXI_ANNULATIONCOURSE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_TAXI_ANNULATIONCOURSE;
GO
CREATE PROCEDURE dbo.PS_TAXI_ANNULATIONCOURSE
	@ID_COURSE INT,
	@USERID VARCHAR(14)
AS
	DECLARE @NOW DATETIME
	DECLARE @EID VARCHAR(14)
	DECLARE @EVNMT VARCHAR(200)
BEGIN
	SET @NOW = CURRENT_TIMESTAMP
	SET @EVNMT = 'ANNULATION'
	EXEC PS_TAXI_CREATIONEVENEMENT @ID_COURSE, @EVNMT, @NOW, @USERID, @EID OUTPUT

	UPDATE COURSE SET ID_STATUTCOURSE = -4, DATEMAJ = @NOW, DATEHEUREFIN = @NOW WHERE ID_COURSE = @ID_COURSE
END
GO

IF OBJECT_ID('dbo.PS_TAXI_CHANGEMENTSTATUTCOURSE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_TAXI_CHANGEMENTSTATUTCOURSE;
GO
CREATE PROCEDURE dbo.PS_TAXI_CHANGEMENTSTATUTCOURSE
	@ID_COURSE INT,
	@ID_STATUTCOURSE INT,
	@USERID VARCHAR(14)
AS
	DECLARE @STATUTCOURSE VARCHAR(35)
	DECLARE @NOW DATETIME
	DECLARE @EID VARCHAR(14)
	DECLARE @EVNMT VARCHAR(200)
BEGIN
	SET @NOW = CURRENT_TIMESTAMP

	UPDATE COURSE SET ID_STATUTCOURSE = @ID_STATUTCOURSE, DATEMAJ = @NOW WHERE ID_COURSE = @ID_COURSE
	SET @STATUTCOURSE = (SELECT LIBELLE FROM STATUTCOURSE WHERE ID_STATUTCOURSE = @ID_STATUTCOURSE)
	SET @EVNMT = 'CHANGEMENT STATUT COURSE A '+@STATUTCOURSE
	EXEC PS_TAXI_CREATIONEVENEMENT @ID_COURSE, @EVNMT, @NOW, @USERID, @EID OUTPUT
END
GO

IF OBJECT_ID('dbo.PS_CHECK_KEY', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_CHECK_KEY;
GO
CREATE PROCEDURE dbo.PS_CHECK_KEY
@SITEIDp VARCHAR(14),
@NBR INT OUTPUT
AS
DECLARE @OJOURNALIDp INT;
BEGIN

	INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
	SET @OJOURNALIDp = (SELECT @@IDENTITY AS ID)
	INSERT INTO OJOURNAL (OJOURNALID,EVENEMENTID,PERSONNELDEBUTID,DEBUT_EFF,DEBUT_REEL,AGENDA_JOURID,MISSIONTEMPID,AGENDA_JOUR2ID,OBSERVATION,DATECREATION,DATEMAJ,SITEID,POSTEID,LIEUID) SELECT @OJOURNALIDp,-19,-1,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,0,0,0,'',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,@SITEIDp,-1,-1 FROM CLEFS C WHERE ETAT=2 AND DUREEAUTO=1 AND CURRENT_TIMESTAMP>DATEADD(hh,2,(SELECT JOUR_DEPART FROM INDCLE I WHERE I.CLEID=C.CLEID AND JOUR_RETOUR IS NULL))
	INSERT INTO OJOURNALLOG (OJOURNALID,ACTION,PERSONNELID,SITEID,POSTEID,OBSERVATION,DATEMAJ) SELECT @OJOURNALIDp,1,-1,@SITEIDp,-1,'',CURRENT_TIMESTAMP FROM CLEFS C WHERE ETAT=2 AND DUREEAUTO=1 AND CURRENT_TIMESTAMP>DATEADD(hh,2,(SELECT JOUR_DEPART FROM INDCLE I WHERE I.CLEID=C.CLEID AND JOUR_RETOUR IS NULL))

	INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
	SET @OJOURNALIDp = (SELECT @@IDENTITY AS ID)
	INSERT INTO OJOURNAL (OJOURNALID,EVENEMENTID,PERSONNELDEBUTID,DEBUT_EFF,DEBUT_REEL,AGENDA_JOURID,MISSIONTEMPID,AGENDA_JOUR2ID,OBSERVATION,DATECREATION,DATEMAJ,SITEID,POSTEID,LIEUID) SELECT @OJOURNALIDp,-19,-1,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,0,0,0,'',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,@SITEIDp,-1,-1 FROM CLEFS C WHERE ETAT=2 AND DUREEAUTO=2 AND CONVERT(DATETIME,(SELECT JOUR_DEPART FROM INDCLE I WHERE I.CLEID=C.CLEID AND JOUR_RETOUR IS NULL),108)>(SELECT CONVERT(DATETIME, CONVERT(varchar,getdate(),103)+' '+VALEUR,103) FROM PARAMETRAGE WHERE LIBELLE='CLE_HEURE_FIN' AND SITEID='ALL')
	INSERT INTO OJOURNALLOG (OJOURNALID,ACTION,PERSONNELID,SITEID,POSTEID,OBSERVATION,DATEMAJ) SELECT @OJOURNALIDp,1,-1,@SITEIDp,-1,'',CURRENT_TIMESTAMP FROM CLEFS C WHERE ETAT=2 AND DUREEAUTO=2 AND CONVERT(DATETIME,(SELECT JOUR_DEPART FROM INDCLE I WHERE I.CLEID=C.CLEID AND JOUR_RETOUR IS NULL),108)>(SELECT CONVERT(DATETIME, CONVERT(varchar,getdate(),103)+' '+VALEUR,103) FROM PARAMETRAGE WHERE LIBELLE='CLE_HEURE_FIN' AND SITEID='ALL')

	INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
	SET @OJOURNALIDp = (SELECT @@IDENTITY AS ID)
	INSERT INTO OJOURNAL (OJOURNALID,EVENEMENTID,PERSONNELDEBUTID,DEBUT_EFF,DEBUT_REEL,AGENDA_JOURID,MISSIONTEMPID,AGENDA_JOUR2ID,OBSERVATION,DATECREATION,DATEMAJ,SITEID,POSTEID,LIEUID) SELECT @OJOURNALIDp,-19,-1,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,0,0,0,'',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,@SITEIDp,-1,-1 FROM CLEFS C WHERE ETAT=2 AND DUREEAUTO=3 AND CURRENT_TIMESTAMP>DATEADD(hh,24,(SELECT JOUR_DEPART FROM INDCLE I WHERE I.CLEID=C.CLEID AND JOUR_RETOUR IS NULL))
	INSERT INTO OJOURNALLOG (OJOURNALID,ACTION,PERSONNELID,SITEID,POSTEID,OBSERVATION,DATEMAJ) SELECT @OJOURNALIDp,1,-1,@SITEIDp,-1,'',CURRENT_TIMESTAMP FROM CLEFS C WHERE ETAT=2 AND DUREEAUTO=3 AND CURRENT_TIMESTAMP>DATEADD(hh,24,(SELECT JOUR_DEPART FROM INDCLE I WHERE I.CLEID=C.CLEID AND JOUR_RETOUR IS NULL))

	UPDATE CLEFS SET ETAT=3 FROM CLEFS C WHERE ETAT=2 AND DUREEAUTO=1 AND CURRENT_TIMESTAMP>DATEADD(hh,2,(SELECT JOUR_DEPART FROM INDCLE I WHERE I.CLEID=C.CLEID AND JOUR_RETOUR IS NULL))
	UPDATE CLEFS SET ETAT=3 FROM CLEFS C WHERE ETAT=2 AND DUREEAUTO=2 AND CONVERT(DATETIME,(SELECT JOUR_DEPART FROM INDCLE I WHERE I.CLEID=C.CLEID AND JOUR_RETOUR IS NULL),108)>(SELECT CONVERT(DATETIME,GETDATE()+' '+VALEUR,108) FROM PARAMETRAGE WHERE LIBELLE='CLE_HEURE_FIN' AND SITEID='ALL')
	UPDATE CLEFS SET ETAT=3 FROM CLEFS C WHERE ETAT=2 AND DUREEAUTO=3 AND CURRENT_TIMESTAMP>DATEADD(hh,24,(SELECT JOUR_DEPART FROM INDCLE I WHERE I.CLEID=C.CLEID AND JOUR_RETOUR IS NULL))
	SET @NBR=0
	SET @NBR=(SELECT COUNT(*) FROM CLEFS WHERE ETAT=3)
END
GO

--------------------------------------------------------------------

IF OBJECT_ID('dbo.IMPORT_FROM_CTRL', 'P') IS NOT NULL
	DROP PROCEDURE dbo.IMPORT_FROM_CTRL;
GO
CREATE PROCEDURE dbo.IMPORT_FROM_CTRL
	@ID VARCHAR(30),
	@DATEHEURE VARCHAR(35),
	@LECTEUR VARCHAR(50),
	@LECTEURID VARCHAR(20),
	@DESC VARCHAR(50),
	@CTRLEVENT VARCHAR(50),
	@CTRL_PROFIL VARCHAR(100),
	@CTRL_SOCIETE VARCHAR(50),
	@CTRL_NOM VARCHAR(50),
	@CTRL_PRENOM VARCHAR(50),
	@CARDCODE VARCHAR(50),
	@EXINTERLOCUTEURID VARCHAR(50),
	@SITEID VARCHAR(50)
AS
	DECLARE @IID VARCHAR(14)
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
	DECLARE @NOMPRENOM VARCHAR(100)
	DECLARE @SOCIETE VARCHAR(100)
	DECLARE @INTERSTATUT VARCHAR(100)
	DECLARE @BADGE VARCHAR(100)
	DECLARE @RESIDANTSOCIETELIB VARCHAR(100)
	DECLARE @RESIDANTSOCIETEID VARCHAR(100)
	DECLARE @SITELIBELLE VARCHAR(100)
	DECLARE @VISITEID VARCHAR(100)
	DECLARE @TICKET VARCHAR(50)
	DECLARE @LOCALISATION VARCHAR(3990)
	DECLARE @DATEACTION VARCHAR(20)
BEGIN
	IF NOT EXISTS (SELECT CtrlID FROM ZCTRL_FIL_EAU WHERE CtrlID = @ID) BEGIN

		--SET @DATEACTION=@DATEHEURE
		--SET @DATEACTION=LEFT(CONVERT(VARCHAR,CONVERT(DATETIME,@DATEHEURE,101),120),19)
		SET @DATEACTION=SUBSTRING(@DATEHEURE,7,4)+'-'+SUBSTRING(@DATEHEURE,4,2)+'-'+SUBSTRING(@DATEHEURE,1,2)+' '+SUBSTRING(@DATEHEURE,12,8)

		--LEFT(CONVERT(VARCHAR,CONVERT(DATETIME,@DATEHEURE,101),120),19)

		INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
		SET @IDENTITY = (SELECT @@IDENTITY AS ID)
		SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
		SET @IID = @FLAG + @IDENTITY

		SET @SITELIBELLE=(SELECT LIBELLE FROM SITE WHERE SITEID=@SITEID)
		SET @LOCALISATION = ''

		IF (@EXINTERLOCUTEURID<>'') BEGIN
			IF EXISTS (SELECT TOP 1 INTERLOCUTEURID FROM INTERLOCUTEUR WHERE INTERLOCUTEURID = @EXINTERLOCUTEURID) BEGIN
				SET @NOMPRENOM = (SELECT TOP 1 NOMPRENOM FROM INTERLOCUTEUR WHERE INTERLOCUTEURID = @EXINTERLOCUTEURID)
				SET @SOCIETE = (SELECT TOP 1 SOCIETE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID = @EXINTERLOCUTEURID)
				SET @INTERSTATUT = (SELECT TOP 1 NATURE.LIBELLE FROM INTERLOCUTEUR,NATURE WHERE INTERLOCUTEUR.NATUREID=NATURE.NATUREID AND INTERLOCUTEURID = @EXINTERLOCUTEURID)

				IF EXISTS (SELECT TOP 1 VISITEID FROM VISITES WHERE SITEID=@SITEID AND INTERLOCUTEURID=@EXINTERLOCUTEURID AND ((STATUTID=16 AND ( @DATEACTION  BETWEEN LEFT(CONVERT(VARCHAR,DEBUTVISITE,120),19) AND LEFT(CONVERT(VARCHAR,FINVISITE,120),19)))  OR (STATUTID=8 AND ( @DATEACTION >= LEFT(CONVERT(VARCHAR,DEBUTVISITE,120),19))))) BEGIN
					SET @VISITEID = (SELECT TOP 1 VISITEID FROM VISITES WHERE SITEID=@SITEID AND INTERLOCUTEURID=@EXINTERLOCUTEURID AND ((STATUTID=16 AND (@DATEACTION  BETWEEN LEFT(CONVERT(VARCHAR,DEBUTVISITE,120),19) AND LEFT(CONVERT(VARCHAR,FINVISITE,120),19)))  OR (STATUTID=8 AND (@DATEACTION >= LEFT(CONVERT(VARCHAR,DEBUTVISITE,120),19)))))

					SET @BADGE=(SELECT NUMEROBADGE FROM VISITES WHERE VISITEID=@VISITEID)
					SET @RESIDANTSOCIETELIB=(SELECT SOCIETERESID FROM VISITES WHERE VISITEID=@VISITEID)
					SET @RESIDANTSOCIETEID=(SELECT SOCIETEID FROM VISITES,RESIDANTS WHERE VISITES.RESIDANTID=RESIDANTS.RESIDANTID AND VISITEID=@VISITEID)
					SET @TICKET=(SELECT TICKET FROM VISITES WHERE VISITEID=@VISITEID)

					SELECT @LOCALISATION = @LOCALISATION + ';'+localisation
					FROM (
							select DISTINCT L.libelle as Localisation from  LOCALISATION L,PROFIL_CTRL PC,PROFIL_CTRL_LOCALISATION PCL,PROFIL_CTRL_LECTEUR CL,VISITES_LOCALISATION VL where  PCL.profil_ctrlid=PC.profil_ctrlid AND PCL.localisationid=L.localisationid
							AND CL.profil_ctrlid_ext=PC.profil_ctrlid_ext AND VL.localisationid=L.localisationid
							AND VL.visiteid=@VISITEID AND CL.ctrlreaderid=@LECTEURID
					) TAB_LOC
					SET @LOCALISATION=SUBSTRING(@LOCALISATION,2,4000)
					--SELECT  @LOCALISATION
				END
			END
			ELSE BEGIN
				SET @EXINTERLOCUTEURID = ''
				SET @NOMPRENOM =  @CTRL_NOM+' '+@CTRL_PRENOM
				SET @SOCIETE = @CTRL_SOCIETE
				SET @TICKET=''
			END
		END
		ELSE BEGIN
			SET @NOMPRENOM =  @CTRL_NOM+' '+@CTRL_PRENOM
			SET @SOCIETE = @CTRL_SOCIETE
		END

		IF  (@CARDCODE<>'') BEGIN
			SET @BADGE=@CARDCODE
		END;

		INSERT INTO ZCTRL_FIL_EAU (ID,CtrlID,CtrlDate,CtrlReader,CTRLDesc,CtrlEvent,CtrlReaderID,Badge,InterlocuteurID,NomPrenom,Societe,InterlocuteurStatut,ResidantSocieteLib,ResidantSocieteId,SiteID,SiteLibelle,Datecreation,Datemaj,TICKET,LOCALISATION,CTRLPROFIL)
		VALUES(@IID,@ID,@DATEHEURE,@LECTEUR,@DESC,@CTRLEVENT,@LECTEURID,@BADGE,@EXINTERLOCUTEURID,@NOMPRENOM,@SOCIETE,@INTERSTATUT,@RESIDANTSOCIETELIB,@RESIDANTSOCIETEID,@SITEID,@SITELIBELLE,CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,@TICKET,@LOCALISATION,@CTRL_PROFIL)
	END
END
GO

IF OBJECT_ID('dbo.IMPORT_PROFIL_CTRL', 'P') IS NOT NULL
	DROP PROCEDURE dbo.IMPORT_PROFIL_CTRL;
GO
CREATE PROCEDURE dbo.IMPORT_PROFIL_CTRL
	@ID VARCHAR(30),
	@PROFIL_CTRL VARCHAR(100),
	@SITEID VARCHAR(50)
AS
	DECLARE @IID VARCHAR(14)
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
BEGIN
	IF NOT EXISTS (SELECT PROFIL_CTRL FROM PROFIL_CTRL WHERE PROFIL_CTRLID_EXT=@ID AND SITEID=@SITEID) BEGIN
		INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
		SET @IDENTITY = (SELECT @@IDENTITY AS ID)
		SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
		SET @IID = @FLAG + @IDENTITY

		INSERT INTO PROFIL_CTRL (PROFIL_CTRLID,PROFIL_CTRL,PROFIL_CTRLID_EXT,SITEID,Datecreation,Datemaj)
		VALUES(@IID,@PROFIL_CTRL,@ID,@SITEID,CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	END
	ELSE BEGIN
		UPDATE PROFIL_CTRL SET PROFIL_CTRL=@PROFIL_CTRL,Datemaj=CURRENT_TIMESTAMP WHERE PROFIL_CTRLID_EXT=@ID AND SITEID=@SITEID
	END
END
GO

IF OBJECT_ID('dbo.IMPORT_PROFIL_CTRL_LECTEUR', 'P') IS NOT NULL
	DROP PROCEDURE dbo.IMPORT_PROFIL_CTRL_LECTEUR;
GO
CREATE PROCEDURE dbo.IMPORT_PROFIL_CTRL_LECTEUR
	@CTRLREADER VARCHAR(50),
	@CTRLREADERID VARCHAR(20),
	@PROFIL_CTRL VARCHAR(100),
	@PROFIL_CTRLID_EXT VARCHAR(50),
	@SITEID VARCHAR(50)
AS
	DECLARE @IID VARCHAR(14)
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
BEGIN
	IF NOT EXISTS (SELECT PROFIL_CTRL_LECTEURID FROM PROFIL_CTRL_LECTEUR WHERE CTRLREADERID=@CTRLREADERID AND PROFIL_CTRLID_EXT=@PROFIL_CTRLID_EXT AND SITEID=@SITEID) BEGIN
		INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
		SET @IDENTITY = (SELECT @@IDENTITY AS ID)
		SET @FLAG = (SELECT SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
		SET @IID = @FLAG + @IDENTITY

		INSERT INTO PROFIL_CTRL_LECTEUR (PROFIL_CTRL_LECTEURID,CTRLREADER,CTRLREADERID,PROFIL_CTRL,PROFIL_CTRLID_EXT,SITEID,Datecreation,Datemaj)
		VALUES(@IID,@CTRLREADER,@CTRLREADERID,@PROFIL_CTRL,@PROFIL_CTRLID_EXT,@SITEID,CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
	END
END
GO

-------------------------------------------------------------------------------------------------
----------


-----------------------------------------------------------------------------------------------------------


IF OBJECT_ID('dbo.PS_SITE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_SITE;
GO

CREATE PROCEDURE dbo.PS_SITE
	@flagin INTEGER,
	@champctrl varchar(80),
	@siteid VARCHAR(40),
	@ID VARCHAR(14) OUTPUT

AS

BEGIN

	IF EXISTS (SELECT * FROM SITE WHERE SITEID = @siteid) BEGIN
		SET @ID = @siteid
	END
	ELSE BEGIN
		IF EXISTS (SELECT * FROM SITE WHERE UPPER(LIBELLE) = UPPER(@siteid)) BEGIN
			SET @ID = (SELECT top 1 SITEID FROM SITE WHERE UPPER(LIBELLE) = UPPER(@siteid))
		END
		ELSE begin
				SET @ID = 'VPARDEFAUT'
		END
	end
END

GO



IF OBJECT_ID('dbo.PS_NATURE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_NATURE;
GO

CREATE PROCEDURE dbo.PS_NATURE
	@flagin INT,
	@champctrl varchar(80),
	@libelle VARCHAR(35),
	@abrege varchar(6),
	@tvisite varchar(1),
	@interdit varchar(1),
	@ID VARCHAR(18) OUTPUT
AS
	DECLARE @flag VARCHAR(14)
	DECLARE @identity VARCHAR(14)
	DECLARE @interd varchar(1)
BEGIN


	IF EXISTS (SELECT * FROM nature WHERE natureid = @libelle) BEGIN
		SET @ID = @libelle + ',0,0'
	END
	ELSE BEGIN
		IF (@libelle IS NULL) OR LTRIM(@libelle) = '' BEGIN
			SET @ID = 'VPARDEFAUT,0,0'

		END
		ELSE BEGIN
				SET @libelle = UPPER(@libelle)
				IF EXISTS (SELECT * FROM nature WHERE UPPER(libelle) = @libelle) BEGIN
					SET @ID = (SELECT TOP 1 natureid FROM nature WHERE libelle = @libelle)
					SET @ID = @ID + ',0,0'
				END	ELSE BEGIN
					IF (@flagin=1) BEGIN
						INSERT INTO SEQ_IDENTITY(libelle) VALUES ('OK')
						SET @identity = (SELECT @@IDENTITY AS ID)
						SET @flag = (SELECT SUBSTRING(version, 1, 3) FROM version_sfw)
						SET @ID = @flag + @identity

						SET @interd = @interdit
						IF (@interd IS NULL) OR LTRIM(@interd) = '' BEGIN
							SET @interd = 0
						END

						INSERT INTO nature(natureid, libelle,abrege,tvisite, interdit, debutinterdit, fininterdit, datecreation, datemaj)
							VALUES(@ID, @libelle,@abrege,@tvisite,@interd, CONVERT(DATETIME,CONVERT(VARCHAR,CURRENT_TIMESTAMP,103),103) , CURRENT_TIMESTAMP + 36525, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
						SET @ID = @ID + ',1,0'
					END
					ELSE BEGIN
						SET @ID = 'VPARDEFAUT,0,0'
					END
				END
		END
	END
END

GO
------------------------------------------------------------


IF OBJECT_ID('dbo.PS_PAYS', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_PAYS;
GO

CREATE PROCEDURE dbo.PS_PAYS

	@flagin INT,
	@champctrl varchar(80),

	@libelle VARCHAR(35),
	@libellegr VARCHAR(50),

	@libelleus VARCHAR(35),
	@nationalite VARCHAR(50),
	@codeiso1 VARCHAR(2),
	@codeiso2 VARCHAR(3),
	@codeiso3 VARCHAR(3),
	@indicatif VARCHAR(5),
	@shortlib VARCHAR(3),
	@devise VARCHAR(3),
	@deviselibelle VARCHAR(35),
	@interdit VARCHAR(1),
	@debutinterdit DATETIME,
	@fininterdit DATETIME,

	@enquete1 VARCHAR(10),
	@statut1 VARCHAR(10),
	@enquete2 VARCHAR(10),
	@statut2 VARCHAR(10),
	@enquete3 VARCHAR(10),
	@statut3 VARCHAR(10),
	@ID VARCHAR(18) OUTPUT
AS
	DECLARE @flag VARCHAR(14)
	DECLARE @identity VARCHAR(14)
BEGIN
	IF EXISTS (SELECT * FROM pays WHERE paysid =
				case
					when @champctrl = 'LIBELLE' then @libelle
					when @champctrl = 'LIBELLEGR' then @libellegr
					else @libelle
				END
	) BEGIN
		SET @ID = case
					when @champctrl = 'LIBELLE' then @libelle
					when @champctrl = 'LIBELLEGR' then @libellegr
					else @libelle
				END
		SET @ID = @ID + ',0,0'
	END
	ELSE BEGIN
		IF (@libelle IS NULL) OR LTRIM(@libelle) = '' BEGIN
			SET @ID = 'VPARDEFAUT,0,0'
		END
		ELSE BEGIN
			SET @libelle = UPPER(@libelle)
			IF EXISTS (SELECT * FROM pays WHERE UPPER(libelle) = UPPER(@libelle)) BEGIN
				SET @ID = (SELECT TOP 1 paysid FROM pays WHERE UPPER(libelle) = UPPER(@libelle))
				UPDATE pays SET libelle = @libelle, libellegr = @libellegr, libelleus = @libelleus, nationalite = @nationalite, codeiso2 = @codeiso2, codeiso3 = @codeiso3, indicatif = @indicatif, deviselibelle = @deviselibelle, datemaj = CURRENT_TIMESTAMP WHERE paysid = @ID
				SET @ID = @ID + ',0,1'
			END
			ELSE BEGIN
				IF EXISTS (SELECT * FROM pays WHERE UPPER(nationalite) = UPPER(@nationalite)) BEGIN
					SET @ID = (SELECT TOP 1 paysid FROM pays WHERE UPPER(nationalite) = UPPER(@nationalite))
					SET @ID = @ID + ',0,0'
				END
				ELSE BEGIN
					IF EXISTS (SELECT TOP 1 paysid FROM pays WHERE UPPER(libelle) ='INCONNU') BEGIN
						SET @ID = (SELECT TOP 1 paysid FROM pays WHERE UPPER(libelle) ='INCONNU')
						SET @ID = @ID + ',0,0'
					END
					ELSE BEGIN
						IF @flagin=1 BEGIN
							INSERT INTO SEQ_IDENTITY(libelle) VALUES ('OK')
							SET @identity = (SELECT @@IDENTITY AS ID)
							SET @flag = (SELECT SUBSTRING(version, 1, 3) FROM version_sfw)
							SET @ID = @flag + @identity
							INSERT INTO pays (paysid, libelle, libellegr, libelleus, nationalite, codeiso1,codeiso2, codeiso3, indicatif, shortlib,devise,deviselibelle,interdit, debutinterdit, fininterdit, enquete1,statut1,enquete2,statut2,enquete3,statut3,datecreation, datemaj)
							VALUES(@ID, @libelle, @libellegr,@libelleus, @nationalite, @codeiso1,@codeiso2, @codeiso3,@indicatif,@shortlib,@devise,@deviselibelle,0, CONVERT(DATETIME,CONVERT(VARCHAR,CURRENT_TIMESTAMP,103),103) , CURRENT_TIMESTAMP + 36525, @enquete1,@statut1,@enquete2,@statut2,@enquete3,@statut3,CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
							SET @ID = @ID + ',1,0'
						END
						ELSE
						SET @ID='VPARDEFAUT,0,0'
					END
				END
			END
		END
	END
END

go


-----------------------------------------
IF OBJECT_ID('dbo.PS_VILLE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_VILLE;
GO
CREATE PROCEDURE dbo.PS_VILLE
	@flagin INT,
	@champctrl varchar(80),
	@codepostal VARCHAR(5),
	@phonkey varchar(35),
	@ville VARCHAR(35),
	@paysid VARCHAR(50),
	@ID VARCHAR(18) OUTPUT

AS
	DECLARE @nbupdate int
	DECLARE @nbinsert int
	DECLARE @idpays VARCHAR(14)
	DECLARE @flag VARCHAR(14)
	DECLARE @identity VARCHAR(14)
	DECLARE @datenow datetime
BEGIN
	SET @nbupdate=0;
	SET @nbinsert=0;
	SEt @datenow = getdate();
	IF EXISTS (SELECT * FROM ville WHERE codeville = @ville) BEGIN
		SET @ID = @ville + ',0,0'
	END
	ELSE BEGIN
		IF (@ville IS NULL) OR LTRIM(@ville) = '' BEGIN
			SET @ID = '-1,0,0'
		END
		ELSE BEGIN
			SET @ville = UPPER(@ville)
			IF EXISTS (SELECT * FROM ville WHERE UPPER(ville) = @ville AND codepostal = @codepostal) BEGIN
				SET @ID = (SELECT TOP 1 codeville FROM ville WHERE UPPER(ville) = @ville AND codepostal = @codepostal)
				EXEC PS_PAYS 0,@paysid, @paysid,'',@paysid, @paysid,'','','','','','','','',@datenow,@datenow,'','','','','','',@idpays OUT
				--EXEC PS_PAYS 0,@paysid, @paysid, '', @paysid, '', '', '', @idpays OUTPUT
				UPDATE ville SET paysid = @idpays, datemaj = CURRENT_TIMESTAMP WHERE codeville = @ID
				Set @ID = @ID + ',0,1'
			END
			ELSE BEGIN
				INSERT INTO SEQ_IDENTITY(libelle) VALUES ('OK')
				SET @identity = (SELECT @@IDENTITY AS ID)
				SET @flag = (SELECT SUBSTRING(version, 1, 3) FROM version_sfw)
				SET @ID = @flag + @identity
 				EXEC PS_PAYS 0,@paysid, @paysid,'',@paysid, @paysid,'','','','','','','','',@datenow,@datenow,'','','','','','',@idpays OUT
			--	EXEC PS_PAYS 0,@paysid, @paysid, '', @paysid, '', '', '', @idpays OUTPUT

				SET @nbupdate = @nbupdate + CAST( (select Data from Split(@idpays,',') WHERE id = 3) as int)
				SET @nbinsert = @nbinsert + CAST( (select Data from Split(@idpays,',') WHERE id = 2) as int)
				SET @idpays = (select Data from Split(@idpays,',') WHERE id = 1)

				INSERT INTO ville(codeville, ville, codepostal, paysid,phonkey, datecreation, datemaj)
					VALUES(@ID, @ville, @codepostal, @idpays,@phonkey, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
				Set @nbinsert=@nbinsert+1
				Set @ID = @ID + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
			END
		END
	END
END


GO
----------------------------------------------------------------------------------------------------
----------------------------------
IF OBJECT_ID('dbo.PS_SOCIETE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_SOCIETE;
GO

CREATE PROCEDURE dbo.PS_SOCIETE
	@flagin INT,
	@champctrl varchar(80),
	@natureid varchar(14),
	@nom VARCHAR(35),
	@siret VARCHAR(20),
	@departement VARCHAR(35),
	@adresse2 VARCHAR(150),
	@cp VARCHAR(10),
	@ville VARCHAR(35),
	@pays VARCHAR(50),
	@province varchar(35),
	@telephone varchar(20),
	@fax varchar(20),
	@email varchar(150),
	@web varchar(50),
	@isresidant VARCHAR(1),

	@ID VARCHAR(18) OUTPUT
AS
	DECLARE @nbupdate int
	DECLARE @nbinsert int
	DECLARE @flag VARCHAR(14)
	DECLARE @identity VARCHAR(14)

	DECLARE @interdit INT
	DECLARE @externalid VARCHAR(24)
BEGIN
	SET @nbupdate =0
	SET @nbinsert =0
	SET @interdit= 0
	SET @externalid= 'VPARDEFAUT'
	IF EXISTS (SELECT * FROM societe WHERE (societeid = @nom OR nom=@nom) and ISRESIDANT=@isresidant) BEGIN
		SET @ID = (SELECT top 1 societeid FROM societe WHERE (societeid = @nom OR nom=@nom) and ISRESIDANT=@isresidant) + ',0,0'
	END
	ELSE BEGIN
		IF (@nom IS NULL) OR LTRIM(@nom) IS NULL OR LTRIM(@nom) = '' BEGIN
			SET @ID = 'VPARDEFAUT,0,0'
		END
		ELSE BEGIN
			--SET @nom = UPPER(@nom)

			if(@flagin=1)begin

				EXEC PS_NATURE 1,'',@natureid,'','','',@natureid OUTPUT

				SET @nbupdate = @nbupdate + CAST( (select Data from Split(@natureid,',') WHERE id = 3) as int)
				SET @nbinsert = @nbinsert + CAST( (select Data from Split(@natureid,',') WHERE id = 2) as int)
				SET @natureid = (select Data from Split(@natureid,',') WHERE id = 1)

				IF EXISTS (SELECT * FROM societe WHERE UPPER(nom) = UPPER(@nom) AND ISRESIDANT=@isresidant) BEGIN
					SET @ID = (SELECT TOP 1 societeid FROM societe WHERE UPPER(nom) = UPPER(@nom) AND ISRESIDANT=@isresidant)
					UPDATE societe SET siret = @siret, departement = @departement, adresse2 = @adresse2, cp = @cp, ville = @ville, pays = @pays, natureid = @natureid, telephone = @telephone, fax = @fax, email = @email, web = @web,province = @province WHERE societeid = @ID
					Set @ID = @ID + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate+1 as varchar)
				END
				ELSE BEGIN

					INSERT INTO SEQ_IDENTITY(libelle) VALUES ('OK')
					SET @identity = (SELECT @@IDENTITY AS ID)
					SET @flag = (SELECT SUBSTRING(version, 1, 3) FROM version_sfw)
					SET @ID =@flag + @identity

					INSERT INTO societe(societeid, nom, interdit, isresidant,externalid, debutinterdit, fininterdit, datecreation, datemaj,fax,email,web,natureid,adresse2,cp,ville,pays,province,telephone)
						VALUES(@ID, @nom, @interdit,@isresidant,@externalid, CURRENT_TIMESTAMP - 1, CURRENT_TIMESTAMP + 36525, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,@fax,@email,@web,@natureid,@adresse2,@cp,@ville,@pays,@province,@telephone)
					Set @nbinsert=@nbinsert+1
					Set @ID = @ID + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)

				END
			END
			ELSE BEGIN
				Set @ID = 'VPARDEFAUT,' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
			END
		END
	END
END

go


-------------------------------------------------------------------------------------------------
----------

IF OBJECT_ID('dbo.PS_DEPARTEMENT', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_DEPARTEMENT;
GO

CREATE PROCEDURE dbo.PS_DEPARTEMENT
	@flagin INT,
	@champctrl varchar(80),
	@societeid varchar(35),
	@libelle VARCHAR(40),
	@ID VARCHAR(18) OUTPUT

AS
	DECLARE @flag VARCHAR(14)
	DECLARE @identity VARCHAR(14)
	DECLARE @libel VARCHAR(40)
	DECLARE @idsociete VARCHAR(35)
	DECLARE @nbupdate int
	DECLARE @nbinsert int
BEGIN
	Set @nbupdate = 0
	Set @nbinsert = 0

	IF EXISTS (SELECT * FROM DEPARTEMENT WHERE DEPTID = @libelle)
		BEGIN
			Set @ID=@libelle +',0,0'
		END
	ELSE
	BEGIN
		Set @idsociete = @societeid

		EXEC PS_SOCIETE 1,'','',@idsociete,'','','','','','','','','','','','1',@idsociete OUTPUT

		SET @nbupdate = @nbupdate + CAST( (select Data from Split(@idsociete,',') WHERE id = 3) as int)
	 	SET @nbinsert = @nbinsert + CAST( (select Data from Split(@idsociete,',') WHERE id = 2) as int)

		SET @idsociete = (select Data from Split(@idsociete,',') WHERE id = 1)


		SET @libel=@libelle
		IF EXISTS (	SELECT * FROM DEPARTEMENT WHERE UPPER(LIBELLE) = UPPER(@libelle) AND SOCIETEID=@idsociete )
		BEGIN
			Set @ID=(SELECT TOP(1) DEPTID FROM DEPARTEMENT WHERE UPPER(LIBELLE) = UPPER(@libelle) AND SOCIETEID=@idsociete)
			Set @ID = @ID + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
		END
		ELSE
			BEGIN
				IF (@libel IS NOT NULL) AND (LTRIM(@libel) IS NOT NULL) AND LTRIM(@libel)<>'' BEGIN
					INSERT INTO SEQ_IDENTITY(libelle) VALUES ('OK')
					SET @identity = (SELECT @@IDENTITY AS ID)
					SET @flag = (SELECT SUBSTRING(version, 1, 3) FROM version_sfw)
					SET @ID = @flag + @identity
					INSERT INTO DEPARTEMENT (DEPTID,LIBELLE,SOCIETEID,DATECREATION,DATEMAJ) VALUES (@ID,@libel,@idsociete,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
					Set @nbinsert=@nbinsert+1;
					Set @ID = @ID + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)

					END
				ELSE BEGIN
					Set @ID='VPARDEFAUT'
					Set @ID = @ID + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
				END
			END

	END
END

GO


------------------------------------------------------------------------------------------

IF OBJECT_ID('dbo.PS_SERVICE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_SERVICE;
GO

CREATE PROCEDURE dbo.PS_SERVICE
	@flagin INT,
	@champctrl varchar(80),
	@deptid varchar(35),
	@libelle VARCHAR(60),
	@ID VARCHAR(18) OUTPUT

AS
	DECLARE @flag VARCHAR(14)
	DECLARE @identity VARCHAR(14)
	DECLARE @nbupdate int
	DECLARE @nbinsert int
	DECLARE @dptid varchar(18)
BEGIN
	Set @nbupdate = 0
	Set @nbinsert = 0

	IF EXISTS (SELECT * FROM SERVICE S,DEPARTEMENT D WHERE S.DEPTID = D.DEPTID AND SERVICEID = @libelle AND (S.DEPTID = @deptid or D.LIBELLE = @deptid))
		BEGIN
			Set @ID=@libelle +',0,0'
		END
	ELSE
		BEGIN

		EXEC PS_DEPARTEMENT 1,'','',@deptid,@dptid output
		SET @nbupdate = @nbupdate + CAST( (select Data from Split(@dptid,',') WHERE id = 3) as int)
		SET @nbinsert = @nbinsert + CAST( (select Data from Split(@dptid,',') WHERE id = 2) as int)
		SET @dptid = (select Data from Split(@dptid,',') WHERE id = 1)

		IF EXISTS (SELECT TOP(1) * FROM SERVICE WHERE UPPER(LIBELLE) = UPPER(@libelle) AND DEPTID=@dptid)
		BEGIN
			SET @ID=(SELECT TOP(1) SERVICEID FROM SERVICE WHERE UPPER(LIBELLE) = UPPER(@libelle) AND DEPTID=@dptid)
			SET @ID = @ID + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
		END
		ELSE BEGIN
			 IF (@libelle IS NOT NULL) AND LTRIM(@libelle) IS NOT NULL AND LTRIM(@libelle)<>'' BEGIN
				INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
				SET @identity = (SELECT @@IDENTITY AS ID)
				SET @flag = (SELECT SUBSTRING(version, 1, 3) FROM version_sfw)
				SET @ID = @flag + @identity
				INSERT INTO SERVICE (SERVICEID,LIBELLE,DEPTID,DATECREATION,DATEMAJ) VALUES (@ID,@libelle,@dptid,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
				SET @nbinsert=@nbinsert+1;
				SET @ID = @ID + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
			 END
			 ELSE
				BEGIN
					SET @ID = 'VPARDEFAUT' + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
			 END
		END
	END
END

go
-----------------------------------------------------------------------------------------------------------
IF OBJECT_ID('dbo.PS_BATIMENT', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_BATIMENT;
GO

CREATE PROCEDURE dbo.PS_BATIMENT
	@flagin INT,
	@champctrl varchar(80),
	@SITEID VARCHAR(35),
	@LIBELLE varchar(35),
	@ADRESSE varchar(max),
	@ID VARCHAR(18) OUTPUT
AS
	DECLARE @flag VARCHAR(14)
	DECLARE @identity VARCHAR(14)
	DECLARE @MYSITEID VARCHAR(35)
BEGIN

	if(@SITEID='##')begin
		SET @SITEID = ''
	end
	if(@LIBELLE = '##')begin
		SET @LIBELLE = ''
	end
	if(@ADRESSE = '##')begin
		SET @ADRESSE = ''
	end

	IF EXISTS (SELECT * FROM BATIMENT WHERE BATIMENTID = @LIBELLE AND SITEID=@SITEID) BEGIN
			SET @ID=(SELECT TOP(1) BATIMENTID FROM BATIMENT  WHERE BATIMENTID = @LIBELLE AND SITEID=@SITEID)
			SET @ID = @ID+',0,0'
		END
	ELSE
	 BEGIN
	   EXEC PS_SITE 0,'',@SITEID,@MYSITEID OUTPUT
		IF @MYSITEID IS NOT NULL AND LTRIM(@MYSITEID) IS NOT NULL AND @MYSITEID<>'' BEGIN
			IF EXISTS (SELECT TOP(1) * FROM BATIMENT WHERE UPPER(LIBELLE) = UPPER(@LIBELLE) AND SITEID=@MYSITEID) BEGIN
				SET @ID = (SELECT TOP(1) BATIMENTID FROM BATIMENT WHERE UPPER(LIBELLE) = UPPER(@LIBELLE) AND SITEID=@MYSITEID)
				SET @ID= @ID+',0,0'
			END
			ELSE
				BEGIN
				IF (@LIBELLE IS NOT NULL) AND LTRIM(@LIBELLE) IS NOT NULL AND LTRIM(@LIBELLE)<>''
				BEGIN
					INSERT INTO SEQ_IDENTITY(libelle) VALUES ('OK')
					SET @identity = (SELECT @@IDENTITY AS ID)
					SET @flag = (SELECT SUBSTRING(version, 1, 3) FROM version_sfw)
					SET @ID = @flag + @identity
					INSERT INTO BATIMENT(BATIMENTID,LIBELLE,SITEID,DATECREATION,DATEMAJ,ADRESSE) values(@ID,@LIBELLE,@MYSITEID,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,@ADRESSE)
					SET @ID=@ID+ ',1,0'
				END
				ELSE BEGIN
				    SET @ID='VPARDEFAUT,0,0'
				END
			END
		END
	END
END

GO
------------------------------------------------------------------------------------------
IF OBJECT_ID('dbo.PS_ETAGE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ETAGE;
GO

CREATE PROCEDURE dbo.PS_ETAGE
	@flagin INT,
	@champctrl varchar(80),
	@batimentid varchar(35),
	@libelle VARCHAR(40),
	@ID VARCHAR(18) OUTPUT

AS
	DECLARE @flag VARCHAR(14)
	DECLARE @identity VARCHAR(14)
	DECLARE @libel VARCHAR(40)
	DECLARE @nbupdate int
	DECLARE @nbinsert int
BEGIN
	Set @nbupdate = 0
	Set @nbinsert = 0
	IF (@libelle IS NOT NULL AND LTRIM(@libelle) IS NOT NULL  AND LTRIM(@libelle)<>'') BEGIN
		IF EXISTS (SELECT * FROM ETAGES WHERE ETAGEID = @libelle)
			BEGIN
				Set @ID=@libelle +',0,0'
			END
		ELSE
			BEGIN
			IF EXISTS (SELECT TOP(1) * FROM ETAGES WHERE UPPER(ETAGE) = UPPER(@libelle) AND BATIMENTID=@batimentid)
			BEGIN
				SET @ID=(SELECT TOP(1) ETAGEID FROM ETAGES WHERE UPPER(ETAGE) = UPPER(@libelle) AND BATIMENTID=@batimentid)
				SET @ID = @ID + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
			END
			ELSE BEGIN
				 IF (@libelle IS NOT NULL) AND LTRIM(@libelle) IS NOT NULL AND LTRIM(@libelle)<>'' BEGIN
					INSERT INTO SEQ_IDENTITY(libelle) VALUES ('OK')
					SET @identity = (SELECT @@IDENTITY AS ID)
					SET @flag = (SELECT SUBSTRING(version, 1, 3) FROM version_sfw)
					SET @ID = @flag + @identity
					INSERT INTO ETAGES (ETAGEID,ETAGE,BATIMENTID,DATECREATION,DATEMAJ) VALUES (@ID,@libelle,@batimentid,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
					SET @nbinsert=@nbinsert+1;
					SET @ID = @ID + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
				 END
				 ELSE
					BEGIN
						SET @ID = 'VPARDEFAUT' + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
				 END
			END
		END
	END
	ELSE BEGIN
	SET @ID = 'VPARDEFAUT,0,0'
	END
END

GO

---------------------------------------------------------------------------------------------
IF OBJECT_ID('dbo.PS_SALLE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_SALLE;
GO

CREATE PROCEDURE dbo.PS_SALLE
	@flagin INT,
	@champctrl varchar(80),
	@SITEID VARCHAR(35),
	@BATIMENTID varchar(35),
	@LIBELLE varchar(35),
	@PORTE_CLE varchar(50),
	@PORTE_OPTION varchar(300),
	@NOSALLE varchar(15),
	@TELEPHONE varchar(35),
	@ID VARCHAR(18) OUTPUT
AS
	DECLARE @flag VARCHAR(14)
	DECLARE @identity VARCHAR(14)
	DECLARE @MYSITEID VARCHAR(35)
	DECLARE @mynosalle VARCHAR(15)
	DECLARE @mysortorder INT
	DECLARE @libbatiment varchar(35)
	DECLARE @nbupdate int
	DECLARE @nbinsert int
	BEGIN

	if(@SITEID='##')begin
		SET @SITEID = ''
	end
	if(@LIBELLE = '##')begin
		SET @LIBELLE = ''
	end
	if(@BATIMENTID = '##')begin
		SET @BATIMENTID = ''
	end
	IF EXISTS (SELECT * FROM SALLE WHERE UPPER(LIBELLE) = UPPER(@LIBELLE) AND UPPER(BATIMENTID)=UPPER(@BATIMENTID) ) BEGIN
			SET @ID=(SELECT TOP(1) CODESALLE FROM SALLE  WHERE UPPER(LIBELLE) = UPPER(@LIBELLE) AND UPPER(BATIMENTID)=UPPER(@BATIMENTID) )
			SET @ID = @ID+',0,0'
	END ELSE BEGIN
		IF EXISTS (SELECT * FROM SALLE WHERE CODESALLE = @LIBELLE ) BEGIN
				SET @ID=(SELECT TOP(1) CODESALLE FROM SALLE  WHERE CODESALLE = @LIBELLE)
				SET @ID = @ID+',0,0'
		END
		ELSE
		 BEGIN
			EXEC PS_SITE 0,'',@SITEID,@MYSITEID OUTPUT
			SET @libbatiment=@batimentid
			EXEC PS_BATIMENT 1,'',@siteid,@libbatiment,'',@batimentid OUTPUT
			SET @nbupdate = @nbupdate + CAST( (select Data from Split(@batimentid,',') WHERE id = 3) as int)
			SET @nbinsert = @nbinsert + CAST( (select Data from Split(@batimentid,',') WHERE id = 2) as int)
			SET @batimentid = (select Data from Split(@batimentid,',') WHERE id = 1)
			IF (@LIBELLE IS NOT NULL) AND LTRIM(@LIBELLE) IS NOT NULL AND LTRIM(@LIBELLE)<>''
				BEGIN
					INSERT INTO SEQ_IDENTITY(libelle) VALUES ('OK')
					SET @identity = (SELECT @@IDENTITY AS ID)
					SET @flag = (SELECT SUBSTRING(version, 1, 3) FROM version_sfw)
					SET @ID = @flag + @identity
					SET @mysortorder=(SELECT ISNULL(MAX(SORTORDER),0)+1 FROM SALLE )
					IF @nosalle IS NULL BEGIN
						SET @mynosalle=(SELECT ISNULL(MAX(SORTORDER),0)+1 mynosalle FROM SALLE)
					END	ELSE BEGIN
						set @mynosalle=@nosalle
					END
					INSERT INTO SALLE (CODESALLE,LIBELLE,SITEID,BATIMENTID,SORTORDER,NOSALLE,TELEPHONE,PORTE_CLE,PORTE_OPTION,DATECREATION,DATEMAJ) VALUES (@ID,@LIBELLE,@MYSITEID,@batimentid,@mysortorder,@mynosalle,@telephone,@porte_cle,@porte_option,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
					INSERT INTO AMENAGSALLE (CODESALLE,CODEAMENAGEMENT,DATEMAJ,DATECREATION) VALUES(@ID,'VPARDEFAUT',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP)
					SET @ID=@ID+ ',1,0'
				END
				ELSE BEGIN
						SET @ID='VPARDEFAUT,0,0'
			END

		END
	END
END

GO
------------------------------------------------------------------------------------------

IF OBJECT_ID('dbo.PS_BUREAUX', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_BUREAUX;
GO

CREATE PROCEDURE dbo.PS_BUREAUX
	@flagin INT,
	@champctrl varchar(80),
	@etageid VARCHAR(14),
	@bureau VARCHAR(35),
	@ID VARCHAR(18) OUTPUT

AS

	DECLARE @nbupdate int
	DECLARE @nbinsert int
	DECLARE @flag VARCHAR(14)
	DECLARE @identity VARCHAR(14)
	DECLARE @TMP INT

BEGIN
 SET @nbinsert=0
 SET @nbupdate=0

 SET @TMP = (SELECT COUNT(*) FROM BUREAUX WHERE BUREAUID = @bureau)
 IF @TMP>0 BEGIN
	SET @ID = @bureau + ',0,0'
END
 ELSE BEGIN
	SET @TMP = (SELECT COUNT(*) FROM BUREAUX WHERE UPPER(BUREAU) = UPPER(@bureau) AND ETAGEID=@etageid)
	IF @TMP>0 BEGIN
		SET @ID = (SELECT TOP 1 BUREAUID FROM BUREAUX WHERE UPPER(BUREAU) = UPPER(@bureau) AND ETAGEID=@etageid)
		Set @ID = @ID + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
	END
  ELSE BEGIN
		IF ((@bureau IS NOT NULL)) AND (LTRIM(@bureau) <> '') BEGIN
			INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
			SET @identity = (SELECT @@IDENTITY AS ID)
			SET @flag = (SELECT SUBSTRING(version, 1, 3) FROM version_sfw)
			SET @ID = @flag + @identity
			INSERT INTO BUREAUX (BUREAUID,BUREAU,ETAGEID,DATECREATION,DATEMAJ) VALUES (@ID,@bureau,@etageid,current_timestamp,current_timestamp)
			SET @nbinsert = @nbinsert + 1
			Set @ID = @ID + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
		END
		ELSE BEGIN
			Set @ID ='VPARDEFAUT,' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
		END
	END
 END

END

GO


--------------------------------------------------------------------------------------------------------------



IF OBJECT_ID('dbo.PS_CIVILITE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_CIVILITE;
GO

CREATE PROCEDURE dbo.PS_CIVILITE
	@flagin INT,
	@champctrl varchar(80),
	@civilite VARCHAR(30),
	@libellecourt VARCHAR(5),
	@ID varchar(18) OUTPUT
AS
	DECLARE @flag VARCHAR(14)
	DECLARE @identity VARCHAR(14)
BEGIN
	IF ISNUMERIC(@civilite)=1 AND EXISTS (SELECT * FROM civilite WHERE codecivilite = CAST(@civilite AS INT)) BEGIN
		SET @ID = @civilite + ',0,0'
	END
	ELSE BEGIN
		IF ((@civilite IS NULL) OR LTRIM(@civilite) = '') AND ((@libellecourt IS NULL) OR LTRIM(@libellecourt) = '') BEGIN
			SET @ID = '0,0,0'
		END
		ELSE BEGIN
			--SET @civilite = UPPER(@civilite)
			--SET @libellecourt = UPPER(@libellecourt)
			IF EXISTS (SELECT * FROM civilite WHERE (UPPER(civilite) = UPPER(@civilite) OR UPPER(libellecourt) = UPPER(@libellecourt))) BEGIN
				SET @ID = (SELECT TOP 1 CAST(codecivilite AS VARCHAR) FROM civilite WHERE UPPER(civilite) = UPPER(@civilite) OR UPPER(libellecourt) = UPPER(@libellecourt))
				SET @ID = @ID + ',0,0'
			END
			ELSE BEGIN
				IF EXISTS (SELECT * FROM civilite WHERE UPPER(civilite) =UPPER(@civilite)) BEGIN
					SET @ID = (SELECT TOP 1 CAST(codecivilite AS VARCHAR) FROM civilite WHERE UPPER(civilite) = UPPER(@civilite))
					--UPDATE civilite SET libellecourt = @libellecourt, datemaj = CURRENT_TIMESTAMP WHERE codecivilite = CAST (@ID AS INT)
					SET @ID = @ID + ',0,1'
				END
				ELSE BEGIN
					IF EXISTS (SELECT * FROM civilite WHERE UPPER(libellecourt) =  UPPER(@libellecourt)) BEGIN
						SET @ID = (SELECT TOP 1 CAST(codecivilite AS VARCHAR) FROM civilite WHERE UPPER(libellecourt) = UPPER(@libellecourt))
						--UPDATE civilite SET civilite = @civilite, datemaj = CURRENT_TIMESTAMP WHERE codecivilite = CAST (@ID AS INT)
						SET @ID = @ID + ',0,1'
					END
					ELSE BEGIN
						INSERT INTO SEQ_IDENTITY(libelle) VALUES ('OK')
						SET @identity = (SELECT @@IDENTITY AS ID)
						SET @flag = (SELECT SUBSTRING(version, 1, 3) FROM version_sfw)
						SET @ID = @flag + @identity

						INSERT INTO civilite(codecivilite, civilite, libellecourt, datecreation, datemaj)
							VALUES(CAST(@ID AS INT), @civilite, @libellecourt, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
						SET @ID = @ID + ',1,0'
					END
				END
			END
		END
	END
END

GO

---------------------------------------------------------------------------------------------------
IF OBJECT_ID('dbo.PS_FONCTION', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_FONCTION;
GO

CREATE PROCEDURE dbo.PS_FONCTION
	@flagin INT,
	@champctrl varchar(80),
	@libelle VARCHAR(30),
	@ID varchar(18) OUTPUT
AS
	DECLARE @flag VARCHAR(14)
	DECLARE @identity VARCHAR(14)

BEGIN
	IF ISNUMERIC(@libelle) = 1 AND EXISTS (SELECT * FROM fonction WHERE codefonction = CAST(@libelle AS INT)) BEGIN
		SET @ID = @libelle + ',0,0'
	END
	ELSE BEGIN
		IF EXISTS (SELECT * FROM fonction WHERE libelle = @libelle) BEGIN
			SET @ID = CAST((SELECT top 1 CODEFONCTION FROM fonction WHERE libelle = @libelle) as varchar) + ',0,0'
		END
		ELSE BEGIN
			IF (@libelle IS NULL) OR LTRIM(@libelle) = '' BEGIN
				SET @ID = '0,0,0'
			END
			ELSE BEGIN
				SET @libelle = UPPER(@libelle)
				IF EXISTS (SELECT * FROM fonction WHERE UPPER(libelle) = @libelle ) BEGIN
					SET @ID = (SELECT TOP 1 CONVERT(VARCHAR,codefonction) FROM fonction WHERE UPPER(libelle) = @libelle)
					SET @ID = @ID + ',0,0'
				END
				ELSE BEGIN
					INSERT INTO SEQ_IDENTITY(libelle) VALUES ('OK')
					SET @identity = (SELECT @@IDENTITY AS ID)
					SET @flag = (SELECT SUBSTRING(version, 1, 3) FROM version_sfw)
					SET @ID = @flag + @identity

					INSERT INTO FONCTION(codefonction, libelle, datecreation, datemaj)
						VALUES(@ID , @libelle, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
					SET @ID = @ID + ',1,0'
				END
			END
		END
	END
END

GO
-----------------------------------------------------------------------------------------------------------

IF OBJECT_ID('dbo.PS_SECRETARIAT', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_SECRETARIAT;
GO

CREATE PROCEDURE dbo.PS_SECRETARIAT

	@IDRES VARCHAR(14),
	@IDRESAJOINDRE VARCHAR(14),
	@insertion int output

AS

BEGIN

	IF not EXISTS (SELECT * FROM SECRETARIAT WHERE RESIDANTID = @IDRES and RESIDANTID2 = @IDRESAJOINDRE) BEGIN
		INSERT INTO SECRETARIAT(RESIDANTID,RESIDANTID2,RELATION,DATECREATION,DATEMAJ)
		VALUES(@IDRES,@IDRESAJOINDRE,'A JOINDRE',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP)
		SET @insertion = @insertion+1
	END

END

GO

------------------------------
IF OBJECT_ID('dbo.PS_RESIDANTS', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_RESIDANTS;
GO

CREATE PROCEDURE dbo.PS_RESIDANTS
	@flagin int,
	@champctrl varchar(80),
	@societe varchar(35),
	@civilite varchar(30),
	@nomjeunefille varchar(35),
	@nom varchar(35),
	@prenom varchar(35),
	@fonction varchar(35),
	@telephone varchar(20),
	@email varchar(150),
	@gsm varchar(20),
	@fax varchar(20),
	@matricule varchar(150),
	--@photo varchar(max),
	@persoadresse varchar(max),
	@persocp varchar(10),
	@persoville varchar(35),
	@persoprovince varchar(35),
	@persopays varchar(35),
	@persotelephone varchar(20),
	@thepassword varchar(250),
	@thelogin varchar(50),
	@site varchar(40),
	@service varchar(60),
	@departement varchar(40),
	@batiment varchar(35),
	@etage varchar(7),
	@bureau varchar(15),
	@codeacces varchar(24),
	@boitepostale varchar(7),
	@refimportation varchar(48),
	--Secrétariat
	@matriculeAJ varchar(50),
	@prenomAJ varchar(35),
	@nomAJ varchar(35),
	@telephoneAJ varchar(20),
	@candidatmailing varchar(2),
	@vip int,
	--Flag
	--@flagsuppression varchar(1),
	@usertype int,
	@ID VARCHAR(18) OUTPUT

AS
	DECLARE @identity VARCHAR(14)
	DECLARE @flag VARCHAR(14)
	DECLARE @myid VARCHAR(14)
	DECLARE @societeid varchar(40)
	DECLARE @fonctionid varchar(48)
	DECLARE @departementid varchar(40)
	DECLARE @serviceid varchar(40)
	DECLARE @civiliteid varchar(18)
	DECLARE @natureid varchar(14)
	DECLARE @libcodeacces varchar(30)
	DECLARE @nationaliteid varchar(14)
	DECLARE @siteid varchar(14)
	DECLARE @vehiculeid varchar(14)
	DECLARE @ResIdAj varchar(14)
    DECLARE @locid varchar(14)
	DECLARE @nbupdate int
	DECLARE @nbinsert int
	DECLARE @TMP int
	DECLARE @loc_thelogin varchar(50)
	DECLARE @loc_thepassword varchar(250)
	DECLARE @interdit varchar(1)
	DECLARE @habilitationvisite varchar(1)
	DECLARE @externalid varchar(24)
	DECLARE @listerouge varchar(1)
	DECLARE @isextern varchar(1)
	DECLARE @isresident varchar(1)
	DECLARE @planid varchar(14)
	DECLARE @batimentid varchar(18)
	DECLARE @etageid varchar(18)
	DECLARE @bureauid varchar(18)
	DECLARE @libnom varchar(35)
	DECLARE @libprenom varchar(35)
	DECLARE @libnomprenom varchar(70)
	DECLARE @libetage varchar(7)
	DECLARE @libbatiment varchar(35)
	DECLARE @libservice varchar(60)
	DECLARE @libsite varchar(35)
	DECLARE @libdepartement varchar(40)
	DECLARE @libsociete varchar(35)
	DECLARE @libfonction varchar(35)
	DECLARE @libbureau varchar(35)
	DECLARE @libcivilite varchar(30)
	DECLARE @isactif varchar(1)
	DECLARE @libmatricule varchar(150)
	DECLARE @libnomjeunefille varchar(35)
	DECLARE @libtelephone varchar(20)
	DECLARE @libemail varchar(150)
	DECLARE @libgsm varchar(20)
	DECLARE @libfax varchar(20)
	--DECLARE @libphoto varchar(150)
	DECLARE @libpersoadresse varchar(150)
	DECLARE @libpersocp varchar(9)
	DECLARE @libpersoville varchar(50)
	DECLARE @libpersoprovince varchar(50)
	DECLARE @libpersopays varchar(35)
    DECLARE @libpersotelephone varchar(20)
	DECLARE @libboitepostale varchar(10)
	DECLARE @librefimportation varchar(48)
	DECLARE @libcandidatmailing varchar(1)
	DECLARE @libmatriculeAJ varchar(50)
	DECLARE @libprenomAJ varchar(35)
	DECLARE @libnomAJ varchar(35)
	DECLARE @libtelephoneAJ varchar(20)
BEGIN
	SET @nbupdate = 0
	SET @nbinsert = 0
		-- valeurs par défaut des champs dans residant
	SET @isactif='1'
    SET @interdit='0'
    SET @habilitationvisite='1'
    SET @externalid='VPARDEFAUT'
    SET @listerouge='0'
    SET @isextern='0'
    SET @isresident='1'
    SET @planid='VPARDEFAUT'
	-- Initiallisation
	SET @libcandidatmailing=@candidatmailing
	SET @libnom=UPPER(@nom)
	SET @libprenom=@prenom
	SET @loc_thelogin=@thelogin
	SET @loc_thepassword=@thepassword
	SET @libmatricule=@matricule
	SET @libcivilite=@civilite
	SET @libfonction=@fonction
	SET @libsite=@site
	SET @libsociete=@societe
	SET @libdepartement=@departement
	SET @libservice=@service
	SET @libbatiment=@batiment
	SET @libetage=@etage
	SET @libbureau=@bureau
	SET @libpersopays=@persopays
	SET @libcodeacces=@codeacces
    SET @libnomjeunefille=@nomjeunefille
	SET @libtelephone= @telephone
	SET @libemail=@email
	SET @libgsm=@gsm
	SET @libfax=@fax
	--SET @libphoto=@photo
	SET @libpersoadresse=@persoadresse
	SET @libpersocp=@persocp
	SET @libpersoville=@persoville
	SET @libpersoprovince=@persoprovince
    SET @libpersopays=@persopays
	SEt @libpersotelephone=@persotelephone
	SET @libboitepostale=@boitepostale
	SET @librefimportation=@refimportation

	SET @libnomaj=@nomAj
	SET @libprenomAJ=@prenomAj
	SET @libmatriculeAJ=@matriculeAJ
	SET @libtelephoneAJ=@telephoneAJ

	IF @libnom='##' BEGIN
		SET @libnom=''
	END
	IF @libprenom='##' BEGIN
		SET @libprenom=''
	END
	IF @loc_thelogin='##' BEGIN
		SET @loc_thelogin=''
	END
	IF @loc_thepassword='##' BEGIN
		SET @loc_thepassword=''
	END
	IF @libmatricule='##' BEGIN
		SET @libmatricule=''
	END
	IF @libcivilite='##' BEGIN
		SET @libcivilite=''
	END
	IF @libfonction='##' BEGIN
		SET @libfonction=''
	END
	IF @libsite='##' BEGIN
		SET @libsite=''
	END
	IF @libsociete='##' BEGIN
		SET @libsociete=''
	END
	IF @libdepartement='##' BEGIN
		SET @libdepartement=''
	END
	IF @libservice='##' BEGIN
		SET @libservice=''
	END
	IF @libbatiment='##' BEGIN
		SET @libbatiment=''
	END
	IF @libetage='##' BEGIN
		SET @libetage=''
	END
	IF @libbureau='##' BEGIN
		SET @libbureau=''
	END
	IF @libpersopays='##' BEGIN
		SET @libpersopays=''
	END
	IF @libemail='##' BEGIN
		SET @libemail=''
	END
	IF @libcodeacces='##' BEGIN
		SET @libcodeacces=''
	END
	IF @librefimportation='##' BEGIN
		SET @librefimportation=''
	END
	IF @libnomAJ='##' BEGIN
		SET @libnomAJ=''
	END
	IF @libprenomAJ='##' BEGIN
		SET @libprenomAJ=''
	END
	IF @libmatriculeAJ='##' BEGIN
		SET @libmatriculeAJ=''
	END
	IF @libtelephoneAJ='##' BEGIN
		SET @libtelephoneAJ=''
	END

	SET @libnomprenom=@libnom+' '+ISNULL(@libprenom,'')

    IF @libpersopays='' OR LTRIM(@libpersopays) IS NULL OR LTRIM(@libpersopays)='' BEGIN
		SET @libpersopays = (SELECT LIBELLE FROM PAYS WHERE PAYSID='VPARDEFAUT')
	END

	--
	IF @loc_thelogin IS NULL or LTRIM(@loc_thelogin)='' BEGIN
		SET @loc_thelogin=@libmatricule
	END
	IF @loc_thepassword IS NULL or LTRIM(@loc_thepassword)='' BEGIN
		SET @loc_thepassword=@libmatricule
	END
	IF @loc_thelogin IS NULL or LTRIM(@loc_thelogin)='' BEGIN
		SET @loc_thelogin=UPPER(@nom)
	END
	IF @loc_thepassword IS NULL or LTRIM(@loc_thepassword)='' BEGIN
		SET @loc_thepassword=@prenom
	END
	IF @loc_thelogin IS NULL or LTRIM(@loc_thelogin)='' BEGIN
		SET @loc_thelogin='XXX'
	END
	IF @loc_thepassword IS NULL or LTRIM(@loc_thepassword)='' BEGIN
		SET @loc_thepassword='XXX'
	END
	IF @libcandidatmailing='##' or (@libcandidatmailing<>'1' and  @libcandidatmailing<>'0') BEGIN
		SET @libcandidatmailing=''
	END

	-- Civilite check
	EXEC PS_CIVILITE 0,'',@libcivilite,@libcivilite, @civiliteid OUTPUT
	SET @nbupdate = @nbupdate + CAST( (select Data from Split(@civiliteid,',') WHERE id = 3) as int)
	SET @nbinsert = @nbinsert + CAST( (select Data from Split(@civiliteid,',') WHERE id = 2) as int)
	SET @civiliteid = (select Data from Split(@civiliteid,',') WHERE id = 1)

	IF @civiliteid=0 BEGIN
		SET @libcivilite = (SELECT CIVILITE FROM CIVILITE WHERE CODECIVILITE=0)
	END

	-- Fonction check
	EXEC PS_FONCTION 1,'',@libfonction, @fonctionid OUTPUT
	SET @nbupdate = @nbupdate + CAST( (select Data from Split(@fonctionid,',') WHERE id = 3) as int)
	SET @nbinsert = @nbinsert + CAST( (select Data from Split(@fonctionid,',') WHERE id = 2) as int)
	SET @fonctionid = (select Data from Split(@fonctionid,',') WHERE id = 1)

	IF @fonctionid=0 BEGIN
		SET @libfonction = (SELECT LIBELLE FROM FONCTION WHERE CODEFONCTION=0)
	END

	-- Site check
	EXEC PS_SITE 0,'',@libsite,@siteid output
	--IF @siteid='VPARDEFAUT' BEGIN
	--   SET @libsite = (SELECT LIBELLE FROM SITE WHERE SITEID='VPARDEFAUT')
--	END
    SET @libsite=(SELECT LIBELLE FROM SITE WHERE SITEID=@siteid)
	-- Societe check
	EXEC PS_SOCIETE 1,'','',@libsociete,'','','','','','','','','','','','1', @societeid OUTPUT
	SET @nbupdate = @nbupdate + CAST( (select Data from Split(@societeid,',') WHERE id = 3) as int)
	SET @nbinsert = @nbinsert + CAST( (select Data from Split(@societeid,',') WHERE id = 2) as int)
	SET @societeid = (select Data from Split(@societeid,',') WHERE id = 1)

	IF @societeid='VPARDEFAUT' BEGIN
		SET @libsociete = (SELECT NOM FROM SOCIETE WHERE SOCIETEID='VPARDEFAUT')
	END

	-- Departement check
	EXEC PS_DEPARTEMENT 1,'',@societeid,@libdepartement,@departementid OUTPUT
	SET @nbupdate = @nbupdate + CAST( (select Data from Split(@departementid,',') WHERE id = 3) as int)
	SET @nbinsert = @nbinsert + CAST( (select Data from Split(@departementid,',') WHERE id = 2) as int)
	SET @departementid = (select Data from Split(@departementid,',') WHERE id = 1)

	IF @departementid='VPARDEFAUT' BEGIN
		SET @libdepartement = (SELECT LIBELLE FROM DEPARTEMENT WHERE DEPTID='VPARDEFAUT')
	END

	-- Service check
	EXEC PS_SERVICE 1,'',@departementid,@libservice,@serviceid OUTPUT
	SET @nbupdate = @nbupdate + CAST( (select Data from Split(@serviceid,',') WHERE id = 3) as int)
	SET @nbinsert = @nbinsert + CAST( (select Data from Split(@serviceid,',') WHERE id = 2) as int)
	SET @serviceid = (select Data from Split(@serviceid,',') WHERE id = 1)

	IF @serviceid='VPARDEFAUT' BEGIN
		SET @libservice = (SELECT LIBELLE FROM SERVICE WHERE SERVICEID='VPARDEFAUT')
	END

	-- Batiment check
	EXEC PS_BATIMENT 1,'',@siteid,@libbatiment,'',@batimentid OUTPUT
	SET @nbupdate = @nbupdate + CAST( (select Data from Split(@batimentid,',') WHERE id = 3) as int)
	SET @nbinsert = @nbinsert + CAST( (select Data from Split(@batimentid,',') WHERE id = 2) as int)
	SET @batimentid = (select Data from Split(@batimentid,',') WHERE id = 1)

	IF @batimentid='VPARDEFAUT' BEGIN
		SET @libbatiment = (SELECT LIBELLE FROM BATIMENT WHERE BATIMENTID='VPARDEFAUT')
	END

	-- Etage check
	EXEC PS_ETAGE 1,'',@batimentid,@libetage,@etageid OUTPUT
	SET @nbupdate = @nbupdate + CAST( (select Data from Split(@etageid,',') WHERE id = 3) as int)
	SET @nbinsert = @nbinsert + CAST( (select Data from Split(@etageid,',') WHERE id = 2) as int)
	SET @etageid = (select Data from Split(@etageid,',') WHERE id = 1)

	IF @etageid='VPARDEFAUT' BEGIN
		SET @libetage = (SELECT TOP 1 ETAGE FROM ETAGES WHERE ETAGEID='VPARDEFAUT' AND BATIMENTID=@batimentid)
	END

	-- bureau
	EXEC PS_BUREAUX 1,'',@etageid,@libbureau,@bureauid OUTPUT
	SET @nbupdate = @nbupdate + CAST( (select Data from Split(@bureauid,',') WHERE id = 3) as int)
	SET @nbinsert = @nbinsert + CAST( (select Data from Split(@bureauid,',') WHERE id = 2) as int)
	SET @bureauid = (select Data from Split(@bureauid,',') WHERE id = 1)

	IF @bureauid='VPARDEFAUT' BEGIN
		SET @libbureau = (SELECT BUREAU FROM BUREAUX WHERE BUREAUID='VPARDEFAUT')
	END

   IF (@libnom IS NOT NULL) AND LTRIM(@libnom) IS NOT NULL BEGIN



		SET @TMP = (SELECT COUNT(*) FROM RESIDANTS R WHERE
			  CASE
			  	  	WHEN  @champctrl='' AND UPPER(NOMPRENOM)=UPPER(@libnomprenom) THEN 1
					WHEN  @champctrl='NOMPRENOM' AND UPPER(NOMPRENOM)=UPPER(@libnomprenom) THEN 1
					WHEN  @champctrl='MATRICULE' AND ( (UPPER(NOMPRENOM)=UPPER(@libnomprenom) AND  (@libmatricule is null or @libmatricule='' )) OR (MATRICULE=@libmatricule)) THEN 1
					WHEN  @champctrl='BADGE' AND  ( (UPPER(NOMPRENOM)=UPPER(@libnomprenom) AND  (@libcodeacces is null or @libcodeacces='' )) OR (CODEACCES=@libcodeacces))   THEN 1
					WHEN  @champctrl='EMAIL' AND  ( (UPPER(NOMPRENOM)=UPPER(@libnomprenom) AND  (@libemail is null or @libemail='' )) OR (UPPER(EMAIL)=UPPER(@libemail)))  THEN 1
					ELSE 0
			  END=1)
		IF @TMP>0 BEGIN
			 SET @ID = (SELECT TOP 1 RESIDANTID FROM RESIDANTS R WHERE
			  CASE
			  	  	WHEN  @champctrl='' AND UPPER(NOMPRENOM)=UPPER(@libnomprenom) THEN 1
					WHEN  @champctrl='NOMPRENOM' AND UPPER(NOMPRENOM)=UPPER(@libnomprenom) THEN 1
					WHEN  @champctrl='MATRICULE' AND ( (UPPER(NOMPRENOM)=UPPER(@libnomprenom) AND  (@libmatricule is null or @libmatricule='' )) OR (MATRICULE=@libmatricule)) THEN 1
					WHEN  @champctrl='BADGE' AND  ( (UPPER(NOMPRENOM)=UPPER(@libnomprenom) AND  (@libcodeacces is null or @libcodeacces='' )) OR (CODEACCES=@libcodeacces))   THEN 1
					WHEN  @champctrl='EMAIL' AND  ( (UPPER(NOMPRENOM)=UPPER(@libnomprenom) AND  (@libemail is null or @libemail='' )) OR (UPPER(EMAIL)=UPPER(@libemail)))  THEN 1
					ELSE 0
			  END=1)

				IF @matricule<>'##' AND @matricule IS NOT NULL  BEGIN
					UPDATE RESIDANTS SET MATRICULE=@libmatricule,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @civilite<>'##'  AND @civilite IS NOT NULL BEGIN
					UPDATE RESIDANTS SET CIVILITE = @libcivilite,CODECIVILITE=@civiliteid,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @fonction<>'##'  AND @fonction IS NOT NULL BEGIN
					UPDATE RESIDANTS SET FONCTION = @libfonction,CODEFONCTION=@fonctionid,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @site<>'##' AND @site IS NOT NULL BEGIN
					UPDATE RESIDANTS SET site = @libsite,SITEID=@siteid,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @societe<>'##'  AND @societe IS NOT NULL BEGIN
					UPDATE RESIDANTS SET SOCIETE = @libsociete,SOCIETEID=@societeid,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @departement<>'##'  AND @departement IS NOT NULL BEGIN
					UPDATE RESIDANTS SET DEPARTEMENT = @libdepartement,DEPTID=@departementid,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @service<>'##'  AND @service IS NOT NULL BEGIN
					UPDATE RESIDANTS SET  SERVICE = @libservice,SERVICEID=@serviceid,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @batiment<>'##'  AND @batiment IS NOT NULL BEGIN
					UPDATE RESIDANTS SET BATIMENT = @libbatiment,BATIMENTID=@batimentid,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @etage<>'##' AND @etage IS NOT NULL BEGIN
					UPDATE RESIDANTS SET  ETAGE = @libetage,ETAGEID=@etageid,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @bureau<>'##' AND @bureau IS NOT NULL BEGIN
					UPDATE RESIDANTS SET BUREAU= @libbureau,BUREAUID=@bureauid,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @codeacces<>'##' AND @codeacces IS NOT NULL BEGIN
    				UPDATE RESIDANTS SET   CODEACCES =@libcodeacces,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @nomjeunefille<>'##'  AND @nomjeunefille IS NOT NULL BEGIN
				   UPDATE RESIDANTS SET NOMJEUNEFILLE = @libnomjeunefille,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @nom<>'##'  AND @nom IS NOT NULL BEGIN
				   UPDATE RESIDANTS SET NOM = @libnom,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @prenom<>'##'  AND @prenom IS NOT NULL BEGIN
				   UPDATE RESIDANTS SET PRENOM = @libprenom,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				--IF @nom<>'##' AND @prenom<>'##' AND @nom IS NOT NULL  AND @prenom IS NOT NULL BEGIN
				   UPDATE RESIDANTS SET NOMPRENOM = @libnomprenom,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				--END
				IF @telephone<>'##' AND @telephone IS NOT NULL BEGIN
				  UPDATE RESIDANTS SET TELEPHONE = @libtelephone,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @email<>'##' AND @email IS NOT NULL BEGIN
				   UPDATE RESIDANTS SET EMAIL = @libemail,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @gsm<>'##' AND @gsm IS NOT NULL BEGIN
				   UPDATE RESIDANTS SET GSM = @libgsm,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @fax<>'##' AND @fax IS NOT NULL  BEGIN
				   UPDATE RESIDANTS SET FAX = @libfax,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				--IF @photo<>'##' AND @photo IS NOT NULL  BEGIN
				  -- UPDATE RESIDANTS SET PHOTO = CONVERt(varbinary(max),@libphoto),DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				--END
				IF @persoadresse<>'##' AND @persoadresse IS NOT NULL BEGIN
				   UPDATE RESIDANTS SET persoadresse = @libpersoadresse,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @persocp<>'##' AND @persocp IS NOT NULL BEGIN
				  UPDATE RESIDANTS SET persocp = @libpersocp,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @persoville<>'##' AND @persoville IS NOT NULL BEGIN
				 UPDATE RESIDANTS SET persoville = @libpersoville,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @persoprovince<>'##'  AND @persoprovince IS NOT NULL BEGIN
				  UPDATE RESIDANTS SET persoprovince = @libpersoprovince,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @persopays<>'##'  AND @persopays IS NOT NULL BEGIN
				  UPDATE RESIDANTS SET persopays = @libpersopays,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @persotelephone<>'##'  AND @persotelephone IS NOT NULL BEGIN
				  UPDATE RESIDANTS SET persotelephone = @libpersotelephone,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @boitepostale<>'##'  AND @boitepostale IS NOT NULL BEGIN
				 UPDATE RESIDANTS SET boitepostale = @libboitepostale,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @refimportation<>'##'  AND @refimportation IS NOT NULL BEGIN
				 UPDATE RESIDANTS SET refimportation = @librefimportation,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				UPDATE RESIDANTS SET isactif = '1',DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				SET @nbupdate = @nbupdate+1
				IF (@candidatmailing='1' or @candidatmailing='0') BEGIN
					UPDATE RESIDANTS SET CANDIDATMAILING= @libcandidatmailing,DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @usertype IS NOT NULL BEGIN
					UPDATE RESIDANTS SET USERTYPE=@usertype, DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
				IF @vip IS NOT NULL BEGIN
					UPDATE RESIDANTS SET VIP=@vip, DATEMAJ=current_timestamp WHERE RESIDANTID=@ID
				END
		END
		ELSE BEGIN
			INSERT INTO SEQ_IDENTITY(libelle) VALUES ('OK')
			SET @identity = (SELECT @@IDENTITY AS ID)
			SET @flag = (SELECT SUBSTRING(version, 1, 3) FROM version_sfw)
			SET @ID = @flag + @identity

			IF @codeacces='##' BEGIN
				SET @libcodeacces=''
			END
			IF @nomjeunefille='##' BEGIN
				SET @libnomjeunefille=''
			END
			IF @telephone='##' BEGIN
			  SET @libtelephone=''
			END
			IF @email='##' BEGIN
				SET @libemail=''
			END
			IF @gsm='##' BEGIN
				SET @libgsm=''
			END
			IF @fax='##' BEGIN
				SET @libfax=''
			END
			--IF @photo='##' BEGIN
				--SET @libphoto=''
			--END
			IF @persoadresse='##' BEGIN
				SET @libpersoadresse=''
			END
			IF @persocp='##'BEGIN
			  SET @libpersocp=''
			END
			IF @persoville='##' BEGIN
				SET @libpersoville=''
			END
			IF @persoprovince='##' BEGIN
			  SET @libpersoprovince=''
			END
			IF @persopays='##' BEGIN
			  SET @libpersopays=''
			END
			IF @persotelephone='##' BEGIN
			  SET @libpersotelephone=''
			END
			IF @boitepostale='##'  BEGIN
				SET @libboitepostale=''
			END
			IF (@usertype is null) BEGIN
				SET @usertype=0
			END
			IF (@vip is null) BEGIN
				SET @vip=0
			END
			INSERT INTO RESIDANTS (RESIDANTID,SOCIETE,CIVILITE,NOMJEUNEFILLE,NOM ,PRENOM ,NOMPRENOM,FONCTION,TELEPHONE,EMAIL,GSM ,FAX ,MATRICULE,PERSOADRESSE,PERSOCP,PERSOVILLE,PERSOPROVINCE,PERSOPAYS,PERSOTELEPHONE ,THEPASSWORD ,THELOGIN ,SITE,SERVICE,DEPARTEMENT,BATIMENTID,BATIMENT,ETAGEID,ETAGE,BUREAUID,BUREAU,CODEACCES,BOITEPOSTALE,DATECREATION,DATEMAJ,SOCIETEID,CODEFONCTION,CODECIVILITE,SITEID,INTERDIT,HABILITATIONVISITE,EXTERNALID,LISTEROUGE,ISEXTERN,PLANID,DEPTID,SERVICEID,DEBUTINTERDIT,FININTERDIT,ISACTIF,REFIMPORTATION,CANDIDATMAILING,USERTYPE,VIP)
				VALUES(@ID,@libsociete,@libcivilite,@libnomjeunefille,@libnom ,@libprenom ,@libnomprenom,@libfonction,@libtelephone,@libemail,@libgsm ,@libfax ,@libmatricule,	@libpersoadresse,@libpersocp,@libpersoville,@libpersoprovince,@libpersopays,@libpersotelephone ,@loc_thepassword ,@loc_thelogin ,@libsite,@libservice,@libdepartement,@batimentid,@libbatiment,@etageid,@libetage,@bureauid,@libbureau,@libcodeacces,@libboitepostale,current_timestamp,current_timestamp,@societeid,@fonctionid,@civiliteid,@siteid,@interdit,@habilitationvisite,@externalid,@listerouge,@isextern,@planid,@departementid,@serviceid,CONVERT(DATETIME,CONVERT(VARCHAR,CURRENT_TIMESTAMP,103),103),current_timestamp+36500,@isactif,@librefimportation,'1',@usertype,@vip)
			IF (@libcandidatmailing IS NOT NULL) AND (@libcandidatmailing='0' OR @libcandidatmailing='1') BEGIN
                    UPDATE RESIDANTS SET CANDIDATMAILING=@candidatmailing WHERE RESIDANTID=@ID
            END

			SET @nbinsert = @nbinsert + 1
		END

		IF @nomAJ<>'##' AND @nomAJ IS NOT NULL AND LTRIM(@nomAJ) IS NOT NULL BEGIN
			SET @TMP = (SELECT COUNT(*) FROM RESIDANTS WHERE (nom= @nomAJ AND prenom = @prenomAJ AND matricule = @matriculeAJ AND (telephone = @telephoneAJ or gsm = @telephoneAJ)) or (nom= @nomAJ AND prenom = @prenomAJ) or (matricule = @matriculeAJ))
			IF @TMP>0 BEGIN
			   SET @ResIdAj = (SELECT TOP 1 residantid from RESIDANTS WHERE (nom= @nomAJ AND prenom = @prenomAJ AND matricule = @matriculeAJ AND (telephone = @telephoneAJ or gsm = @telephoneAJ)) or (nom= @nomAJ AND prenom = @prenomAJ) or (matricule = @matriculeAJ))
				EXEC PS_SECRETARIAT @ID,@ResIdAj,@nbinsert OUTPUT
				Set @ID = @ID + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
				--Set @ID = '1'
			END
			ELSE BEGIN
				--Set @ID = '0,' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
				update residants
				set cpnom = RTRIM(LTRIM(REPLACE(@matriculeAJ+ ' ' + @nomAJ+ ' ' + @prenomAJ+ ' ' + @telephoneAJ,'#','')))
				where residantid = @ID
				Set @ID =  @ID +','+ CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
				--Set @ID = '2'
			END
		END ELSE BEGIN
			Set @ID = @ID + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
		END
	END
	ELSE BEGIN
		Set @ID = '0,' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
		--Set @ID = '3'
	END
END

go


IF OBJECT_ID('dbo.PS_IDENTITES', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_IDENTITES;
GO

CREATE PROCEDURE dbo.PS_IDENTITES
	@flagin INT,
	@champctrl varchar(80),

	@typeidentite varchar(35),
	@delivrepar varchar(80),
	@finvalidite datetime,
	@numero varchar(20),
	@image image,
	@interlocuteurid varchar(14),

	@ID VARCHAR(18) OUTPUT
AS
	DECLARE @flag VARCHAR(14)
	DECLARE @identity VARCHAR(14)
	DECLARE @typeidentiteid int
	DECLARE @nbupdate int
	DECLARE @nbinsert int
BEGIN
	Set @nbupdate = 0
	Set @nbinsert = 0
	IF (@interlocuteurid IS NOT NULL) AND LTRIM(@interlocuteurid) IS NOT NULL AND LTRIM(@interlocuteurid)<>'' AND @numero is not null AND LTRIM(@numero)<>''	BEGIN
	set @typeidentiteid = (select top 1 typeidentiteid from typeidentite where upper(libelle) = upper(@typeidentite))
	if(@typeidentiteid is null and isnumeric(@typeidentite)=1)begin
		set @typeidentiteid = (select top 1 typeidentiteid from typeidentite where typeidentiteid = CAST(@typeidentite as int))
	END
	IF(@typeidentiteid IS NULL)BEGIN
		set @typeidentiteid = (select min(typeidentiteid) from typeidentite)
		set @typeidentiteid = @typeidentiteid - 1
		INSERT INTO typeidentite(typeidentiteid,libelle,datemaj,datecreation)
			VALUES(@typeidentiteid,@typeidentite,current_timestamp,current_timestamp)
		Set @nbinsert = @nbinsert + 1
	END

		if(exists(select top 1 * from identites where typeidentiteid = @typeidentiteid and interlocuteurid=@interlocuteurid))begin

			if(exists(select top 1 * from identites where typeidentiteid = @typeidentiteid and interlocuteurid=@interlocuteurid and numero = @numero))begin
				Set @ID = (select top 1 IDENTITEID from identites where typeidentiteid = @typeidentiteid and interlocuteurid=@interlocuteurid and numero = @numero)
				Set @ID = @ID + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
			END
			ELSE BEGIN
				update identites
				set delivrepar = @delivrepar,finvalidite = @finvalidite,numero = @numero,image=@image
				where typeidentiteid = @typeidentiteid
				and interlocuteurid=@interlocuteurid

				Set @ID = (select top 1 IDENTITEID from identites where typeidentiteid = @typeidentiteid and interlocuteurid=@interlocuteurid)
				Set @nbupdate = @nbupdate + 1
				Set @ID = @ID + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
			END
		END
		ELSE BEGIN
			IF(@flagin=1)BEGIN
				INSERT INTO SEQ_IDENTITY(libelle) VALUES ('OK')
				SET @identity = (SELECT @@IDENTITY AS ID)
				SET @flag = (SELECT SUBSTRING(version, 1, 3) FROM version_sfw)
				SET @ID = @flag + @identity

				INSERT INTO IDENTITES(typeidentiteid,delivrepar,finvalidite,numero,image,interlocuteurid,identiteid,datecreation,datemaj)
					VALUES(@typeidentiteid ,@delivrepar,@finvalidite,@numero,@image,@interlocuteurid,@ID,current_timestamp,current_timestamp)
				Set @nbinsert = @nbinsert + 1
				Set @ID = @ID + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
			END
			ELSE BEGIN
				SET @ID = '0,' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
			END
		END
	END
	ELSE BEGIN
		SET @ID = '0,' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
	END
END

GO
IF OBJECT_ID('dbo.PS_INTERLOCUTEUR', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_INTERLOCUTEUR;
GO

CREATE PROCEDURE dbo.PS_INTERLOCUTEUR
	@flagin INT,
	@champctrl varchar(80),

	@civilite VARCHAR(30),
	@nom VARCHAR(35),
	@prenom VARCHAR(34),
	@nomjeunefille VARCHAR(35),
	@datenaissance DATETIME,
	@lieunaissance VARCHAR(70),
	@pays VARCHAR(35),
	@societe VARCHAR(35),
	@fonction VARCHAR(35),
	@nature VARCHAR(35),
	@adresse VARCHAR(150),
	@codepostal VARCHAR(10),
	@ville VARCHAR(35),
	--@paysadresse VARCHAR(50),
	@refimportation VARCHAR(48),

	@immatriculation varchar(15),
	@telephone varchar(20),
	@email varchar(150),
	@gsm varchar(20),
	@fax varchar(20),
	@finvaliditeauto datetime,
	@datedernvisite datetime,

	@societe_adresse VARCHAR(150),
	@societe_siret VARCHAR(20),
	@societe_cp VARCHAR(10),
	@societe_ville VARCHAR(35),
	@societe_pays VARCHAR(35),
	--@statut VARCHAR(35),

	--@identiteid varchar(14),
	@typeidentiteid varchar(35),
	@delivrepar varchar(80),
	@numero varchar(20),
	@finvalidite datetime,
	--nationaliteid/paysid
	@nationalite varchar(50),

	@interdit varchar(1),
	@debutinterdit datetime,
	@fininterdit datetime,

	@ID VARCHAR(18) OUTPUT
AS
	DECLARE @flag VARCHAR(14)
	DECLARE @identity VARCHAR(14)
	DECLARE @societeid VARCHAR(18)
	DECLARE @fonctionid VARCHAR(18) --int
	DECLARE @civiliteid VARCHAR(18) --int
	DECLARE @natureid VARCHAR(18)
	DECLARE @nationaliteid VARCHAR(18)
	--<champctrl>NOMPRENOM,EMAIL,IMMATRICULATION</champctrl>

	DECLARE @nomprenom varchar(70)
	DECLARE @nbupdate int
	DECLARE @nbinsert int
	DECLARE @identitieid varchar(18)
	DECLARE @tmp int
	DECLARE @fininterdit2 datetime
	DECLARE @debutinterdit2 datetime
BEGIN
	--SET @nom = UPPER(@nom)
	--SET @nomjeunefille = UPPER(@nomjeunefille)
	--SET @lieunaissance = UPPER(@lieunaissance)
	--SET @adresse = UPPER(@adresse)
	--SET @paysnaissance = UPPER(@paysnaissance)
	--SET @paysadresse = UPPER(@paysadresse)

	SET @nbupdate = 0
	SET @nbinsert = 0

	SET @societeid = ''
	SEt @fonctionid = ''
	SET @civiliteid =''
	SET @natureid = ''
	SET @nationaliteid = ''

	if(@civilite='##')begin
		set @civilite=''
	end
	if(@nom='##')begin
		set @nom=''
	end
	if(@prenom='##')begin
		set @prenom=''
	end
	if(@nomjeunefille='##')begin
		set @nomjeunefille=''
	end
	if(@lieunaissance='##')begin
		set @lieunaissance = ''
	end
	if(@pays='##')begin
		set @pays = ''
	end
	if(@societe='##')begin
		set @societe=''
	end
	if(@fonction='##')begin
		set @fonction=''
	end
	if(@nature='##')begin
		set @nature=''
	end
	if(@adresse='##')begin
		set @adresse = ''
	end
	if(@codepostal='##')begin
		SET @codepostal = ''
	end
	if(@ville='##')begin
		SET @ville=''
	end
	if(@refimportation='##')begin
		SET @refimportation = ''
	end

	if(@immatriculation='##')begin
		set @immatriculation = ''
	end
	if(@telephone='##')begin
		SET @telephone = ''
	end
	if(@email='##')begin
		set @email=''
	end
	if(@gsm='##')begin
		set @gsm = ''
	end
	if(@fax='##')begin
		set @fax = ''
	end
	if(@societe_adresse='##')begin
		SET @societe_adresse = ''
	end
	if(@societe_siret='##')begin
		set @societe_siret = ''
	end
	if(@societe_cp='##')begin
		set @societe_cp=''
	end
	if(@societe_ville='##')begin
		set @societe_ville = ''
	end
	if(@societe_pays='##')begin
		set @societe_pays=''
	end
	if(@typeidentiteid='##')begin
		set @typeidentiteid=''
	end
	if(@delivrepar='##')begin
		set @delivrepar=''
	end
	if(@numero='##')begin
		set @numero =''
	end
	if(@nationalite='##')begin
		set @nationalite=''
	end
	if(@interdit='##')begin
		set @interdit=''
	end

	SET @nomprenom = LTRIM(@nom + ' ' + @prenom)

	EXEC PS_SOCIETE 1,'','',@societe,@societe_siret,'',@societe_adresse,@societe_cp,@societe_ville,@societe_pays,'','','','','','0', @societeid OUTPUT

	SET @societe = (SELECT nom FROM societe where societeid = (select Data from Split(@societeid,',') WHERE id = 1))

	SET @nbupdate = @nbupdate + CAST( (select Data from Split(@societeid,',') WHERE id = 3) as int)
	SET @nbinsert = @nbinsert + CAST( (select Data from Split(@societeid,',') WHERE id = 2) as int)
	SET @societeid = (select Data from Split(@societeid,',') WHERE id = 1)

	EXEC PS_FONCTION 0,'',@fonction, @fonctionid OUTPUT

	SET @fonction = (SELECT libelle FROM fonction where codefonction = CAST((select Data from Split(@fonctionid,',') WHERE id = 1) as int))

	SET @nbupdate = @nbupdate + CAST( (select Data from Split(@fonctionid,',') WHERE id = 3) as int)
	SET @nbinsert = @nbinsert + CAST( (select Data from Split(@fonctionid,',') WHERE id = 2) as int)
	SET @fonctionid = (select Data from Split(@fonctionid,',') WHERE id = 1)

	EXEC PS_CIVILITE 0,'',@civilite,@civilite, @civiliteid OUTPUT

	SET @civilite = (SELECT civilite FROM civilite where codecivilite = CAST((select Data from Split(@civiliteid,',') WHERE id = 1) as int))

	SET @nbupdate = @nbupdate + CAST( (select Data from Split(@civiliteid,',') WHERE id = 3) as int)
	SET @nbinsert = @nbinsert + CAST( (select Data from Split(@civiliteid,',') WHERE id = 2) as int)
	SET @civiliteid = (select Data from Split(@civiliteid,',') WHERE id = 1)

	EXEC PS_NATURE 0,'',@nature,'','',@interdit, @natureid OUTPUT

	SET @nbupdate = @nbupdate + CAST( (select Data from Split(@natureid,',') WHERE id = 3) as int)
	SET @nbinsert = @nbinsert + CAST( (select Data from Split(@natureid,',') WHERE id = 2) as int)
	SET @natureid = (select Data from Split(@natureid,',') WHERE id = 1)

	EXEC PS_PAYS 0,'LIBELLE',@pays,@pays,'',@nationalite, '', '','','','','','',@interdit,@debutinterdit,@fininterdit, '', '', '', '','','', @nationaliteid OUTPUT

	SET @nationalite = (SELECT libelle FROM pays where paysid = (select Data from Split(@nationaliteid,',') WHERE id = 1))

	SET @nbupdate = @nbupdate + CAST( (select Data from Split(@nationaliteid,',') WHERE id = 3) as int)
	SET @nbinsert = @nbinsert + CAST( (select Data from Split(@nationaliteid,',') WHERE id = 2) as int)
	SET @nationaliteid = (select Data from Split(@nationaliteid,',') WHERE id = 1)

	IF (@nomprenom IS NOT NULL) AND (@nomprenom<>'') BEGIN
		IF EXISTS (
		   select TOP(1) interlocuteurid FROM interlocuteur i WHERE
			  CASE
					WHEN  @champctrl='' AND UPPER(LTRIM(NOMPRENOM))=UPPER(@nomprenom) THEN 1
					WHEN  @champctrl='NOMPRENOM' AND UPPER(LTRIM(NOMPRENOM))=UPPER(@nomprenom) THEN 1
					WHEN  @champctrl='IMMATRICULATION' AND IMMATRICULATION=@immatriculation AND UPPER(LTRIM(NOMPRENOM))=UPPER(@nomprenom) THEN 1
					WHEN  @champctrl='EMAIL' AND UPPER(EMAIL)=UPPER(@email) AND UPPER(LTRIM(NOMPRENOM))=UPPER(@nomprenom) THEN 1
					ELSE 0
			  END=1)

			 BEGIN
				SET @ID=(select TOP(1) interlocuteurid FROM interlocuteur i WHERE UPPER(NOMPRENOM)=UPPER(@nomprenom)  AND
			  CASE
					WHEN  @champctrl='' THEN 1
					WHEN  @champctrl='NOMPRENOM' THEN 1
					WHEN  @champctrl='IMMATRICULATION' AND IMMATRICULATION=@immatriculation THEN 1
					WHEN  @champctrl='EMAIL' AND UPPER(EMAIL)=UPPER(@email) THEN 1
					ELSE 0
			  END = 1)

				EXEC PS_IDENTITES 1,'',@typeidentiteid,@delivrepar,@finvalidite,@numero,'',@ID,@identitieid OUTPUT

				SET @nbupdate = @nbupdate + CAST( (select Data from Split(@identitieid,',') WHERE id = 3) as int)
				SET @nbinsert = @nbinsert + CAST( (select Data from Split(@identitieid,',') WHERE id = 2) as int)
				SET @identitieid = (select Data from Split(@identitieid,',') WHERE id = 1)

				update INTERLOCUTEUR
				SET civilite = @civilite ,nom = @nom, prenom = @prenom ,nomjeunefille = @nomjeunefille,	datenaissance = @datenaissance,lieunaissance = @lieunaissance,pays_naissance = @pays,societe = @societe,fonction=@fonction,adresse = @adresse,codepostal = @codepostal,ville = @ville,refimportation = @refimportation,immatriculation = @immatriculation,telephone = @telephone,email=@email,gsm = @gsm,fax = @fax,datedernvisite=@datedernvisite,societeid=@societeid,codecivilite=CAST(@civiliteid as INT),codefonction=CAST(@fonctionid as INT),natureid=@natureid,nationaliteid=@nationaliteid
				WHERE interlocuteurid = @ID

				IF (@debutinterdit is not null) BEGIN
				update INTERLOCUTEUR SET debutinterdit = @debutinterdit where interlocuteurid=@ID
				END
				IF (@fininterdit is not null) BEGIN
				update INTERLOCUTEUR SET fininterdit = @fininterdit where interlocuteurid=@ID
				END
				IF (@finvaliditeauto is not null) BEGIN
				update INTERLOCUTEUR SET finvaliditeauto = @finvaliditeauto where interlocuteurid=@ID
				END
				IF (@interdit is not null) and (@interdit<>'') and @interdit<>'##' BEGIN
					update INTERLOCUTEUR SET interdit = @interdit where interlocuteurid=@ID
				END
				SET @nbupdate = @nbupdate+1

				Set @ID = @ID + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
		END
		ELSE BEGIN
			IF(@flagin = 1)BEGIN

				INSERT INTO SEQ_IDENTITY(libelle) VALUES ('OK')
				SET @identity = (SELECT @@IDENTITY AS ID)
				SET @flag = (SELECT SUBSTRING(version, 1, 3) FROM version_sfw)
				SET @ID = @flag + @identity

				EXEC PS_IDENTITES 1,'',@typeidentiteid,@delivrepar,@finvalidite,@numero,'',@ID,@identitieid OUTPUT

				SET @nbupdate = @nbupdate + CAST( (select Data from Split(@identitieid,',') WHERE id = 3) as int)
				SET @nbinsert = @nbinsert + CAST( (select Data from Split(@identitieid,',') WHERE id = 2) as int)
				SET @identitieid = (select Data from Split(@identitieid,',') WHERE id = 1)

				set @fininterdit2=@fininterdit
				set @debutinterdit2=@debutinterdit

				if(@debutinterdit2 is null) begin
					set @debutinterdit2 = CONVERT(DATETIME,CONVERT(VARCHAR,CURRENT_TIMESTAMP,103),103)
				end
				if(@fininterdit2 is null) begin
					set @fininterdit2 = CURRENT_TIMESTAMP + 36525
				end

				INSERT INTO interlocuteur(interlocuteurid, societeid, societe, codecivilite, civilite, nom, prenom, nomprenom, nomjeunefille, datenaissance, lieunaissance, pays_naissance, codefonction, fonction, natureid, nationaliteid, pays, adresse, codepostal, ville, pays_adresse, interdit, debutinterdit, fininterdit, datecreation, datemaj,immatriculation,telephone,email,gsm,fax,DATEDERNVISITE,FINVALIDITEAUTO)
					VALUES(@ID, @societeid, @societe, CAST(@civiliteid as INT), @civilite, @nom, @prenom, LTRIM(@nomprenom), @nomjeunefille, @datenaissance, @lieunaissance, @pays, CAST(@fonctionid as INT), @fonction, @natureid, @nationaliteid, @nationalite, @adresse, @codepostal, @ville, @pays, @interdit, @debutinterdit2, @fininterdit2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP,@immatriculation,@telephone,@email,@gsm ,@fax,@datedernvisite,@finvaliditeauto)
				SET @nbinsert = @nbinsert+1
				Set @ID = @ID + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
				--SET @ID = '@ID'
				--if(@nbinsert is null)begin
				--	set @nbinsert = -10
				--end
				--Set @ID = @ID + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
			END
			ELSE BEGIN
				SEt @ID = '0,'+ CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
			END
		END
	END
	ELSE BEGIN
		SEt @ID = '0,'+ CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
	END

	IF(@ID='' or @ID is null) BEGIN
		set @ID = '-1,0,0'
	END
END

GO


----------------------------------------------------------------------
IF OBJECT_ID('dbo.PS_VEHICULE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_VEHICULE;
GO

------------------------------
CREATE PROCEDURE dbo.PS_VEHICULE

	@residantid varchar(14),
	@immatriculation varchar(15),
	@marque varchar(20),
	@modele varchar(40),
	@datelimite datetime,
	@numeropass varchar(40),
	@ID VARCHAR(18) OUTPUT

As

	DECLARE @flag VARCHAR(14)
	DECLARE @identity VARCHAR(14)

BEGIN

	if(exists (select * from vehicule where immatriculation = @immatriculation)) begin
		SET @ID = (select top 1 vehiculeid from vehicule where immatriculation = @immatriculation)
		SET @ID = @ID + ',0,0'
	end
	else begin
		if LTRIM(@immatriculation) != '' begin
			INSERT INTO SEQ_IDENTITY(libelle) VALUES ('OK')
			SET @identity = (SELECT @@IDENTITY AS ID)
			SET @flag = (SELECT SUBSTRING(version, 1, 3) FROM version_sfw)
			SET @ID = @flag + @identity

			insert into vehicule(residantid,immatriculation,marque,modele,datelimite,numeropass,vehiculeid,DATECREATION,DATEMAJ) values(@residantid,@immatriculation,@marque,@modele,@datelimite,@numeropass,@ID,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP)
			SET @ID = @ID + ',1,0'
		END
		else BEGIN
		SET @ID='-1,0,0'
		end
	END
END

GO
----------------------------------------------------
IF OBJECT_ID('dbo.PS_TACHE_ORDER', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_TACHE_ORDER;
GO
CREATE PROCEDURE dbo.PS_TACHE_ORDER
AS
DECLARE @indice int
DECLARE @id INT
DECLARE @rg INT

BEGIN
 SET @INDICE=0
 DECLARE regle_curseur CURSOR
 FOR SELECT TACHEID, TACHE_RANG FROM TACHE WHERE ACTIF<>-2 ORDER BY TACHE_RANG ASC
 OPEN regle_curseur
 FETCH NEXT FROM regle_curseur
 INTO @id,@rg
 WHILE @@FETCH_STATUS = 0
 BEGIN
  UPDATE TACHE SET TACHE_RANG=@INDICE WHERE TACHEID=@id
  SET @indice=@indice+1
  FETCH NEXT FROM regle_curseur
  INTO @id,@rg
 END
 CLOSE regle_curseur
 DEALLOCATE regle_curseur
END
GO

IF OBJECT_ID('dbo.PS_TACHE_UPDOWN', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_TACHE_UPDOWN;
GO
CREATE PROCEDURE dbo.PS_TACHE_UPDOWN
@UPDOWN_ID INT,
@SENS Varchar(14)
AS
DECLARE @rg INT
DECLARE @rulecount INT
BEGIN
 SET @rulecount=(SELECT COUNT(*) FROM TACHE WHERE ACTIF<>-2 )

 SET @rg = (SELECT TACHE_RANG FROM TACHE WHERE TACHEID=@UPDOWN_ID )

 IF (@SENS='UP') AND (@rg>0)  BEGIN
    UPDATE TACHE SET TACHE_RANG=@rg WHERE TACHE_RANG=@rg-1
    UPDATE TACHE SET TACHE_RANG=@rg-1 WHERE TACHEID=@UPDOWN_ID
 END
 ELSE IF (@SENS='DOWN') AND (@rg<@rulecount-1)
 BEGIN
   UPDATE TACHE SET TACHE_RANG=@rg WHERE TACHE_RANG=@rg+1
   UPDATE TACHE SET TACHE_RANG=@rg+1 WHERE TACHEID=@UPDOWN_ID
 END
END

GO

IF OBJECT_ID('dbo.PS_TYPEVISITE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_TYPEVISITE;
GO

CREATE PROCEDURE dbo.PS_TYPEVISITE
	@flagin INTEGER,
	@champctrl varchar(80),
	@typevisiteid VARCHAR(40),
	@ID VARCHAR(14) OUTPUT

AS

BEGIN

	IF (@typevisiteid is not null) AND EXISTS (SELECT * FROM TYPEVISITE WHERE  CONVERT(VARCHAR,TYPEVISITEID) =@typevisiteid ) BEGIN
		SET @ID = @typevisiteid
	END
	ELSE BEGIN
		IF (@typevisiteid is not null) AND EXISTS (SELECT * FROM TYPEVISITE WHERE  UPPER(TYPEVISITE)= UPPER(@typevisiteid)) BEGIN
			SET @ID = (SELECT top 1 TYPEVISITEID FROM TYPEVISITE WHERE  UPPER(TYPEVISITE)= UPPER(@typevisiteid))
		END
		ELSE begin
				SET @ID = '0'
		END
	end
END

go
IF OBJECT_ID('dbo.PS_VISITES', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_VISITES;
GO

CREATE PROCEDURE dbo.PS_VISITES
	@flagin INT,
	@champctrl varchar(80),
	@nomint varchar(35),
	@prenomint varchar(35),
	@nomres varchar(35),
	@prenomres varchar(35),
	@societeresid varchar(35),
	@societevisit varchar(35),
	@ifonction varchar(35),
	@idatenaissance datetime,
	@ilieunaissance varchar(70),
	@ipays varchar(35),
	@inomjeunefille varchar(35),
	@vip int,
	@istatut varchar(35),
	@debutprevu datetime,
	@finprevu datetime,
	@hdebutprevu datetime,
	@hfinprevu datetime,
	@numerobadge varchar(200),
	@numerovisite int,
	@debutvisite datetime,
	@finvisite datetime,
	@hdebut datetime,
	@hfin datetime,
	@statutvisite varchar(50),
	@boite varchar(6),
	@casier varchar(6),
	@objet varchar(200),
	@piece varchar(20),
	@numero varchar(20),
	@validite datetime,
	@parking varchar(35),
	@immatriculation varchar(15),
	@observation varchar(200),
	@lieu varchar(50),
	@originevisite int,
	@marque varchar(20),
	@modele varchar(40),
	@preenreg int,
	@cle varchar(500),
	@site varchar(35),
	@LAST_ACTION VARCHAR(50),
	@RES_FINAL varchar(50),
	@RES_MOTEUR1 varchar(50),
	@RES_MOTEUR2 varchar(50),
	@RES_OS varchar(50),
	@INFO VARCHAR(50),
	@ALERTE VARCHAR(50),
	@PROFIL_CTRL_ID VARCHAR(4000),
	@PROFIL_CTRL2 VARCHAR(4000),
	@SIGNATURE_ENTREE VARCHAR(2),
	@SIGNATURE_SORTIE VARCHAR(2),
	@TYPEVISITEID int,
	@ID VARCHAR(18) OUTPUT
AS

	DECLARE @flag VARCHAR(14)
	DECLARE @identity VARCHAR(14)
	DECLARE @IDRES varchar(18)
	DECLARE @idint varchar(18)
	DECLARE @codesalle varchar(18)
	DECLARE @siteid varchar(14)
	DECLARE @statutvisiteid int
	DECLARE @nbupdate int
	DECLARE @nbinsert int
	DECLARE @nomprenomresid varchar(70)
	DECLARE @nomprenomvisit varchar(70)
	DECLARE @idtypevisite varchar(20)
BEGIN
	Set @nbupdate = 0
	Set @nbinsert = 0
	if(@validite='')begin
		set @validite=null
	end
	if(@idatenaissance='')begin
		set @idatenaissance=null
	end
	if(@debutprevu ='')begin
		set @debutprevu = null
	end
	if(@finprevu ='')begin
		set @finprevu = null
	end
	if(@hdebutprevu ='')begin
		set @hdebutprevu = null
	end
	if(@debutvisite ='')begin
		set @debutvisite = null
	end
	if(@finvisite ='')begin
		set @finvisite = null
	end
	if(@hdebut ='')begin
		set @hdebut = null
	end
	if(@hfin ='')begin
		set @hfin = null
	end
	if(@hfinprevu ='')begin
		set @hfinprevu = null
	end

	if(@nomint='##')begin
		set @nomint=''
	end
	if(@prenomint='##')begin
		set @prenomint=''
	end
	if(@nomres='##')begin
		set @nomres=''
	end
	if(@prenomres ='##')begin
		set @prenomres =''
	end
	if(@societeresid ='##')begin
		set @societeresid =''
	end
	if(@societevisit ='##')begin
		set @societevisit =''
	end
	if(@ifonction ='##')begin
		set @ifonction =''
	end
	if(@ilieunaissance ='##')begin
		set @ilieunaissance =''
	end
	if(@ipays ='##')begin
		set @ipays =''
	end
	if(@inomjeunefille ='##')begin
		set @inomjeunefille =''
	end
	if(@istatut ='##')begin
		set @istatut =''
	end
	if(@numerobadge ='##')begin
		set @numerobadge =''
	end
	if(@statutvisite ='##')begin
		set @statutvisite =''
	end
	if(@boite ='##')begin
		set @boite =''
	end
	if(@casier ='##')begin
		set @casier =''
	end
	if(@objet ='##')begin
		set @objet =''
	end
	if(@piece ='##')begin
		set @piece =''
	end
	if(@numero ='##')begin
		set @numero =''
	end
	if(@parking ='##')begin
		set @parking =''
	end
	if(@immatriculation ='##')begin
		set @immatriculation =''
	end
	if(@observation ='##')begin
		set @observation =''
	end
	if(@lieu ='##')begin
		set @lieu =''
	end
	if(@marque ='##')begin
		set @marque =''
	end
	if(@modele ='##')begin
		set @modele =''
	end
	if(@cle ='##')begin
		set @cle =''
	end
	if(@site ='##')begin
		set @site =''
	end
	if  (@typevisiteid is null) or (ISNUMERIC(@typevisiteid)<>1) begin
		set @typevisiteid=0
	end
	if(@vip is null) begin
		set @vip =0
	end
	SET @idtypevisite=CAST(@typevisiteid as varchar)
	EXEC PS_TYPEVISITE 0,'',@idtypevisite,@idtypevisite out
	--set @numerovisite = (select max(numerovisite) from visites)
	if(@numerovisite is null or @numerovisite=0) begin
		set @numerovisite = (select dernvisite from parametres)
		update parametres set dernvisite=dernvisite+1
	end
	if(@originevisite is null or @originevisite=0) begin
		set @originevisite = @numerovisite
	end
	SET @nomprenomresid = upper(@nomres) + ' ' + upper(@prenomres)
	SET @nomprenomvisit = upper(@nomint) + ' ' + upper(@prenomint)

	IF(@nomprenomresid is not null and LTRIM(@nomprenomresid)<>'') BEGIN

		EXEC PS_RESIDANTS 1,'NOMPRENOM',@societeresid,null,null,@nomres,@prenomres,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,'1',null, @IDRES OUTPUT

		SET @nbupdate = @nbupdate + CAST( (select Data from Split(@IDRES,',') WHERE id = 3) as int)
		SET @nbinsert = @nbinsert + CAST( (select Data from Split(@IDRES,',') WHERE id = 2) as int)
		SET @IDRES = (select top 1 Data from Split(@IDRES,',') WHERE id = 1)

		IF(@nomprenomvisit is not null and LTRIM(@nomprenomvisit)<>'')BEGIN

			EXEC PS_INTERLOCUTEUR 1,'NOMPRENOM',null,@nomint,@prenomint,@inomjeunefille,@idatenaissance,@ilieunaissance,@ipays,@societevisit,@ifonction,@istatut,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,'0',null,null,@idint output

			SET @nbupdate = @nbupdate + CAST( (select Data from Split(@idint,',') WHERE id = 3) as int)
			SET @nbinsert = @nbinsert + CAST( (select Data from Split(@idint,',') WHERE id = 2) as int)
			SET @idint = (select Data from Split(@idint,',') WHERE id = 1)

			IF @idtypevisite='-1'  AND EXISTS(SELECT top 1 RESIDANTID FROM RESIDANTS WHERE NOMPRENOM=@nomint+' '+@prenomint AND SOCIETE=@societeresid) BEGIN

			UPDATE INTERLOCUTEUR SET EXTERNALID=(SELECT top 1 RESIDANTID FROM RESIDANTS WHERE NOMPRENOM=@nomint+' '+@prenomint AND SOCIETE=@societeresid)
			WHERE INTERLOCUTEURID=@idint
			END

			if(exists(select statutid from statutvisite where statutvisite = @statutvisite))begin
				set @statutvisiteid = (select top 1 statutid from statutvisite where statutvisite = @statutvisite)
				SET @statutvisite = (select top 1 statutvisite from statutvisite where statutvisite = @statutvisite)
				SET @preenreg =0
			end
			else begin
				SET @preenreg =1
				set @statutvisiteid = 2
				SET @statutvisite = (select top 1 statutvisite from statutvisite where statutid=@statutvisiteid)
			end
			EXEC PS_SITE 0,'',@site,@siteid output

			IF EXISTS (
		   select TOP(1) visiteid FROM visites WHERE STATUTID=@statutvisiteid AND UPPER(LTRIM(NOMPRENOMRESID))=UPPER(LTRIM(@nomprenomresid)) AND LTRIM(upper(nomprenomvisit))=LTRIM(upper(@nomprenomvisit)) AND (debutprevu = @debutprevu or (debutprevu is null and @debutprevu is null)) AND (finprevu = @finprevu or (finprevu is null and @finprevu is null)) AND (hdebutprevu = @hdebutprevu or (hdebutprevu is null and @hdebutprevu is null)) AND (hfinprevu=@hfinprevu or (hfinprevu is null and @hfinprevu is null)) AND (debutvisite = @debutvisite or (debutvisite is null and @debutvisite is null)) AND (finvisite=@finvisite or (finvisite is null and @finvisite is null)) AND (hdebut=@hdebut or (hdebut is null and @hdebut is null)) AND (hfin = @hfin or(hfin is null and @hfin is null)) AND
			  CASE
					WHEN  @champctrl='' THEN 1
					WHEN  @champctrl='NOMPRENOM' THEN 1
					WHEN  @champctrl='SOCIETE' AND upper(SOCIETERESID)=upper(@societeresid) AND UPPER(LTRIM(societevisit))=UPPER(@societevisit) THEN 1
					ELSE 0
			  END=1)

			BEGIN --update
				SET @ID=(select TOP(1) visiteid FROM visites WHERE STATUTID=@statutvisiteid AND UPPER(LTRIM(NOMPRENOMRESID))=UPPER(LTRIM(@nomprenomresid)) AND LTRIM(upper(nomprenomvisit))=LTRIM(upper(@nomprenomvisit)) AND (debutprevu = @debutprevu or (debutprevu is null and @debutprevu is null)) AND (finprevu = @finprevu or (finprevu is null and @finprevu is null)) AND (hdebutprevu = @hdebutprevu or (hdebutprevu is null and @hdebutprevu is null)) AND (hfinprevu=@hfinprevu or (hfinprevu is null and @hfinprevu is null)) AND (debutvisite = @debutvisite or (debutvisite is null and @debutvisite is null)) AND (finvisite=@finvisite or (finvisite is null and @finvisite is null)) AND (hdebut=@hdebut or (hdebut is null and @hdebut is null)) AND (hfin = @hfin or(hfin is null and @hfin is null)) AND
			  CASE
					WHEN  @champctrl='' THEN 1
					WHEN  @champctrl='NOMPRENOM' THEN 1
					WHEN  @champctrl='SOCIETE' AND upper(SOCIETERESID)=upper(@societeresid) AND UPPER(LTRIM(societevisit))=UPPER(LTRIM(@societevisit)) THEN 1
					ELSE 0
			  END=1)

				update visites
				set societeresid=upper(@societeresid),nomprenomresid=@nomprenomresid,societevisit=upper(@societevisit),nomprenomvisit=@nomprenomvisit,ifonction=@ifonction,idatenaissance=@idatenaissance,ilieunaissance=@ilieunaissance,ipays=@ipays,inomjeunefille=@inomjeunefille,vip=@vip,istatut=@istatut,debutprevu=@debutprevu,finprevu=@finprevu,hdebutprevu=@hdebutprevu,hfinprevu=@hfinprevu,numerobadge=@numerobadge,numerovisite=@numerovisite,debutvisite=@debutvisite,finvisite=@finvisite,hdebut=@hdebut,hfin=@hfin,statutvisite=@statutvisite,boite=@boite,casier=@casier,objet=@objet,piece=@piece,numero=@numero,validite=@validite,parking=@parking,immatriculation=@immatriculation,observation=@observation,lieu=@lieu,originevisite=@originevisite,marque=@marque,modele=@modele,preenreg=@preenreg,cle=@cle,interlocuteurid = @idint,residantid = @IDRES,siteid=@siteid,statutid=@statutvisiteid,datemaj=current_timestamp
				where visiteid = @ID
				if (@istatut is not null) and (@istatut<>'') BEGIN
					update visites set istatut=(SELECT LIBELLE FROM NATURE WHERE NATUREID =(SELECT NATUREID FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@idint)) WHERE visiteid=@ID
				END
				if (@debutprevu is null) BEGIN
					update visites set DEBUTPREVU=CONVERT(DATETIME,CURRENT_TIMESTAMP,103), FINPREVU=CONVERT(DATETIME,CURRENT_TIMESTAMP,103) WHERE VISITEID=@ID
				END
				if (@finprevu is null) BEGIN
					update visites set FINPREVU=CONVERT(DATETIME,CURRENT_TIMESTAMP,103) WHERE VISITEID=@ID
				END
				if (@hdebutprevu is null) BEGIN
					update visites set HDEBUTPREVU=CONVERT(DATETIME,CURRENT_TIMESTAMP,108) WHERE VISITEID=@ID
				END
				if (@hfinprevu is null) BEGIN
					update visites set HDEBUTPREVU=CONVERT(DATETIME,'23:00',108) WHERE VISITEID=@ID
				END

				update visites set typevisiteid=CAST(@idtypevisite AS INT) where visiteid=@ID

				Set @ID = @ID + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate+1 as varchar)
			END
			ELSE BEGIN --insert

				IF(@flagin = 1)BEGIN

					INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
					SET @identity = (SELECT @@IDENTITY AS ID)
					SET @flag = (SELECT SUBSTRING(version, 1, 3) FROM version_sfw)
					SET @ID = @flag + @identity

					insert into visites(visiteid,societeresid ,nomprenomresid,societevisit,nomprenomvisit,ifonction,idatenaissance,ilieunaissance,ipays,inomjeunefille,istatut,debutprevu,finprevu,hdebutprevu,hfinprevu,numerobadge,numerovisite,debutvisite,finvisite,hdebut,hfin,statutvisite,boite,casier,objet,piece,numero,validite,parking,immatriculation,observation,lieu,originevisite,marque,modele,preenreg,cle,interlocuteurid,residantid,siteid,statutid,datecreation,datemaj,externalid,typevisiteid,nbbdgimprtotal,bureauid)
					values(@ID,upper(@societeresid),@nomprenomresid,upper(@societevisit),@nomprenomvisit,@ifonction,@idatenaissance,@ilieunaissance,@ipays,@inomjeunefille,@istatut,@debutprevu,@finprevu,@hdebutprevu,@hfinprevu,@numerobadge,@numerovisite,@debutvisite,@finvisite,@hdebut,@hfin,@statutvisite,@boite,@casier,@objet,@piece,@numero,@validite,@parking,@immatriculation,@observation,@lieu,@numerovisite,@marque,@modele,@preenreg,@cle,@idint,@idres,@siteid,@statutvisiteid,current_timestamp,current_timestamp,@idres,@idtypevisite,0,@numerovisite)
					if (@vip is not null) begin
   					    update visites set vip=@vip where visiteid=@ID
					 end
					if (@debutprevu is null) BEGIN
						update visites set DEBUTPREVU=CONVERT(DATETIME,CURRENT_TIMESTAMP,103), FINPREVU=CONVERT(DATETIME,CURRENT_TIMESTAMP,103) WHERE VISITEID=@ID
					END
					if (@finprevu is null) BEGIN
						update visites set FINPREVU=CONVERT(DATETIME,CURRENT_TIMESTAMP,103) WHERE VISITEID=@ID
					END
					if (@hdebutprevu is null) BEGIN
						update visites set HDEBUTPREVU=CONVERT(DATETIME,CURRENT_TIMESTAMP,108) WHERE VISITEID=@ID
					END
					if (@hfinprevu is null) BEGIN
						update visites set HDEBUTPREVU=CONVERT(DATETIME,'23:00',108) WHERE VISITEID=@ID
					END
					update visites set ifonction=(SELECT LIBELLE FROM FONCTION WHERE CODEFONCTION=(SELECT CODEFONCTION FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@idint)),istatut=(SELECT LIBELLE FROM NATURE WHERE NATUREID=(SELECT NATUREID FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@idint)),idatenaissance=(SELECT DATENAISSANCE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@idint),inomjeunefille=(SELECT NOMJEUNEFILLE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@idint) where visiteid=@ID
					set @nbinsert = @nbinsert+1
				END
				else begin
					Set @ID = '0'
				end
				Set @ID = @ID + ',' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
			END
		END
		ELSE BEGIN
			Set @ID = '0,' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
		END
	END
	ELSE BEGIN
		Set @ID = '0,' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
	END
END


GO
------------------------------------------------
IF OBJECT_ID('dbo.To_xml', 'FN') IS NOT NULL
	DROP FUNCTION dbo.To_xml;
GO
CREATE FUNCTION dbo.To_xml(@ORIGINALEVALUE VARBINARY(MAX)) RETURNS VARCHAR(MAX)
AS
BEGIN
	DECLARE @C_OK VARCHAR(MAX)
	DECLARE @bin VARBINARY(MAX)
	SET  @bin = @ORIGINALEVALUE
    SET  @C_OK=(SELECT CAST('' AS XML).value('xs:hexBinary(sql:variable("@ORIGINALEVALUE"))', 'VARCHAR(MAX)') AS ConvertedString)
   RETURN @C_OK
END
GO

IF OBJECT_ID('dbo.GET_CONSIGNE', 'FN') IS NOT NULL
	DROP FUNCTION dbo.GET_CONSIGNE
GO
CREATE FUNCTION dbo.GET_CONSIGNE(@INTERLOCUTEURID VARCHAR(14)) RETURNS  VARCHAR(14)
AS
BEGIN
	DECLARE  @O_RESIDANTID VARCHAR(14)
   	SET @O_RESIDANTID=(SELECT TOP 1 ISNULL(INTERLOCUTEURID,'') FROM CONSIGNE WHERE INTERLOCUTEURID=@INTERLOCUTEURID AND RESIDANTID='VISITEUR' OR RESIDANTID IS NULL ORDER BY DATEMAJ)
	RETURN  @O_RESIDANTID
END
GO

IF OBJECT_ID('dbo.PS_ZCL27_NEXTUSER', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ZCL27_NEXTUSER;
GO
CREATE PROCEDURE dbo.PS_ZCL27_NEXTUSER
    @RET VARCHAR(10) OUTPUT
AS
    DECLARE @MAX INTEGER
    DECLARE @NUM INTEGER

    SET @MAX = 100000

    INSERT INTO SEQ_ZCL37_CTPUSER(LIBELLE) VALUES ('OK')
    SET @NUM = (SELECT @@IDENTITY AS NUMVAL)

    IF @NUM >= @MAX BEGIN
        TRUNCATE TABLE SEQ_ZCL37_CTPUSER
        INSERT INTO SEQ_ZCL37_CTPUSER(LIBELLE) VALUES ('OK')
        SET @NUM = (SELECT @@IDENTITY AS NUMVAL)
    END

    SET @RET = @NUM
    RETURN
GO

IF OBJECT_ID('dbo.PS_ZCL27_NEXTPWD', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ZCL27_NEXTPWD;
GO
CREATE PROCEDURE dbo.PS_ZCL27_NEXTPWD
    @RET VARCHAR(10) OUTPUT
AS
    DECLARE @MAX INTEGER
    DECLARE @NUM INTEGER
    DECLARE @OFFSET INTEGER

    SET @OFFSET = 109654
    SET @MAX = 100000

    INSERT INTO SEQ_ZCL37_CPTPWD(LIBELLE) VALUES ('OK')
    SET @NUM = (SELECT @@IDENTITY AS NUMVAL)

    IF @NUM >= @MAX BEGIN
        TRUNCATE TABLE SEQ_ZCL37_CPTPWD
        INSERT INTO SEQ_ZCL37_CPTPWD(LIBELLE) VALUES ('OK')
        SET @NUM = (SELECT @@IDENTITY AS NUMVAL)
    END

    SET @RET = @OFFSET+@NUM
    RETURN
GO

IF OBJECT_ID('dbo.PS_TLQM_VERIF', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_TLQM_VERIF;
GO
CREATE PROCEDURE dbo.PS_TLQM_VERIF
AS
BEGIN
	UPDATE SITE SET TLMQ_HEURE_FIN='23:30' WHERE TLMQ_HEURE_FIN=':';
	UPDATE SITE SET TLMQ_HEURE_EXEC='23:00' WHERE TLMQ_HEURE_FIN=':';
	UPDATE SITE SET TLMQ_DERN_EXEC=GETDATE()-1 WHERE TLMQ_DERN_EXEC IS NULL;
END
GO

-- ACCES PARKING
IF OBJECT_ID('dbo.PREVISITE_LPM', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PREVISITE_LPM;
GO
CREATE PROCEDURE dbo.PREVISITE_LPM
	@VISITEID VARCHAR(14),
	@VALEUR VARCHAR(1)
AS
BEGIN
	UPDATE VISITES SET ATTENDU = @VALEUR, DATEMAJ = CURRENT_TIMESTAMP WHERE VISITEID = @VISITEID
END
GO
IF OBJECT_ID('dbo.PS_CORRESPONDANCE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_CORRESPONDANCE;
GO
CREATE PROCEDURE dbo.PS_CORRESPONDANCE
	@flagin INT,
	@champctrl varchar(80),

	@libsSrc varchar(240),--libsrc1,libsrc2,libsrc3...
	@rangsSrc varchar(20),--rang(libsrc1),rang(libsrc2),rang(libsrc3)...
	@libDst varchar(80),
	@cfg_fichier varchar(200),
	@corres_rang int,

	@ID VARCHAR(18) OUTPUT
As
	DECLARE @CORRESID INT
	DECLARE @cfg_fichierid INT
BEGIN
	if(isnumeric(@cfg_fichier)=1)begin
		if(EXISTS(select * from cfg_fichier where cfg_fichierid=CAST(@cfg_fichier as int)))begin
			SET @cfg_fichierid = cast(@cfg_fichier as int)
		END
		ELSE BEGIN
			if(EXISTS(select * from cfg_fichier where libelle=@cfg_fichier))begin
				SET @cfg_fichierid = (select top 1 cfg_fichierid from cfg_fichier where libelle=@cfg_fichier)
			END
			ELSE BEGIN
				SET @cfg_fichierid = -1
			END
		END
	END
	ELSE BEGIN
		if(EXISTS(select * from cfg_fichier where libelle=@cfg_fichier))begin
			SET @cfg_fichierid = (select top 1 cfg_fichierid from cfg_fichier where libelle=@cfg_fichier)
		END
		ELSE BEGIN
			SET @cfg_fichierid = -1
		END
	END

	if(@cfg_fichierid<>-1)begin
		if(exists(select * from correspondance where corresid = CAST(@ID as int)))begin

			update correspondance
			set libsSrc=@libsSrc,rangsSrc=@rangsSrc,libDst=@libDst,cfg_fichierid=@cfg_fichierid,corres_rang = @corres_rang,datemaj=current_timestamp
			WHERE Corresid = CAST(@ID as int)

			SET @ID = @ID + ',0,1'
		END
		ELSE BEGIN
			if(exists(select * from correspondance where cfg_fichierid=@cfg_fichierid and libsSrc=@libsSrc AND rangsSrc = @rangsSrc AND libDst=@libDst AND corres_rang=@corres_rang))begin

				set @ID = CAST((select top 1 corresid from correspondance where cfg_fichierid=@cfg_fichierid and libsSrc=@libsSrc AND rangsSrc = @rangsSrc AND libDst=@libDst AND corres_rang=@corres_rang) as varchar)
				set @ID = @ID + ',0,0'
			END
			ELSE BEGIN

				SET @CORRESID = (select max(corresid) from correspondance)
				if(@CORRESID is null)begin
					set @CORRESID = 0
				END
				SET @CORRESID = @CORRESID+1
				insert into correspondance(Corresid,libsSrc,rangsSrc,libDst,cfg_fichierid,corres_rang,datemaj,datecreation)
				VALUES(@CORRESID,@libsSrc,@rangsSrc,@libDst,@cfg_fichierid,@corres_rang,current_timestamp,current_timestamp)

				set @ID = cast(@corresid as varchar) + ',1,0'
			END
		END
	END
	ELSE BEGIN
		SET @ID = '-1,0,0'
	END
END
GO

IF EXISTS (SELECT NAME FROM SYSOBJECTS WHERE NAME='F_DEDUP_REMOVESPECHARS' AND TYPE='FN')
  DROP FUNCTION F_DEDUP_REMOVESPECHARS;
GO
CREATE FUNCTION dbo.F_DEDUP_REMOVESPECHARS
(
    @MYSTR VARCHAR(4000)

)
RETURNS VARCHAR(4000)
AS

BEGIN
DECLARE @STRTEMP VARCHAR(4000);
SET @STRTEMP =LOWER(REPLACE(@MYSTR,' ',''))
SET @STRTEMP = REPLACE(@STRTEMP,'-','')
SET @STRTEMP=Replace(@STRTEMP,'ã','a')
SET @STRTEMP=Replace(@STRTEMP,'à','a')
SET @STRTEMP=Replace(@STRTEMP,'â','a')
SET @STRTEMP=Replace(@STRTEMP,'ä','a')
SET @STRTEMP=Replace(@STRTEMP,'ç','c')
SET @STRTEMP=Replace(@STRTEMP,'é','e')
SET @STRTEMP=Replace(@STRTEMP,'è','e')
SET @STRTEMP=Replace(@STRTEMP,'ê','e')
SET @STRTEMP=Replace(@STRTEMP,'ë','e')
SET @STRTEMP=Replace(@STRTEMP,'î','i')
SET @STRTEMP=Replace(@STRTEMP,'ï','i')
SET @STRTEMP=Replace(@STRTEMP,'ñ','n')
SET @STRTEMP=Replace(@STRTEMP,'õ','o')
SET @STRTEMP=Replace(@STRTEMP,'ô','o')
SET @STRTEMP=Replace(@STRTEMP,'ö','o')
SET @STRTEMP=Replace(@STRTEMP,'û','u')
SET @STRTEMP=Replace(@STRTEMP,'ü','u')
SET @STRTEMP=Replace(@STRTEMP,'ù','u')
SET @STRTEMP=Replace(@STRTEMP,'ÿ','y')
SET @STRTEMP=Replace(@STRTEMP,'''','')
SET @STRTEMP=Replace(@STRTEMP,',','')
SET @STRTEMP=Replace(@STRTEMP,'-','')
SET @STRTEMP=Replace(@STRTEMP,'_','')
RETURN @STRTEMP
END
GO




IF EXISTS (SELECT NAME FROM SYSOBJECTS WHERE NAME='F_DEDUP_COMMPREFIXELENGTH' AND TYPE='FN')
  DROP FUNCTION F_DEDUP_COMMPREFIXELENGTH;
GO
CREATE FUNCTION dbo.F_DEDUP_COMMPREFIXELENGTH
(
    @MYSTRDN VARCHAR(4000),
    @MYSTRUP VARCHAR(4000)

)
RETURNS INTEGER
AS
BEGIN
	DECLARE @locnbr INTEGER
	DECLARE @distancemin INT
	DECLARE @i INT;
	DECLARE @strindex VARCHAR(4000);
	DECLARE @STRUP VARCHAR(4000);
	DECLARE @STRDN VARCHAR(4000);
	DECLARE @STRDNC VARCHAR(1);
	DECLARE @STRUPC VARCHAR(1);
	DECLARE @maxlength int;
	SET @locnbr=0
	SET @STRDN=REPLACE(@MYSTRDN,' ','')
	SET @STRUP=REPLACE(@MYSTRUP,' ','')
	SET @i= 0;
	SET @maxlength = (SELECT MIN(A) from (SELECT ISNULL(LEN(@STRUP),0) AS A UNION SELECT ISNULL (LEN(@STRDN),0) AS A UNION SELECT 4 AS A) B)

	WHILE (@i < @maxlength) BEGIN
		if (SUBSTRING(@STRUP,@i+1,1)=SUBSTRING(@STRDN,@i+1,1)) BEGIN
			SET @locnbr=@locnbr+1
			END  ELSE BEGIN
			BREAK
			END
		SET @i=@i+1
	END
	RETURN @locnbr
END
GO

IF EXISTS (SELECT NAME FROM SYSOBJECTS WHERE NAME='F_DEDUP_GETWINKLERNUMBER' AND TYPE='FN')
  DROP FUNCTION F_DEDUP_GETWINKLERNUMBER;
GO
CREATE FUNCTION dbo.F_DEDUP_GETWINKLERNUMBER
(
    @MYSTRDN VARCHAR(4000),
    @MYSTRUP VARCHAR(4000)

)
RETURNS INTEGER
AS

BEGIN
DECLARE  @distancemin INT;
DECLARE  @i INT;
DECLARE  @j INT;
DECLARE @k INT;
DECLARE @strindex VARCHAR(4000);
DECLARE @STRUP VARCHAR(4000);
DECLARE @STRDN VARCHAR(4000);

DECLARE @STRDNC VARCHAR(1);
DECLARE @STRUPC VARCHAR(1);
DECLARE @nbr_transpos int;
DECLARE @nbr_communs int;
DECLARE @jaro decimal(5,3);
DECLARE @winkler decimal(5,3);
DECLARE @strij varchar(4000);
DECLARE @RETOUR INT;
DECLARE @PASS VARCHAR(400);
SET @nbr_communs=0;
SET @STRDN=dbo.F_DEDUP_REMOVESPECHARS(@MYSTRDN);
SET @STRUP=dbo.F_DEDUP_REMOVESPECHARS(@MYSTRUP);
IF (LEN(@STRDN)<LEN(@STRUP)) BEGIN
	SET @PASS=@STRDN
	SET @STRDN=@STRUP
	SET @STRUP=@PASS
END
SET @strindex='';
SET @distancemin = (SELECT MIN(A) from (SELECT ISNULL(LEN(@STRUP),0) AS A UNION SELECT ISNULL (LEN(@STRDN),0) AS A) B)

SET @strij='';
 SET @distancemin= @distancemin/2.0;
 SET @nbr_transpos=0;
 SET @i=0;
  WHILE @i < LEN(@STRUP) BEGIN
   SET @j= 0;
   SET @STRUPC=SUBSTRING(@STRUP,@i+1,1);
   WHILE @j < LEN(@STRDN) BEGIN
   	    SET @strij='['+CONVERT(VARCHAR,@i)+','+CONVERT(VARCHAR,@j)+']';
  	    --SET @STRDNC=SUBSTR(@STRDN,j+1,1);
        IF((@STRUPC=SUBSTRING(@STRDN,@j+1,1)) AND (ABS(@i-@j)<=@distancemin) AND (@strindex='' or CHARINDEX(@strindex,@strij)=0 )) BEGIN
  		      SET @nbr_communs=@nbr_communs+1;
			  if (@i<>@j) BEGIN
				SET @nbr_transpos=@nbr_transpos+1;
			  END
   			   SET @k=@i;
   			   WHILE @k < LEN(@STRUP) BEGIN
                    SET @strindex=@strindex+'['+CONVERT(VARCHAR,@k)+','+CONVERT(VARCHAR,@j)+']';
					SET @k=@k+1;
			   END
	   	   BREAK
	   END
  	  SET @j=@j+1;
  END
    SET @i=@i+1;
 END
  IF  @nbr_communs=0 BEGIN
	SET @RETOUR=0;
 END
 ELSE BEGIN
	SET @jaro =  (1.0 / 3 * (@nbr_communs / (1.0 * LEN(@STRUP)) + @nbr_communs / (1.0 * LEN(@STRDN)) + (@nbr_communs-0.5*@nbr_transpos)/(1.0*@nbr_communs)));
	SET @winkler = @jaro+ dbo.F_DEDUP_COMMPREFIXELENGTH(@STRDN,@STRUP)*0.1*(1-@jaro);
	SET @RETOUR =Round(@winkler*100.0,0)
	END
RETURN @RETOUR
END
GO


IF OBJECT_ID('dbo.PS_DEDUP_INIT_INTERLOCUTEUR', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_DEDUP_INIT_INTERLOCUTEUR;


GO
CREATE PROCEDURE dbo.PS_DEDUP_INIT_INTERLOCUTEUR
@JW INT
AS
BEGIN
	DELETE FROM DEDUP_DEDUP where ENTITE='INTERLOCUTEUR'
	DELETE FROM TEMPSOC
	DELETE FROM TEMPSOC2
	INSERT INTO TEMPSOC (TMPID,TMPNOM,TMPRANG) (SELECT INTERLOCUTEURID,ISNULL(NOMPRENOM,''), ROW_NUMBER() OVER(ORDER BY DATECREATION)  FROM INTERLOCUTEUR)
	INSERT INTO TEMPSOC2 (TMP2ID,TMPNOM,TMPRANG) (SELECT INTERLOCUTEURID,ISNULL(NOMPRENOM,''), ROW_NUMBER() OVER(ORDER BY DATECREATION)  FROM INTERLOCUTEUR)
	INSERT INTO DEDUP_DEDUP (DEDUP1ID, DEDUP2ID,JW)
	(SELECT R1.TMPID,R2.TMP2ID,dbo.F_DEDUP_GETWINKLERNUMBER(R2.TMPNOM,R1.TMPNOM) FROM TEMPSOC R1, TEMPSOC2 R2 WHERE R1.TMPID<>R2.TMP2ID AND R1.TMPRANG<R2.TMPRANG AND dbo.F_DEDUP_GETWINKLERNUMBER(R2.TMPNOM,R1.TMPNOM)>= @JW  )
	INSERT INTO DEDUP_DEDUP (DEDUP1ID,DEDUP2ID,JW) (SELECT DEDUP2ID,DEDUP1ID,JW FROM DEDUP_DEDUP WHERE ENTITE IS NULL)
	UPDATE DEDUP_DEDUP SET ENTITE='INTERLOCUTEUR' WHERE ENTITE IS NULL
END
GO



IF OBJECT_ID('dbo.PS_DEDUP_INIT_SOCIETE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_DEDUP_INIT_SOCIETE;
GO
CREATE PROCEDURE dbo.PS_DEDUP_INIT_SOCIETE
 @JW INT
AS
BEGIN
		DELETE FROM DEDUP_DEDUP where ENTITE='SOCIETE'
		DELETE FROM TEMPSOC
		DELETE FROM TEMPSOC2
		INSERT INTO TEMPSOC (TMPID,TMPNOM,TMPRANG) (SELECT SOCIETEID,ISNULL(NOM,''), ROW_NUMBER() OVER(ORDER BY DATECREATION)  FROM SOCIETE)
		INSERT INTO TEMPSOC2 (TMP2ID,TMPNOM,TMPRANG) (SELECT SOCIETEID,ISNULL(NOM,''), ROW_NUMBER() OVER(ORDER BY DATECREATION)  FROM SOCIETE)
		INSERT INTO DEDUP_DEDUP (DEDUP1ID, DEDUP2ID,JW)
	(SELECT R1.TMPID,R2.TMP2ID, dbo.F_DEDUP_GETWINKLERNUMBER(R2.TMPNOM,R1.TMPNOM) FROM TEMPSOC R1, TEMPSOC2 R2 WHERE R1.TMPID<>R2.TMP2ID AND R1.TMPRANG<R2.TMPRANG AND dbo.F_DEDUP_GETWINKLERNUMBER(R2.TMPNOM,R1.TMPNOM)>= @JW  )
	INSERT INTO DEDUP_DEDUP (DEDUP1ID,DEDUP2ID,JW) (SELECT DEDUP2ID,DEDUP1ID,JW FROM DEDUP_DEDUP WHERE ENTITE IS NULL)
	UPDATE DEDUP_DEDUP SET ENTITE='SOCIETE' WHERE ENTITE IS NULL

END
GO

IF OBJECT_ID('dbo.PS_DEDUP_INIT_RESIDANT', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_DEDUP_INIT_RESIDANT;
GO
CREATE PROCEDURE dbo.PS_DEDUP_INIT_RESIDANT
@JW INT
AS
BEGIN
		DELETE FROM DEDUP_DEDUP where ENTITE='RESIDANTS'
		DELETE FROM TEMPSOC
		DELETE FROM TEMPSOC2
		INSERT INTO TEMPSOC (TMPID,TMPNOM,TMPRANG) (SELECT RESIDANTID,ISNULL(NOMPRENOM,''), ROW_NUMBER() OVER(ORDER BY DATECREATION)  FROM RESIDANTS)
		INSERT INTO TEMPSOC2 (TMP2ID,TMPNOM,TMPRANG) (SELECT RESIDANTID,ISNULL(NOMPRENOM,''), ROW_NUMBER() OVER(ORDER BY DATECREATION)  FROM RESIDANTS)
		INSERT INTO DEDUP_DEDUP (DEDUP1ID, DEDUP2ID,JW)
	(SELECT R1.TMPID,R2.TMP2ID,dbo.F_DEDUP_GETWINKLERNUMBER(R2.TMPNOM,R1.TMPNOM) FROM TEMPSOC R1, TEMPSOC2 R2 WHERE R1.TMPID<>R2.TMP2ID AND R1.TMPRANG<R2.TMPRANG AND dbo.F_DEDUP_GETWINKLERNUMBER(R2.TMPNOM,R1.TMPNOM)>= @JW  )
	INSERT INTO DEDUP_DEDUP (DEDUP1ID,DEDUP2ID,JW) (SELECT DEDUP2ID,DEDUP1ID,JW FROM DEDUP_DEDUP WHERE ENTITE IS NULL)
	UPDATE DEDUP_DEDUP SET ENTITE='RESIDANTS' WHERE ENTITE IS NULL
END
GO



IF OBJECT_ID('dbo.PS_DEDUP_ROUTINE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_DEDUP_ROUTINE;

GO

CREATE PROCEDURE dbo.PS_DEDUP_ROUTINE
	 @ENTITEID VARCHAR(14),
	 @LIBENTITE VARCHAR(35),
	 @ENTITE VARCHAR(35),
	 @JW INT
AS
BEGIN
	DELETE FROM DEDUP_DEDUP WHERE (DEDUP2ID=@ENTITEID OR DEDUP1ID=@ENTITEID) AND ENTITE=@ENTITE
	IF @ENTITE='INTERLOCUTEUR' BEGIN
		INSERT INTO DEDUP_DEDUP (DEDUP1ID,DEDUP2ID,ENTITE,JW)
		(SELECT @ENTITEID,R2.INTERLOCUTEURID,'INTERLOCUTEUR', dbo.F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOMPRENOM),UPPER(@LIBENTITE)) FROM INTERLOCUTEUR R2 WHERE @ENTITEID<>R2.INTERLOCUTEURID  AND dbo.F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOMPRENOM),UPPER(@LIBENTITE))>=@JW )
		INSERT INTO DEDUP_DEDUP (DEDUP2ID,DEDUP1ID,ENTITE,JW)
		(SELECT @ENTITEID,R2.INTERLOCUTEURID,'INTERLOCUTEUR',dbo.F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOMPRENOM),UPPER(@LIBENTITE)) FROM INTERLOCUTEUR R2 WHERE @ENTITEID<>R2.INTERLOCUTEURID  AND dbo.F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOMPRENOM),UPPER(@LIBENTITE))>=@JW )
	END ELSE BEGIN
			IF @ENTITE='SOCIETE' BEGIN
				INSERT INTO DEDUP_DEDUP (DEDUP1ID,DEDUP2ID,ENTITE,JW)
				(SELECT @ENTITEID,R2.SOCIETEID,'SOCIETE',dbo.F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOM),UPPER(@LIBENTITE)) FROM SOCIETE R2 WHERE @ENTITEID<>R2.SOCIETEID  AND dbo.F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOM),UPPER(@LIBENTITE))>=@JW)
				INSERT INTO DEDUP_DEDUP (DEDUP2ID,DEDUP1ID,ENTITE,JW)
				(SELECT @ENTITEID,R2.SOCIETEID,'SOCIETE',dbo.F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOM),UPPER(@LIBENTITE)) FROM SOCIETE R2 WHERE @ENTITEID<>R2.SOCIETEID  AND dbo.F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOM),UPPER(@LIBENTITE))>=@JW)
			END
			ELSE BEGIN
				INSERT INTO DEDUP_DEDUP (DEDUP1ID,DEDUP2ID,ENTITE,JW)
				(SELECT @ENTITEID,R2.RESIDANTID,'RESIDANTS', dbo.F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOMPRENOM),UPPER(@LIBENTITE)) FROM RESIDANTS R2 WHERE @ENTITEID<>R2.RESIDANTID  AND dbo.F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOMPRENOM),UPPER(@LIBENTITE))>=@JW)
				INSERT INTO DEDUP_DEDUP (DEDUP2ID,DEDUP1ID,ENTITE,JW)
				(SELECT @ENTITEID,R2.RESIDANTID,'RESIDANTS',dbo.F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOMPRENOM),UPPER(@LIBENTITE)) FROM RESIDANTS R2 WHERE @ENTITEID<>R2.RESIDANTID  AND dbo.F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOMPRENOM),UPPER(@LIBENTITE))>=@JW)
			END
	END

END
GO


 IF OBJECT_ID('dbo.PS_DEDUP_FLAG', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_DEDUP_FLAG;

GO
  CREATE PROCEDURE dbo.PS_DEDUP_FLAG
  	 @DEDUP1ID VARCHAR(14),
	 @DEDUP2ID VARCHAR(35),
	 @ENTITE VARCHAR(35)
AS
BEGIN
	DELETE FROM DEDUP_DEDUP WHERE ENTITE=@ENTITE AND (DEDUP1ID=@DEDUP1ID AND DEDUP2ID=@DEDUP2ID)
	DELETE FROM DEDUP_DEDUP WHERE ENTITE=@ENTITE AND (DEDUP1ID=@DEDUP2ID AND DEDUP2ID=@DEDUP1ID)
	INSERT INTO DEDUP_DEDUP (DEDUP1ID,DEDUP2ID,SIMIL_FLAG,ENTITE) VALUES (@DEDUP1ID,@DEDUP2ID,'0',@ENTITE)
	INSERT INTO DEDUP_DEDUP (DEDUP1ID,DEDUP2ID,SIMIL_FLAG,ENTITE) VALUES (@DEDUP2ID,@DEDUP1ID,'0',@ENTITE)
END
GO
IF OBJECT_ID('dbo.PS_DEDUP_INTERLOCUTEUR', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_DEDUP_INTERLOCUTEUR;

GO
CREATE PROCEDURE dbo.PS_DEDUP_INTERLOCUTEUR
	@MYIDSOURCE VARCHAR(14),
	@MYIDDEST VARCHAR(14)
AS
BEGIN
	UPDATE VISITES SET INTERLOCUTEURID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE INTERLOCUTEURID=@MYIDDEST
	UPDATE COLISEMIS SET INTERLOCUTEURID=@MYIDSOURCE,DATEMAJ=CURRENT_TIMESTAMP WHERE INTERLOCUTEURID=@MYIDDEST
	UPDATE COLISRECU SET INTERLOCUTEURID=@MYIDSOURCE,DATEMAJ=CURRENT_TIMESTAMP WHERE INTERLOCUTEURID=@MYIDDEST
	UPDATE CONSIGNE SET INTERLOCUTEURID=@MYIDSOURCE,DATEMAJ=CURRENT_TIMESTAMP WHERE INTERLOCUTEURID=@MYIDDEST AND RESIDANTID='VISITEUR'
	UPDATE CONTACT SET INTERLOCUTEURID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE INTERLOCUTEURID=@MYIDDEST
	UPDATE DEVIS SET INTERLOCUTEURID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE INTERLOCUTEURID=@MYIDDEST
	UPDATE HLGPARTICIPANT SET INTERLOCUTEURID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE INTERLOCUTEURID=@MYIDDEST
	UPDATE HVISITES SET INTERLOCUTEURID=@MYIDSOURCE,DATEMAJ=CURRENT_TIMESTAMP WHERE INTERLOCUTEURID=@MYIDDEST
	UPDATE IDENTITES SET INTERLOCUTEURID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE INTERLOCUTEURID=@MYIDDEST
	UPDATE INTER_RSERVICE SET INTERLOCUTEURID=@MYIDSOURCE WHERE INTERLOCUTEURID=@MYIDDEST
	UPDATE LGPARTICIPANT SET INTERLOCUTEURID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE INTERLOCUTEURID=@MYIDDEST
	UPDATE OJOURNAL_PERSMVT SET INTERLOCUTEURID=@MYIDSOURCE WHERE INTERLOCUTEURID=@MYIDDEST
	UPDATE VISITES_TEMP SET INTERLOCUTEURID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE INTERLOCUTEURID=@MYIDDEST
	UPDATE PASSAGERTAXI SET INTERLOCUTEURID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE INTERLOCUTEURID=@MYIDDEST
	DELETE FROM INTER_ACTION  WHERE INTERLOCUTEURID=@MYIDDEST
	UPDATE XANNEXE SET ETAT='-1', DATEMAJ=CURRENT_TIMESTAMP WHERE ORIGINEID=@MYIDDEST AND ORIGINE='INTERLOCUTEUR'

	DELETE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@MYIDDEST
	DELETE FROM DEDUP_DEDUP WHERE DEDUP1ID=@MYIDDEST OR DEDUP2ID=@MYIDDEST
END
GO

IF OBJECT_ID('dbo.PS_DEDUP_CIVILITE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_DEDUP_CIVILITE;

GO
CREATE PROCEDURE dbo.PS_DEDUP_CIVILITE
	@MYIDSOURCE VARCHAR(14),
	@MYIDDEST VARCHAR(14)

AS
	DECLARE @LIBCOURTCIVILITESRC VARCHAR(30)
	DECLARE @LIBCIVILITEDEST VARCHAR(30)
	DECLARE @LIBCOURTCIVILITEDEST VARCHAR(30)
BEGIN
  IF @MYIDDEST<>'0' BEGIN
		SET @LIBCOURTCIVILITESRC = (SELECT LIBELLECOURT FROM CIVILITE WHERE CODECIVILITE=@MYIDSOURCE)
		
		SET @LIBCIVILITEDEST = (SELECT CIVILITE FROM CIVILITE WHERE CODECIVILITE=@MYIDDEST)
		SET @LIBCOURTCIVILITEDEST = (SELECT LIBELLECOURT FROM CIVILITE WHERE CODECIVILITE=@MYIDDEST)
		
		UPDATE HLGPARTICIPANT SET CIVILITE=@LIBCOURTCIVILITESRC, DATEMAJ=CURRENT_TIMESTAMP WHERE CIVILITE=@LIBCOURTCIVILITEDEST

		UPDATE RESIDANTS SET CIVILITE=@LIBCOURTCIVILITESRC, DATEMAJ=CURRENT_TIMESTAMP WHERE CODECIVILITE=@MYIDDEST
		UPDATE RESIDANTS SET CODECIVILITE=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE CODECIVILITE=@MYIDDEST
		
		UPDATE INTERLOCUTEUR SET CIVILITE=@LIBCOURTCIVILITESRC, DATEMAJ=CURRENT_TIMESTAMP WHERE CODECIVILITE=@MYIDDEST
		UPDATE INTERLOCUTEUR SET CODECIVILITE=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE CODECIVILITE=@MYIDDEST
		
	
		
		UPDATE LGPARTICIPANT SET CIVILITE=@LIBCOURTCIVILITESRC, DATEMAJ=CURRENT_TIMESTAMP WHERE CIVILITE=@LIBCOURTCIVILITEDEST
		
		UPDATE USERS SET CIVILITEID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE CIVILITEID=@MYIDDEST
		
		UPDATE CFGDEFAULTAGENDA SET CODECIVILITE=@MYIDSOURCE WHERE CODECIVILITE=@MYIDDEST

		DELETE FROM CIVILITE WHERE CODECIVILITE=@MYIDDEST
		DELETE FROM DEDUP_DEDUP WHERE DEDUP1ID=@MYIDDEST OR DEDUP2ID=@MYIDDEST
	END
END
GO



IF OBJECT_ID('dbo.PS_DEDUP_RESIDANTS', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_DEDUP_RESIDANTS;

GO
CREATE PROCEDURE dbo.PS_DEDUP_RESIDANTS
	@MYIDSOURCE VARCHAR(14),
	@MYIDDEST VARCHAR(14)

AS
BEGIN

	UPDATE VISITES SET RESIDANTID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE RESIDANTID=@MYIDDEST
	UPDATE VISITES SET EXTERNALID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE EXTERNALID=@MYIDDEST

	UPDATE VISITES_RESIDANTS SET RESIDANTID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE RESIDANTID=@MYIDDEST

	UPDATE VISITE_CONTROLE SET RESIDANTID=@MYIDSOURCE WHERE RESIDANTID=@MYIDDEST
	UPDATE SECRETARIAT SET RESIDANTID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE RESIDANTID=@MYIDDEST
	UPDATE SECRETARIAT SET RESIDANTID2=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE RESIDANTID2=@MYIDDEST


	UPDATE COLISEMIS SET RESIDANTID=@MYIDSOURCE,DATEMAJ=CURRENT_TIMESTAMP WHERE RESIDANTID=@MYIDDEST
	UPDATE COLISRECU SET RESIDANTID=@MYIDSOURCE,DATEMAJ=CURRENT_TIMESTAMP WHERE RESIDANTID=@MYIDDEST

	UPDATE CONSIGNE SET INTERLOCUTEURID=@MYIDSOURCE,DATEMAJ=CURRENT_TIMESTAMP WHERE INTERLOCUTEURID=@MYIDDEST AND RESIDANTID='RESIDANT'

	UPDATE DROITS SET RESIDANTID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE RESIDANTID=@MYIDDEST
	UPDATE DROITS SET DELEGATIONID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE DELEGATIONID=@MYIDDEST

	UPDATE HLGPARTICIPANT SET RESIDANTID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE RESIDANTID=@MYIDDEST

	UPDATE HVISITES SET RESIDANTID=@MYIDSOURCE,DATEMAJ=CURRENT_TIMESTAMP WHERE RESIDANTID=@MYIDDEST

	UPDATE INTER_RSERVICE SET RESIDANTID=@MYIDSOURCE WHERE RESIDANTID=@MYIDDEST

	UPDATE LGPARTICIPANT SET RESIDANTID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE RESIDANTID=@MYIDDEST

	UPDATE LIEUPERMIS SET RESIDANTID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE RESIDANTID=@MYIDDEST

	UPDATE VEHICULE_DEMANDE SET RESIDANTID=@MYIDSOURCE WHERE RESIDANTID=@MYIDDEST

	UPDATE VEHICULE SET RESIDANTID=@MYIDSOURCE WHERE RESIDANTID=@MYIDDEST

	UPDATE EVENEMENTCOLIS SET RESIDANTID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE RESIDANTID=@MYIDDEST

	UPDATE USERS SET EXTERNALID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE EXTERNALID=@MYIDDEST
	UPDATE USERS SET PROFIL_ID_ORGA=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE PROFIL_ID_ORGA=@MYIDDEST
	UPDATE USERS SET PROFIL_ID_INTER=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE PROFIL_ID_INTER=@MYIDDEST

	UPDATE PASSAGERTAXI SET RESIDANTID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE RESIDANTID=@MYIDDEST

	UPDATE XANNEXE SET ETAT='-1', DATEMAJ=CURRENT_TIMESTAMP WHERE ORIGINEID=@MYIDDEST AND ORIGINE='RESIDANT'

	UPDATE RESERVATION SET CODEANIMATEUR=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE CODEANIMATEUR=@MYIDDEST
	UPDATE RESERVATION SET INTERLOCUTEURID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE INTERLOCUTEURID=@MYIDDEST

	DELETE FROM RESIDANTS WHERE RESIDANTID=@MYIDDEST
	DELETE FROM DEDUP_DEDUP WHERE DEDUP1ID=@MYIDDEST OR DEDUP2ID=@MYIDDEST
END
GO

IF OBJECT_ID('dbo.PS_DEDUP_SOCIETE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_DEDUP_SOCIETE;

GO
CREATE PROCEDURE dbo.PS_DEDUP_SOCIETE
	@MYIDSOURCE VARCHAR(14),
	@MYIDDEST VARCHAR(14)

AS
BEGIN
	UPDATE CONTACT SET SOCIETEID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE SOCIETEID=@MYIDDEST
	UPDATE DEPARTEMENT SET SOCIETEID=@MYIDSOURCE,DATEMAJ=CURRENT_TIMESTAMP WHERE SOCIETEID=@MYIDDEST
	UPDATE DEVIS SET SOCIETEID=@MYIDSOURCE,DATEMAJ=CURRENT_TIMESTAMP WHERE SOCIETEID=@MYIDDEST
	UPDATE DIRECTIONS SET SOCIETEID=@MYIDSOURCE,DATEMAJ=CURRENT_TIMESTAMP WHERE SOCIETEID=@MYIDDEST
	UPDATE INTERLOCUTEUR SET SOCIETEID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE SOCIETEID=@MYIDDEST
	UPDATE INTERLOCUTEUR SET SOCIETE=(SELECT NOM FROM SOCIETE WHERE SOCIETEID=@MYIDSOURCE), DATEMAJ=CURRENT_TIMESTAMP WHERE SOCIETEID=@MYIDDEST

	UPDATE MARQUE SET SOCIETEID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE SOCIETEID=@MYIDDEST


	UPDATE PARKING SET SOCIETEID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE SOCIETEID=@MYIDDEST
	UPDATE POSTE SET SOCIETEID=@MYIDSOURCE,DATEMAJ=CURRENT_TIMESTAMP WHERE SOCIETEID=@MYIDDEST

	UPDATE PXACHAT SET SOCIETEID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE SOCIETEID=@MYIDDEST
	UPDATE RESERVATION SET SOCIETEID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE SOCIETEID=@MYIDDEST

	UPDATE RESIDANTS SET SOCIETEID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE SOCIETEID=@MYIDDEST
	UPDATE RESIDANTS SET SOCIETE=(SELECT NOM FROM SOCIETE WHERE SOCIETEID=@MYIDSOURCE), DATEMAJ=CURRENT_TIMESTAMP WHERE SOCIETEID=@MYIDDEST


	UPDATE SALLE SET SOCIETEID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE SOCIETEID=@MYIDDEST

	-- veiller à ne pas insérer des doublons
	--UPDATE SOCIETE_LOCALISATION SET SOCIETEID=@MYIDSOURCE WHERE SOCIETEID=@MYIDDEST
	UPDATE SOCIETE_LOCALISATION SET SOCIETEID=@MYIDSOURCE WHERE SOCIETEID=@MYIDDEST AND LOCALISATIONID NOT IN (SELECT LOCALISATIONID FROM SOCIETE_LOCALISATION WHERE SOCIETEID=@MYIDSOURCE)
	DELETE FROM SOCIETE_LOCALISATION WHERE SOCIETEID=@MYIDDEST
	DELETE FROM SOCBAT  WHERE SOCIETEID=@MYIDDEST
	DELETE FROM SOCMAR WHERE SOCIETEID=@MYIDDEST
	DELETE FROM SOCSITE  WHERE SOCIETEID=@MYIDDEST
	DELETE FROM SOCIETE_ACTION WHERE SOCIETEID=@MYIDDEST

	UPDATE USERS SET SOCIETEID=@MYIDSOURCE, DATEMAJ=CURRENT_TIMESTAMP WHERE SOCIETEID=@MYIDDEST

	UPDATE XANNEXE SET ETAT='-1', DATEMAJ=CURRENT_TIMESTAMP WHERE ORIGINEID=@MYIDDEST AND ORIGINE='SOCIETE'

	DELETE FROM SOCIETE WHERE SOCIETEID=@MYIDDEST
	DELETE FROM DEDUP_DEDUP WHERE DEDUP1ID=@MYIDDEST OR DEDUP2ID=@MYIDDEST
END
GO

IF OBJECT_ID('dbo.PS_DEDUP_FONCTION', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_DEDUP_FONCTION;

GO
CREATE PROCEDURE dbo.PS_DEDUP_FONCTION

	@MYIDSOURCE VARCHAR(14),
	@MYIDDEST VARCHAR(14)
AS
BEGIN
	UPDATE INTERLOCUTEUR SET CODEFONCTION=CAST (@MYIDSOURCE AS INTEGER), DATEMAJ=CURRENT_TIMESTAMP WHERE CODEFONCTION=@MYIDDEST
	UPDATE PERSONNEL SET CODEFONCTION=CAST (@MYIDSOURCE AS INTEGER),DATEMAJ=CURRENT_TIMESTAMP WHERE CODEFONCTION=CAST (@MYIDDEST AS INTEGER)
	UPDATE RESIDANTS SET CODEFONCTION=CAST (@MYIDSOURCE AS INTEGER),DATEMAJ=CURRENT_TIMESTAMP WHERE CODEFONCTION=CAST (@MYIDDEST AS INTEGER)

	UPDATE INTERLOCUTEUR SET FONCTION=(SELECT LIBELLE FROM FONCTION WHERE CODEFONCTION=CAST (@MYIDSOURCE AS INTEGER)),DATEMAJ=CURRENT_TIMESTAMP WHERE CODEFONCTION=CAST (@MYIDSOURCE AS INTEGER)
	UPDATE RESIDANTS SET FONCTION=(SELECT LIBELLE FROM FONCTION WHERE CODEFONCTION=CAST (@MYIDSOURCE AS INTEGER)),DATEMAJ=CURRENT_TIMESTAMP WHERE CODEFONCTION=CAST (@MYIDSOURCE AS INTEGER)
	DELETE FROM FONCTION WHERE CODEFONCTION=CAST (@MYIDDEST AS INTEGER)
	DELETE FROM DEDUP_DEDUP WHERE DEDUP1ID=@MYIDDEST OR DEDUP2ID=@MYIDDEST
END
GO
IF OBJECT_ID('dbo.PS_DEPLACE_VISITE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_DEPLACE_VISITE;
GO
CREATE PROCEDURE dbo.PS_DEPLACE_VISITE
	@ENTITE VARCHAR(35),
	@VISITEID VARCHAR(14),
	@DESTINATAIRE VARCHAR(14)
AS
BEGIN
	IF @ENTITE='INTERLOCUTEUR' BEGIN
		UPDATE VISITES SET NOMPRENOMVISIT=(SELECT NOMPRENOM FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@DESTINATAIRE) WHERE VISITEID=@VISITEID
		UPDATE VISITES SET SOCIETEVISIT=(SELECT S.NOM FROM SOCIETE S,INTERLOCUTEUR I WHERE I.SOCIETEID=S.SOCIETEID AND I.INTERLOCUTEURID=@DESTINATAIRE) WHERE VISITEID=@VISITEID

		UPDATE VISITES SET ILIEUNAISSANCE=(SELECT LIEUNAISSANCE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@DESTINATAIRE) WHERE VISITEID=@VISITEID
		UPDATE VISITES SET INOMJEUNEFILLE=(SELECT NOMJEUNEFILLE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@DESTINATAIRE) WHERE VISITEID=@VISITEID
		UPDATE VISITES SET IDATENAISSANCE=(SELECT DATENAISSANCE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@DESTINATAIRE) WHERE VISITEID=@VISITEID
		UPDATE VISITES SET IFONCTION=(SELECT F.LIBELLE FROM FONCTION F,INTERLOCUTEUR I WHERE I.CODEFONCTION=F.CODEFONCTION AND I.INTERLOCUTEURID=@DESTINATAIRE) WHERE VISITEID=@VISITEID
		UPDATE VISITES SET IPAYS=(SELECT P.LIBELLE FROM PAYS P,INTERLOCUTEUR I WHERE I.NATIONALITEID=P.PAYSID AND I.INTERLOCUTEURID=@DESTINATAIRE) WHERE VISITEID=@VISITEID
		UPDATE VISITES SET INTERLOCUTEURID=@DESTINATAIRE, DATEMAJ=CURRENT_TIMESTAMP WHERE VISITEID=@VISITEID
		UPDATE HVISITES SET INTERLOCUTEURID=@DESTINATAIRE,DATEMAJ=CURRENT_TIMESTAMP WHERE VISITEID=@VISITEID
		UPDATE VISITES_TEMP SET INTERLOCUTEURID=@DESTINATAIRE, DATEMAJ=CURRENT_TIMESTAMP WHERE VISITEID=@VISITEID
	END
	IF @ENTITE='RESIDANT' BEGIN
		UPDATE VISITES SET NOMPRENOMRESID=(SELECT NOMPRENOM FROM RESIDANTS WHERE RESIDANTID=@DESTINATAIRE) WHERE VISITEID=@VISITEID
		UPDATE VISITES SET SOCIETERESID=(SELECT S.NOM FROM SOCIETE S,RESIDANTS R WHERE R.SOCIETEID=S.SOCIETEID AND R.RESIDANTID=@DESTINATAIRE) WHERE VISITEID=@VISITEID
		UPDATE VISITES SET RESIDANTID=@DESTINATAIRE, DATEMAJ=CURRENT_TIMESTAMP WHERE VISITEID=@VISITEID
		UPDATE HVISITES SET RESIDANTID=@DESTINATAIRE,DATEMAJ=CURRENT_TIMESTAMP WHERE VISITEID=@VISITEID
		UPDATE VISITES_TEMP SET RESIDANTID=@DESTINATAIRE, DATEMAJ=CURRENT_TIMESTAMP WHERE VISITEID=@VISITEID
	END
END
GO

IF OBJECT_ID('dbo.PS_MODULE_PURGE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_MODULE_PURGE;
GO
CREATE PROCEDURE dbo.PS_MODULE_PURGE
    --INTERLOCUTEUR
	@INTsansvisites VARCHAR(10),
    @INTsansvisitesnbjours VARCHAR(10),
    @INTsansvisitesdate varchar(20),
    @INTsesvisites varchar(10),
	@INTanonymevisites varchar(10),
	@INTnoninterdit varchar(10),
    @INTsescolis varchar(10),
	@INTsesconsignesetmessages varchar(10),
	@INTsescourstaxis varchar(10),
	@INTconsigne varchar(10),
	--RESIDANTS
	@RESnonactif VARCHAR(10),
    @RESsesvisites VARCHAR(10),
    @RESnonmajnbjours VARCHAR(10),
    @RESnonmajdate VARCHAR(20),

	--VISITEUR
	@VISdatantdeplusnbjour varchar(10),
	@VISanterieurdate varchar(20),
	@VISanonymevisites varchar(10),
	--SOCIETE
	@SOCnonutilise varchar(10),

	--CONSIGNE
	@CONsupmessageslus varchar(10),

	--COLISEMIS/COLISRECU
	@COLcolis varchar(10),

	--TACHE_LOG
	@TALpurge varchar(10),

	--Tache
	@TACexecuteouinactive varchar(10),
	@TACsesconfigs varchar(10),

	--MAIL
	@MAIenvoye varchar(10),

	--AGENDA_JOUR2
	@AJ2termine varchar(10),

	--RESERVATION/LGRESERVATION
	@LGRtermineedepuisnbjours varchar(10),
	@LGRtermineedepuisdate varchar(20),

    @ID VARCHAR(18) OUTPUT
as
BEGIN
DECLARE @nbvispurge INT
DECLARE @nbpurge INT
DECLARE @nbrespurge INT
DECLARE @nbintpurge INT
SET  @nbvispurge=0
SET  @nbpurge=0
	SELECT INTERLOCUTEURID INTO #MYINTERLOCUTEUR FROM INTERLOCUTEUR I WHERE
		  (
	   I.INTERLOCUTEURID<>'VPARDEFAUT'
	   )
	   AND
	   0=(SELECT COUNT(INTERLOCUTEURID) FROM VISITES WHERE INTERLOCUTEURID=I.INTERLOCUTEURID AND statutid in (8,1,33,34))
	   AND
		(	((
				(
				@INTsansvisites<>'' and @INTsansvisites is not null and (0=(SELECT COUNT(INTERLOCUTEURID) FROM VISITES WHERE INTERLOCUTEURID=I.INTERLOCUTEURID AND statutid in (-2,2,16,32,35)))
				)
			)
			OR
			(
				@INTsansvisitesnbjours<>'' and @INTsansvisitesnbjours is not null and 0=(select COUNT(interlocuteurid) from visites where
				(DATEADD(DD,CAST (@INTsansvisitesnbjours AS INT) ,CONVERT(DATETIME,finvisite,103))>CONVERT(DATETIME,current_timestamp,103) AND STATUTID IN (16,35)
				OR
				(DATEADD(DD,CAST (@INTsansvisitesnbjours AS INT),CONVERT(DATETIME,finprevu,103))>CONVERT(DATETIME,current_timestamp,103) AND STATUTID IN (-2,2,32))
				) 	AND (I.INTERLOCUTEURID=INTERLOCUTEURID)
				)
			)
			OR
			(
				@INTsansvisitesdate<>'' and @INTsansvisitesdate is not null and 0=(select count(interlocuteurid) from visites where
				(CONVERT(DATETIME,finvisite,103)>CONVERT(DATETIME,@INTsansvisitesdate,103) AND STATUTID IN (16,35)
				OR
				CONVERT(DATETIME,finprevu,103)>CONVERT(DATETIME,@INTsansvisitesdate,103) AND STATUTID IN(-2,2,32)
				)
				AND (I.INTERLOCUTEURID=INTERLOCUTEURID)
				)

			)
		)
		AND
			(
				(@INTnoninterdit<>'' and @INTnoninterdit is not null)
				OR
				(
				( (@INTnoninterdit='' or @INTnoninterdit is  null) and (I.interdit='0' or I.interdit is null) )
				)
			)
		AND
			(
				(@INTconsigne<>'' and @INTconsigne is not null)
				OR
				(
				(@INTconsigne='' or @INTconsigne is  null) and
				( 0=(SELECT COUNT(CONSIGNEID) FROM CONSIGNE WHERE RESIDANTID='VISITEUR' AND INTERLOCUTEURID=I.INTERLOCUTEURID))

				)

			)
		)
			SET  @nbvispurge =(SELECT COUNT(VISITEID) FROM VISITES WHERE STATUTID=-1 OR (
			STATUTID NOT IN (1,8,33,34) AND
				(
					(@VISdatantdeplusnbjour<>''  AND @VISdatantdeplusnbjour IS NOT NULL
					 AND
						(
							(DATEADD(DD,CAST (@VISdatantdeplusnbjour AS INT) ,CONVERT(DATETIME,finvisite,103))<CONVERT(DATETIME,current_timestamp,103) AND STATUTID IN (16,35) )
							OR
							(DATEADD(DD,CAST (@VISdatantdeplusnbjour AS INT) ,CONVERT(DATETIME,finprevu,103))<CONVERT(DATETIME,current_timestamp,103)	AND STATUTID IN (-2,2,32))
						 )
					)
					OR
					(@VISanterieurdate<>'' AND @VISanterieurdate IS NOT NULL
					AND
						(
							(CONVERT(DATETIME,finvisite,103)<CONVERT(DATETIME,@VISanterieurdate,103) AND STATUTID IN (16,35) )
							OR
							(CONVERT(DATETIME,FINPREVU,103)<CONVERT(DATETIME,@VISanterieurdate,103) AND STATUTID IN (-2,2,32) )
						)
					)
				)))

		If @VISanonymevisites<>'' and @VISanonymevisites is not null BEGIN


		UPDATE VISITES SET INTERLOCUTEURID='VPARDEFAUT',NOMPRENOMVISIT=(SELECT NOMPRENOM FROM INTERLOCUTEUR WHERE INTERLOCUTEURID='VPARDEFAUT') WHERE
			STATUTID=-1 OR (STATUTID NOT IN (1,8,33,34) AND

				(
					(@VISdatantdeplusnbjour<>''  AND @VISdatantdeplusnbjour IS NOT NULL
					 AND
						(
							(DATEADD(DD,CAST (@VISdatantdeplusnbjour AS INT) ,CONVERT(DATETIME,finvisite,103))<CONVERT(DATETIME,current_timestamp,103) AND STATUTID IN (16,35) )
							OR
							(DATEADD(DD,CAST (@VISdatantdeplusnbjour AS INT) ,CONVERT(DATETIME,finprevu,103))<CONVERT(DATETIME,current_timestamp,103)	AND STATUTID IN (-2,2,32))
						 )
					)
					OR
					(@VISanterieurdate<>'' AND @VISanterieurdate IS NOT NULL
					AND
						(
							(CONVERT(DATETIME,finvisite,103)<CONVERT(DATETIME,@VISanterieurdate,103) AND STATUTID IN (16,35) )
							OR
							(CONVERT(DATETIME,FINPREVU,103)<CONVERT(DATETIME,@VISanterieurdate,103) AND STATUTID IN (-2,2,32)) )
					)
				)
			)
			
		END ELSE BEGIN
			DELETE FROM VISITES  WHERE
			STATUTID=-1 OR (
			STATUTID NOT IN (1,8,33,34) AND

				(
					(@VISdatantdeplusnbjour<>''  AND @VISdatantdeplusnbjour IS NOT NULL
					 AND
						(
							(DATEADD(DD,CAST (@VISdatantdeplusnbjour AS INT) ,CONVERT(DATETIME,finvisite,103))<CONVERT(DATETIME,current_timestamp,103) AND STATUTID IN (16,35) )
							OR
							(DATEADD(DD,CAST (@VISdatantdeplusnbjour AS INT) ,CONVERT(DATETIME,finprevu,103))<CONVERT(DATETIME,current_timestamp,103)	AND STATUTID IN (-2,2,32))
						 )
					)
					OR
					(@VISanterieurdate<>'' AND @VISanterieurdate IS NOT NULL
					AND
						(
							(CONVERT(DATETIME,finvisite,103)<CONVERT(DATETIME,@VISanterieurdate,103) AND STATUTID IN (16,35) )
							OR
							(CONVERT(DATETIME,FINPREVU,103)<CONVERT(DATETIME,@VISanterieurdate,103) AND STATUTID IN (-2,2,32) )
						)
					)
				))
	END

	If @INTanonymevisites<>'' and @INTanonymevisites is not null and @INTsesvisites<>'' BEGIN
		UPDATE VISITES SET INTERLOCUTEURID='VPARDEFAUT',NOMPRENOMVISIT=(SELECT NOMPRENOM FROM INTERLOCUTEUR WHERE INTERLOCUTEURID='VPARDEFAUT') WHERE  STATUTID NOT IN (1,8,33,34) AND interlocuteurid IN (  SELECT INTERLOCUTEURID FROM #MYINTERLOCUTEUR)
	END
	IF @INTsesvisites<>'' AND (@INTanonymevisites='' or @INTanonymevisites is null)   BEGIN
		DELETE FROM VISITES WHERE  STATUTID NOT IN (1,8,33,34) AND interlocuteurid IN ( SELECT INTERLOCUTEURID FROM #MYINTERLOCUTEUR )
	END
	DELETE FROM VISITE_ACTION WHERE (SELECT COUNT(VISITEID) FROM VISITES WHERE VISITEID=VISITE_ACTION.VISITEID)=0
	DELETE FROM VISITE_REGLE WHERE (SELECT COUNT(VISITEID) FROM VISITES WHERE VISITEID=VISITE_REGLE.VISITEID)=0

	DELETE FROM IDENTITES WHERE  INTERLOCUTEURID IN ( SELECT INTERLOCUTEURID FROM #MYINTERLOCUTEUR )
	DELETE FROM XANNEXE WHERE ORIGINE='INTERLOCUTEUR' AND ORIGINEID IN (SELECT INTERLOCUTEURID FROM #MYINTERLOCUTEUR)
	DELETE FROM INTER_ACTION WHERE (SELECT COUNT(INTERLOCUTEURID) FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=INTER_ACTION.INTERLOCUTEURID)=0
	DELETE FROM INTERLOCUTEUR  WHERE INTERLOCUTEURID IN ( SELECT INTERLOCUTEURID FROM #MYINTERLOCUTEUR )

	IF @INTsescolis<>'' and @INTsescolis is not null BEGIN
		DELETE FROM COLISEMIS WHERE INTERLOCUTEURID IN ( SELECT INTERLOCUTEURID FROM #MYINTERLOCUTEUR )
		DELETE FROM COLISRECU WHERE INTERLOCUTEURID IN ( SELECT INTERLOCUTEURID FROM #MYINTERLOCUTEUR )
	END
	if(@INTsesconsignesetmessages<>'')begin
		DELETE FROM CONSIGNE WHERE INTERLOCUTEURID IN ( SELECT INTERLOCUTEURID FROM #MYINTERLOCUTEUR )
	END
	IF @INTsescourstaxis<>'' AND @INTsescourstaxis IS NOT NULL BEGIN
	delete from course where ID_COURSE in (select ID_course from PASSAGERTAXI where interlocuteurid IN ( SELECT INTERLOCUTEURID FROM #MYINTERLOCUTEUR ))
	delete from PASSAGERTAXI where interlocuteurid IN ( SELECT INTERLOCUTEURID FROM #MYINTERLOCUTEUR )

	END

	SELECT residantid INTO #MYRESIDANT
	   from residants
		where
		(residantid<>'VPARDEFAUT') AND
		((@RESnonmajnbjours<>'' and @RESnonmajnbjours is not null and datemaj<current_timestamp-cast(@RESnonmajnbjours as int)) OR
		(@RESnonmajdate <>'' and @RESnonmajdate is not null and datediff(d,datemaj,cast(@RESnonmajdate as datetime))<0) OR
		(@RESnonactif<>'' and @RESnonactif is not null and isactif='0')
		AND (
		(@INTnoninterdit<>'' and @INTnoninterdit is not null)
			OR
			(
			(@INTnoninterdit='' or @INTnoninterdit is  null) and (interdit='0' or interdit is null)
			)
		))

			DELETE FROM HVISITES WHERE  RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)
			DELETE FROM HVISITES WHERE  RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)
			DELETE FROM PASSAGER WHERE  RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)
			DELETE FROM PASSAGERTAXI WHERE RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)
			DELETE FROM LGPARTICIPANT WHERE  RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)
			DELETE FROM HLGPARTICIPANT WHERE RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)
			DELETE FROM SECRETARIAT where RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT) OR RESIDANTID2 IN (SELECT RESIDANTID FROM #MYRESIDANT)
			DELETE FROM LIEUPERMIS WHERE  RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)
			DELETE FROM USERS WHERE EXTERNALID IN (SELECT RESIDANTID FROM #MYRESIDANT)
			DELETE FROM VEHICULE WHERE  RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)
			DELETE FROM COLISEMIS WHERE  RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)
			DELETE FROM COLISRECU WHERE  RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)
			DELETE FROM CONSIGNE WHERE RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)
			DELETE FROM EVENEMENTCOLIS WHERE  RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)
			DELETE FROM FACTURE WHERE  RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)
			DELETE FROM DROITS WHERE  RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)
			DELETE FROM VEHICULE_DEMANDE WHERE  RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)
			DELETE FROM INTER_RSERVICE WHERE  RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)

			IF   (@RESsesvisites is not null and @RESsesvisites<>'')  BEGIN
					DELETE FROM VISITE_CONTROLE WHERE RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)
					DELETE FROM VISITES_RESIDANTS WHERE RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)
					DELETE FROM VISITES_TEMP WHERE RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)
					DELETE FROM ZCL01_VISITERE WHERE RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)
					DELETE FROM VISITES WHERE RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)

			END ELSE BEGIN
					UPDATE VISITE_CONTROLE  SET RESIDANTID='VPARDEFAUT'  WHERE RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)
					UPDATE VISITES_RESIDANTS  SET RESIDANTID='VPARDEFAUT'  WHERE RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT) ;
					UPDATE VISITES_TEMP  SET RESIDANTID='VPARDEFAUT'  WHERE RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)
					UPDATE ZCL01_VISITERE  SET RESIDANTID='VPARDEFAUT'  WHERE RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)
					UPDATE VISITES SET RESIDANTID='VPARDEFAUT', NOMPRENOMRESID=(SELECT NOM+' '+PRENOM FROM RESIDANTS WHERE RESIDANTID='VPARDEFAUT') WHERE RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT)
			END

	DELETE from RESIDANTS WHERE RESIDANTID IN (SELECT RESIDANTID FROM #MYRESIDANT) AND RESIDANTID NOT IN (SELECT RESIDANTID FROM VISITES)
	DELETE FROM VALIDATION_ENQUETE WHERE VISITEID NOT IN (SELECT VISITEID FROM VISITES)
	DELETE FROM VISITE_REGLE WHERE VISITEID NOT IN (SELECT VISITEID FROM VISITES)
	DELETE FROM TACHE WHERE @TACexecuteouinactive<>'' and @TACexecuteouinactive is not null and actif<0
	DELETE FROM CFG_FICHIER WHERE  @TACsesconfigs<>'' AND CFG_FICHIERID IN (SELECT ACT_PARAM FROM TACHE WHERE @TACexecuteouinactive<>'' and @TACexecuteouinactive is not null and actif<0)
	DELETE FROM TACHE_LOG WHERE @TALpurge<>''
	DELETE FROM MAIL WHERE STATUT<>-1 AND @MAIenvoye<>''
	DELETE FROM agenda_jour2 where STATUT=5 AND (@AJ2termine<>'')
	DELETE FROM COLISEMIS WHERE  (@COLcolis<>'')
	DELETE FROM COLISRECU WHERE  (@COLcolis<>'')
	DELETE FROM CONSIGNE where TYPECONSIGNE='MESSAGES' AND DATELU is not null AND (@CONsupmessageslus<>'')
	DELETE FROM SOCIETE WHERE (@SOCnonutilise<>'') AND societeid in ( SELECT SOCIETEID FROM SOCIETE I WHERE
	 0=(Select COUNT(societeid) from interlocuteur WHERE SOCIETEID=I.SOCIETEID) AND 0=(select COUNT(societeid) from residants WHERE SOCIETEID=I.SOCIETEID)) AND SOCIETEID<>'VPARDEFAUT'
	DELETE FROM reservation where codereservation in (SELECT CODERESERVATION FROM LGRESERVATION WHERE CODERESERVATION IN (SELECT codelgreservation
	   from lgreservation
	   where
		(@LGRtermineedepuisnbjours<>'' and @LGRtermineedepuisnbjours is not null and DateAdd(DD, cast(@LGRtermineedepuisnbjours as int),CONVERT(DATETIME,datefin,103))<CONVERT(DATETIME,current_timestamp,103)))
		OR
		(@LGRtermineedepuisdate<>'' and @LGRtermineedepuisdate is not null and CONVERT(DATETIME,datefin,103)<CONVERT(DATETIME,@LGRtermineedepuisdate,103)))

	DELETE FROM LGRESERVATION WHERE  codelgreservation IN (SELECT codelgreservation
	   from lgreservation
	   where
		(@LGRtermineedepuisnbjours<>'' and @LGRtermineedepuisnbjours is not null and DateAdd(DD, cast(@LGRtermineedepuisnbjours as int),CONVERT(DATETIME,datefin,103))<CONVERT(DATETIME,current_timestamp,103)))
		OR
		(@LGRtermineedepuisdate<>'' and @LGRtermineedepuisdate is not null and CONVERT(DATETIME,datefin,103)<CONVERT(DATETIME,@LGRtermineedepuisdate,103))
	SET @nbrespurge=(SELECT COUNT(*) FROM #MYRESIDANT)
	SET @nbintpurge=(SELECT COUNT(*) FROM #MYINTERLOCUTEUR)
	SET @nbpurge=@nbintpurge+@nbrespurge+@nbvispurge;
	SET @ID=SUBSTRING(CAST (@nbpurge as varchar)+','+CAST(@nbrespurge as varchar)+','+CAST( @nbintpurge as varchar)+','+CAST (@nbvispurge as varchar),0,17)
	DROP TABLE #MYINTERLOCUTEUR
	DROP TABLE #MYRESIDANT
END
GO



IF OBJECT_ID('dbo.F_ISMISSION_READY', 'FN') IS NOT NULL
	DROP FUNCTION dbo.F_ISMISSION_READY;

GO
CREATE FUNCTION [dbo].[F_ISMISSION_READY](@TOLERANCE DATETIME,@HEURE DATETIME,@ANTICIPE INT,@HEUREJOUR DATETIME) RETURNS VARCHAR(1)
AS
BEGIN
DECLARE @RET VARCHAR(1)
   IF DATEADD(mi,@ANTICIPE,@HEUREJOUR) >  CONVERT(DATETIME,@HEURE-@TOLERANCE,103) BEGIN
	SET @RET='1'
   END ELSE BEGIN
   SET @RET='0'
   END
   RETURN @RET
END

GO

IF OBJECT_ID('dbo.F_GETMISSIONSTATUS', 'FN') IS NOT NULL
	DROP FUNCTION dbo.F_GETMISSIONSTATUS

GO
CREATE FUNCTION [dbo].[F_GETMISSIONSTATUS](@STATUS INT,@TOLERANCE DATETIME,@HEURE DATETIME,@ANTICIPE INT,@HEUREJOUR DATETIME,@DUREE DATETIME,@HEUREDEPART DATETIME) RETURNS INT
AS
BEGIN
DECLARE @RET INT
  SET @RET=@STATUS
  IF   CONVERT(DATETIME,@HEUREJOUR,103)< CONVERT(DATETIME,@HEURE-@TOLERANCE,103) AND @STATUS=0 BEGIN
	SET @RET=@STATUS
  END ELSE
   IF  CONVERT(DATETIME,@HEUREJOUR,103)< CONVERT(DATETIME,@HEURE+@TOLERANCE,103) AND @STATUS=0 BEGIN
	SET @RET=1
   END ELSE
   IF  CONVERT(DATETIME,@HEUREJOUR,103)> CONVERT(DATETIME,@HEURE+@TOLERANCE,103) AND (@STATUS=1 OR @STATUS=0) BEGIN
	SET @RET=2
   END  ELSE
   IF CONVERT(DATETIME,@HEUREJOUR,103)> CONVERT(DATETIME,@HEUREDEPART+@TOLERANCE+@DUREE,103) AND @STATUS=3 BEGIN
	SET @RET=4
   END
   RETURN @RET
END

GO

IF OBJECT_ID('dbo.PS_INS_AGENDA_JOUR2', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_INS_AGENDA_JOUR2;
GO
CREATE PROCEDURE [dbo].[PS_INS_AGENDA_JOUR2]
@AGENDA_JOURID VARCHAR(14)
AS

DECLARE @FLAG VARCHAR(14)
DECLARE @IDENTITY VARCHAR(14)
DECLARE @ID VARCHAR(14)
DECLARE @HEURE_MIS DATETIME
DECLARE @MISSIONID INT
DECLARE @SITEID  VARCHAR(14)
BEGIN
   SET DATEFIRST 7
   SET @HEURE_MIS=(SELECT HEURE FROM AGENDA_JOUR WHERE AGENDA_JOURID=@AGENDA_JOURID)
   SET @MISSIONID=(SELECT MISSIONID FROM AGENDA_JOUR WHERE AGENDA_JOURID=@AGENDA_JOURID)
   SET @SITEID=(SELECT SITEID FROM AGENDA_JOUR WHERE AGENDA_JOURID=@AGENDA_JOURID)
   INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
   SET @IDENTITY = (SELECT @@IDENTITY AS ID)
   SET @FLAG = (SELECT TOP 1 SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
   SET @ID = @FLAG + @IDENTITY
	 IF NOT EXISTS (SELECT AGENDA_JOUR2ID FROM AGENDA_JOUR2 WHERE AGENDA_JOURID=@AGENDA_JOURID AND HEURE=@HEURE_MIS AND MISSIONID=@MISSIONID AND DATEMISSION=CONVERT(DATETIME,CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,103),103) AND SITEID=@SITEID)
			BEGIN
				INSERT INTO AGENDA_JOUR2 (AGENDA_JOUR2ID,AGENDA_JOURID,HEURE,TOLERANCE,MISSIONID,POSTEID,STATUT,DATEMISSION,DATEMAJ,DATECREATION,SITEID)
				SELECT CAST(@ID AS BIGINT),AGENDA_JOURID,HEURE,TOLERANCE,MISSIONID,POSTEID,STATUT,CONVERT(DATETIME,CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,103),103),CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,SITEID FROM AGENDA_JOUR WHERE AGENDA_JOURID=@AGENDA_JOURID
			END
END
GO


IF OBJECT_ID('dbo.PS_UPDATE_AGENDA_JOUR2', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_UPDATE_AGENDA_JOUR2;
GO
CREATE PROCEDURE [dbo].[PS_UPDATE_AGENDA_JOUR2]
@AGENDA_JOUR2ID VARCHAR(14)
AS
DECLARE @POSTEID INT
DECLARE @SITEID VARCHAR(14)
DECLARE @FLAG VARCHAR(14)
DECLARE @IDENTITY VARCHAR(14)
DECLARE @ID VARCHAR(14)
DECLARE @HEURE_MIS DATETIME
--DECLARE @MISSIONID INT

DECLARE @ANTICIPE INT
DECLARE @LIBMISSION VARCHAR(100)
DECLARE @OBSERVATION VARCHAR(4000)
DECLARE @NEW_STATUT INT
DECLARE @OLD_STATUT INT
DECLARE @DUREE DATETIME
DECLARE @HEUREDEPART DATETIME
DECLARE @TOLERANCE_MIS DATETIME
DECLARE @HEUREJOUR DATETIME
DECLARE @res DATETIME
BEGIN
	SET DATEFIRST 7
	SET @HEUREJOUR=CONVERT(DATETIME,CURRENT_TIMESTAMP,103)
	SET @ANTICIPE=(SELECT TOP 1 OPTION_AVMISS FROM OMNI_PARAM)
	SET @HEURE_MIS=(SELECT  CONVERT(DATETIME,CONVERT(VARCHAR(10),DATEMISSION,103),103)+CONVERT(DATETIME,CONVERT(VARCHAR(5),HEURE,108),103)  FROM AGENDA_JOUR2 WHERE AGENDA_JOUR2ID=@AGENDA_JOUR2ID)
    SET @SITEID=(SELECT SITEID FROM AGENDA_JOUR2 WHERE AGENDA_JOUR2ID=@AGENDA_JOUR2ID)
    SET @TOLERANCE_MIS=(SELECT CONVERT(DATETIME,CONVERT(VARCHAR(5),TOLERANCE,108),103)  FROM VUE_AGENDA2MISSION WHERE AGENDA_JOUR2ID=@AGENDA_JOUR2ID)
	SET @DUREE =(SELECT CONVERT(DATETIME,CONVERT(VARCHAR(5),DUREE,108),103)  FROM VUE_AGENDA2MISSION WHERE AGENDA_JOUR2ID=@AGENDA_JOUR2ID)
	SET @LIBMISSION = (SELECT LIBMISSION FROM VUE_AGENDA2MISSION WHERE AGENDA_JOUR2ID=@AGENDA_JOUR2ID)
	SET @HEUREDEPART = (SELECT CONVERT(DATETIME,DATEMAJ,103)  FROM AGENDA_JOUR2 WHERE AGENDA_JOUR2ID=@AGENDA_JOUR2ID)
	SET @OLD_STATUT = (SELECT STATUT FROM AGENDA_JOUR2 WHERE AGENDA_JOUR2ID=@AGENDA_JOUR2ID)
	SET @NEW_STATUT=dbo.F_GETMISSIONSTATUS(@OLD_STATUT,@TOLERANCE_MIS,@HEURE_MIS,@ANTICIPE,@HEUREJOUR,@DUREE,@HEUREDEPART)
	SET @POSTEID=(SELECT POSTEID FROM AGENDA_JOUR2 WHERE AGENDA_JOUR2ID=@AGENDA_JOUR2ID)
	set @res = CONVERT(DATETIME,@HEURE_MIS+@TOLERANCE_MIS,103)
	--INSERT INTO ALARME(ALARMEID,LIBELLE,DATEMAJ,DATECREATION) VALUES ('-'+@AGENDA_JOUR2ID,CONVERT(VARCHAR,@res,103)+'#'+CAST (dbo.F_GETMISSIONSTATUS(@OLD_STATUT,@TOLERANCE_MIS,@HEURE_MIS,@ANTICIPE,@HEUREJOUR,@DUREE,@HEUREDEPART) AS VARCHAR)+'#'+CONVERT(VARCHAR,@HEURE_MIS,103)+'#'+CONVERT(VARCHAR,@DUREE,103)+'#'+CONVERT(VARCHAR,@TOLERANCE_MIS,103),CURRENT_TIMESTAMP,CURRENT_TIMESTAMP)
	IF @NEW_STATUT<>@OLD_STATUT AND @OLD_STATUT<>7 BEGIN
		UPDATE AGENDA_JOUR2 SET STATUT=dbo.F_GETMISSIONSTATUS(@OLD_STATUT,@TOLERANCE_MIS,@HEURE_MIS,@ANTICIPE,@HEUREJOUR,@DUREE,@HEUREDEPART) WHERE AGENDA_JOUR2ID=CAST(@AGENDA_JOUR2ID AS BIGINT)
		INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
		SET @IDENTITY = (SELECT @@IDENTITY AS ID)
		SET @FLAG = (SELECT TOP 1 SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
		SET @ID = @FLAG + @IDENTITY
		IF @NEW_STATUT=2 OR @NEW_STATUT=4 BEGIN
			IF @NEW_STATUT=2 BEGIN
				SET @OBSERVATION= @LIBMISSION+ ' ['+CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,103)+' '+CONVERT(VARCHAR(5),@HEURE_MIS,108)+'] Retard de départ'
			END
			ELSE IF @NEW_STATUT=4 BEGIN
				SET @OBSERVATION= @LIBMISSION+ ' ['+CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,103)+' '+CONVERT(VARCHAR(5),@HEURE_MIS,108)+'] Retard de retour'
			END
			INSERT INTO OJOURNAL(OJOURNALID,EVENEMENTID,PERSONNELDEBUTID,PERSONNELFINID,DEBUT_EFF,FIN_EFF,AGENDA_JOURID,MISSIONTEMPID,AGENDA_JOUR2ID,OBSERVATION,DATECREATION,DATEMAJ,SITEID,POSTEID)
			VALUES (@ID,'-4',-1,-1,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,0,0,@AGENDA_JOUR2ID,@OBSERVATION,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,@SITEID,@POSTEID)
		END
	END
END
GO

IF OBJECT_ID('dbo.PS_IMPORT_ROI', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_IMPORT_ROI;
GO
CREATE PROCEDURE dbo.PS_IMPORT_ROI
	@flagin int,
	@champctrl varchar(80),

	@mvt VARCHAR(03),
	@source VARCHAR(12),
	@etat VARCHAR(06),
	@raison VARCHAR(10),
	@identifiant VARCHAR(10),
	@qualitecivilite VARCHAR(5),
	@nom VARCHAR(50),
	@prenom VARCHAR(32),
	@societe VARCHAR(05),
	@unitemanageriale VARCHAR(20),
	@labelunitemanageriale VARCHAR(100),
	@typepopulation VARCHAR(02),
	@typepersonne VARCHAR(30),
	@iesocieteprestation VARCHAR(100),
	@iedebutmission VARCHAR(17),
	@iefinmission VARCHAR(17),
	@mail VARCHAR(100),
	@codefonction VARCHAR(04),
	@fonction VARCHAR(50),
	@site VARCHAR(3),
	@libellesite VARCHAR(32),
	@batiment VARCHAR(3),
	@etage VARCHAR(3),
	@numerobureau VARCHAR(6),
	@rue VARCHAR(120),
	@codepostal VARCHAR(5),
	@ville VARCHAR(32),
	@pays VARCHAR(3),
	@telephone VARCHAR(13),
	@telephoneinterne VARCHAR(6),
	@fax VARCHAR(13),
	@codenaturecontrattravail VARCHAR(05),
	@indabsencelongueduree VARCHAR(01),
	@statutpersonne VARCHAR(02),
	@codeantenne VARCHAR(20),
	@anciensite VARCHAR(3),
	@anciencodeantenne VARCHAR(20),
	@thelogin VARCHAR(50),
	@ID VARCHAR(18) OUTPUT

AS
	DECLARE @identity VARCHAR(14)
	DECLARE @flag VARCHAR(14)
	DECLARE @myid VARCHAR(14)

	DECLARE @locmvt VARCHAR(03)
	DECLARE @locsource VARCHAR(12)
	DECLARE @locetat VARCHAR(06)
	DECLARE @locraison VARCHAR(10)
	DECLARE @locidentifiant VARCHAR(10)
	DECLARE @locqualitecivilite VARCHAR(5)
	DECLARE @locnom VARCHAR(50)
	DECLARE @locprenom VARCHAR(32)
	DECLARE @locsociete VARCHAR(05)
	DECLARE @locunitemanageriale VARCHAR(20)
	DECLARE @loclabelunitemanageriale VARCHAR(100)
	DECLARE @loctypepopulation VARCHAR(02)
	DECLARE @loctypepersonne VARCHAR(30)
	DECLARE @lociesocieteprestation VARCHAR(100)
	DECLARE @lociedebutmission VARCHAR(17)
	DECLARE @lociefinmission VARCHAR(17)
	DECLARE @locmail VARCHAR(100)
	DECLARE @loccodefonction VARCHAR(04)
	DECLARE @locfonction VARCHAR(50)
	DECLARE @locsite VARCHAR(3)
	DECLARE @loclibellesite VARCHAR(32)
	DECLARE @locbatiment VARCHAR(3)
	DECLARE @locetage VARCHAR(3)
	DECLARE @locnumerobureau VARCHAR(6)
	DECLARE @locrue VARCHAR(120)
	DECLARE @loccodepostal VARCHAR(5)
	DECLARE @locville VARCHAR(32)
	DECLARE @locpays VARCHAR(3)
	DECLARE @loctelephone VARCHAR(13)
	DECLARE @loctelephoneinterne VARCHAR(6)
	DECLARE @locfax VARCHAR(13)
	DECLARE @loccodenaturecontrattravail VARCHAR(05)
	DECLARE @locindabsencelongueduree VARCHAR(01)
	DECLARE @locstatutpersonne VARCHAR(02)
	DECLARE @loccodeantenne VARCHAR(20)
	DECLARE @locanciensite VARCHAR(3)
	DECLARE @locanciencodeantenne VARCHAR(20)
	DECLARE @locnomprenom varchar(70)
    DECLARE @locid varchar(14)
	DECLARE @locthelogin varchar(50)
	DECLARE @nbupdate int
	DECLARE @nbinsert int
	DECLARE @TMP int

BEGIN
	SET @nbupdate = 0
	SET @nbinsert = 0

	-- Initiallisation
	SET @locmvt=@mvt
	SET @locsource= @source
	SET @locetat= @etat
	SET @locraison= @raison
	SET @locidentifiant= @identifiant
	SET @locqualitecivilite= @qualitecivilite
	SET @locnom= @nom
	SET @locprenom= @prenom
	SET @locsociete= @societe
	SET @locunitemanageriale= @unitemanageriale
	SET @loclabelunitemanageriale= @labelunitemanageriale
	SET @loctypepopulation= @typepopulation
	SET @loctypepersonne=  @typepersonne
	SET @lociesocieteprestation= @iesocieteprestation
	SET @lociedebutmission= @iedebutmission
	SET @lociefinmission= @iefinmission
	SET @locmail= @mail
	SET @loccodefonction= @codefonction
	SET @locfonction= @fonction
	SET @locsite= @site
	SET @loclibellesite= @libellesite
	SET @locbatiment= @batiment
	SET @locetage= @etage
	SET @locnumerobureau= @numerobureau
	SET @locrue= @rue
	SET @loccodepostal= @codepostal
	SET @locville= @ville
	SET @locpays= @pays
	SET @loctelephone= @telephone
	SET @loctelephoneinterne= @telephoneinterne
	SET @locfax= @fax
	SET @loccodenaturecontrattravail= @codenaturecontrattravail
	SET @locindabsencelongueduree= @indabsencelongueduree
	SET @locstatutpersonne= @statutpersonne
	SET @loccodeantenne= @codeantenne
	SET @locanciensite= @anciensite
	SET @locanciencodeantenne= @anciencodeantenne
	SET @locthelogin=@thelogin

	IF @locmvt='##' BEGIN
		SET @locmvt=''
	END
	IF @locsource='##' BEGIN
	SET @locsource=''
	END
	IF @locetat='##' BEGIN
	SET @locetat=''
	END
	IF @locraison='##'  BEGIN
	SET @locraison=''
	END
	IF @locidentifiant='##'  BEGIN
	 SET @locidentifiant=''
	END
	IF @locqualitecivilite='##'  BEGIN
	SET @locqualitecivilite=''
	END
	IF @locnom='##'  BEGIN
	SET @locnom=''
	END
	IF @locprenom='##'  BEGIN
	SET @locprenom=''
	END
	IF @locsociete='##'  BEGIN
	SET @locsociete=''
	END
	IF @locunitemanageriale='##'  BEGIN
	SET @locunitemanageriale=''
	END
	IF @loclabelunitemanageriale='##'  BEGIN
	SET @loclabelunitemanageriale=''
	END
	IF @loctypepopulation='##'  BEGIN
	SET @loctypepopulation=''
	END
	IF @loctypepersonne='##'  BEGIN
	SET @loctypepersonne=''
	END
	IF @lociesocieteprestation='##'  BEGIN
	SET @lociesocieteprestation=''
	END
	IF @lociedebutmission='##'  BEGIN
	SET @lociedebutmission=''
	END
	IF @lociefinmission='##'  BEGIN
	SET @lociefinmission=''
	END
	IF @locmail='##'  BEGIN
	SET @locmail=''
	END
	IF @loccodefonction='##'  BEGIN
	SET  @loccodefonction=''
	END
	IF @locfonction='##'  BEGIN
	SET  @locfonction=''
	END
	IF @locsite='##'  BEGIN
	SET @locsite=''
	END
	IF @loclibellesite='##'  BEGIN
	SET @loclibellesite=''
	END
	IF @locbatiment='##'  BEGIN
	SET @locbatiment=''
	END
	IF @locetage='##'  BEGIN
	 SET @locetage=''
	END
	IF @locnumerobureau='##'  BEGIN
	SET @locnumerobureau=''
	END
	IF @locrue='##'  BEGIN
	SET @locrue=''
	END
	IF @loccodepostal='##'  BEGIN
	SET @loccodepostal=''
	END
	IF @locville='##'  BEGIN
	SET @loccodepostal=''
	END
	IF @locpays='##'  BEGIN
	SET @loccodepostal=''
	END
	IF @loctelephone='##'  BEGIN
	SET  @loctelephone=''
	END
	IF @loctelephoneinterne='##'  BEGIN
	 SET @loctelephoneinterne=''
	END
	IF @locfax='##'  BEGIN
	SET  @locfax=''
	END
	IF @loccodenaturecontrattravail='##'  BEGIN
	SET  @loccodenaturecontrattravail=''
	END
	IF @locindabsencelongueduree='##'  BEGIN
	SET  @locindabsencelongueduree=''
	END
	IF @locstatutpersonne='##'  BEGIN
	 SET  @locstatutpersonne=''
	END
	IF @loccodeantenne='##'  BEGIN
	SET  @loccodeantenne=''
	END
	IF @locanciensite='##'  BEGIN
	SET @locanciensite=''
	END
	IF @locanciencodeantenne='##'  BEGIN
	SET @locanciencodeantenne=''
	END
	IF @locthelogin='##'  BEGIN
		SET @locthelogin='';
	END
	SET @locnomprenom=@locnom+' '+@locprenom

    IF (@locnom IS NOT NULL AND LTRIM(@locnom) IS NOT NULL) AND LTRIM(@locprenom) IS NOT NULL BEGIN



		SET @TMP = (SELECT COUNT(*) FROM IMPORT R WHERE
			  CASE
			  	  	WHEN  @champctrl='' AND UPPER(NOM)+' '+UPPER(PRENOM)=UPPER(@locnomprenom) THEN 1
					WHEN  @champctrl='IDENTIFIANT' AND (UPPER(NOM)+' '+UPPER(PRENOM)=UPPER(@locnomprenom)) AND (IDENTIFIANT=@locidentifiant or @locidentifiant is null) THEN 1
					ELSE 0
			  END=1)
		IF @TMP>0 BEGIN
			SET @ID = (SELECT TOP 1 IMPORT_ROIID FROM IMPORT_ROI WHERE
			 CASE
			  	  	WHEN  @champctrl='' AND UPPER(NOM)+' '+UPPER(PRENOM)=UPPER(@locnomprenom) THEN 1
					WHEN  @champctrl='IDENTIFIANT' AND (UPPER(NOM)+' '+UPPER(PRENOM)=UPPER(@locnomprenom))  AND (IDENTIFIANT=@locidentifiant or @locidentifiant is null) THEN 1
					ELSE 0
			 END=1)

			IF @locmvt<>'##' or @locmvt IS NULL  BEGIN
				UPDATE IMPORT_ROI SET MVT=@locmvt,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locidentifiant<>'##' or @locidentifiant IS NULL  BEGIN
				UPDATE IMPORT_ROI SET IDENTIFIANT=@locidentifiant,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locsource<>'##' or @locsource IS NULL  BEGIN
				UPDATE IMPORT_ROI SET SOURCE=@locsource,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locetat<>'##' or @locetat IS NULL  BEGIN
				UPDATE IMPORT_ROI SET etat=@locetat,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locraison<>'##' or @locraison IS NULL  BEGIN
				UPDATE IMPORT_ROI SET RAISON=@locraison,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locqualitecivilite<>'##' or @locqualitecivilite IS NULL  BEGIN
				UPDATE IMPORT_ROI SET QUALITECIVILITE=@locqualitecivilite,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locnom<>'##' OR @locnom IS NULL BEGIN
				UPDATE IMPORT_ROI SET NOM=@locnom,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locprenom<>'##' OR @locprenom IS NULL BEGIN
				UPDATE IMPORT_ROI SET PRENOM=@locprenom,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locsociete<>'##' OR @locsociete IS NULL BEGIN
				UPDATE IMPORT_ROI SET SOCIETE=@locsociete,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locunitemanageriale<>'##' OR @locunitemanageriale IS NULL BEGIN
				UPDATE IMPORT_ROI SET UNITEMANAGERIALE=@locunitemanageriale,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @loclabelunitemanageriale<>'##' OR @loclabelunitemanageriale IS NULL BEGIN
				UPDATE IMPORT_ROI SET LABELUNITEMANAGERIALE=@loclabelunitemanageriale,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @loctypepopulation<>'##' OR @loctypepopulation IS NULL BEGIN
				UPDATE IMPORT_ROI SET TYPEPOPULATION=@loctypepopulation,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @loctypepersonne<>'##' OR @loctypepersonne IS NULL BEGIN
				UPDATE IMPORT_ROI SET TYPEPERSONNE=@loctypepersonne,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @lociesocieteprestation<>'##' OR @lociesocieteprestation IS NULL BEGIN
				UPDATE IMPORT_ROI SET IESOCIETEPRESTATION=@lociesocieteprestation,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @lociedebutmission<>'##' OR @lociedebutmission IS NULL BEGIN
				UPDATE IMPORT_ROI SET IEDEBUTMISSION=@lociedebutmission,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @lociefinmission<>'##' OR @lociefinmission IS NULL BEGIN
				UPDATE IMPORT_ROI SET IEFINMISSION=@lociefinmission,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locmail<>'##' OR @locmail IS NULL BEGIN
				UPDATE IMPORT_ROI SET MAIL=@locmail,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @loccodefonction<>'##' OR @loccodefonction IS NULL BEGIN
				UPDATE IMPORT_ROI SET CODEFONCTION=@loccodefonction,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locfonction<>'##' OR @locfonction IS NULL BEGIN
				UPDATE IMPORT_ROI SET FONCTION=@locfonction,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locsite<>'##' OR @locsite IS NULL BEGIN
				UPDATE IMPORT_ROI SET SITE=@locsite,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @loclibellesite<>'##' OR @loclibellesite IS NULL BEGIN
				UPDATE IMPORT_ROI SET LIBELLESITE=@loclibellesite,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locbatiment<>'##' OR @locbatiment IS NULL BEGIN
				UPDATE IMPORT_ROI SET BATIMENT=@locbatiment,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locetage<>'##' OR @locetage IS NULL BEGIN
				UPDATE IMPORT_ROI SET ETAGE=@locetage,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locnumerobureau<>'##' OR @locnumerobureau IS NULL BEGIN
				UPDATE IMPORT_ROI SET NUMEROBUREAU=@locnumerobureau,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locrue<>'##' OR @locrue IS NULL BEGIN
				UPDATE IMPORT_ROI SET RUE=@locrue,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @loccodepostal<>'##' OR @loccodepostal IS NULL BEGIN
				UPDATE IMPORT_ROI SET CODEPOSTAL=@loccodepostal,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locville<>'##' OR @locville IS NULL BEGIN
				UPDATE IMPORT_ROI SET VILLE=@locville,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locpays<>'##' OR @locpays IS NULL BEGIN
				UPDATE IMPORT_ROI SET PAYS=@locpays,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @loctelephone<>'##' OR @loctelephone IS NULL BEGIN
				UPDATE IMPORT_ROI SET TELEPHONE=@loctelephone,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @loctelephoneinterne<>'##' OR @loctelephoneinterne IS NULL BEGIN
				UPDATE IMPORT_ROI SET TELEPHONEINTERNE=@loctelephoneinterne,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locfax<>'##' OR @locfax IS NULL BEGIN
				UPDATE IMPORT_ROI SET FAX=@locfax,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @loccodenaturecontrattravail<>'##' OR @loccodenaturecontrattravail IS NULL BEGIN
				UPDATE IMPORT_ROI SET CODENATURECONTRATTRAVAIL=@loccodenaturecontrattravail,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locindabsencelongueduree<>'##' OR @locindabsencelongueduree IS NULL BEGIN
				UPDATE IMPORT_ROI SET indabsencelongueduree=@locindabsencelongueduree,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locstatutpersonne<>'##' OR @locstatutpersonne IS NULL BEGIN
				UPDATE IMPORT_ROI SET STATUTPERSONNE=@locstatutpersonne,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @loccodeantenne<>'##' OR @loccodeantenne IS NULL BEGIN
				UPDATE IMPORT_ROI SET CODEANTENNE=@loccodeantenne,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locanciensite<>'##' OR @locanciensite IS NULL BEGIN
				UPDATE IMPORT_ROI SET ANCIENSITE=@locanciensite,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locanciencodeantenne<>'##' OR @locanciencodeantenne IS NULL BEGIN
				UPDATE IMPORT_ROI SET ANCIENCODEANTENNE=@locanciencodeantenne,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END
			IF @locthelogin<>'##' OR @locthelogin IS NULL BEGIN
				UPDATE IMPORT_ROI SET THELOGIN=@locthelogin,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=@ID
			END

			SET @nbupdate = @nbupdate+1
		END
		ELSE BEGIN
			INSERT INTO SEQ_IDENTITY(libelle) VALUES ('OK')
			SET @identity = (SELECT @@IDENTITY AS ID)
			SET @flag = (SELECT SUBSTRING(version, 1, 3) FROM version_sfw)
			SET @ID = @flag + @identity

			INSERT INTO IMPORT_ROI (IMPORT_ROIID,MVT,SOURCE,ETAT,RAISON,IDENTIFIANT,QUALITECIVILITE, NOM, PRENOM,SOCIETE,UNITEMANAGERIALE, LABELUNITEMANAGERIALE, TYPEPOPULATION, TYPEPERSONNE, IESOCIETEPRESTATION, IEDEBUTMISSION, IEFINMISSION, MAIL, CODEFONCTION, FONCTION,SITE, LIBELLESITE, BATIMENT, ETAGE, NUMEROBUREAU, RUE, CODEPOSTAL, VILLE, PAYS, TELEPHONE, TELEPHONEINTERNE, FAX,  CODENATURECONTRATTRAVAIL, INDABSENCELONGUEDUREE, STATUTPERSONNE, CODEANTENNE, ANCIENSITE, ANCIENCODEANTENNE, DATECREATION, DATEMAJ,THELOGIN)
				VALUES(@ID, @locmvt,@locsource,@locetat,@locraison,@locidentifiant,@locqualitecivilite, @locnom, @locprenom, @locsociete,@locunitemanageriale, @loclabelunitemanageriale, @loctypepopulation, @loctypepersonne, @lociesocieteprestation, @lociedebutmission, @lociefinmission, @locmail, @loccodefonction, @locfonction,@locsite, @loclibellesite, @locbatiment, @locetage, @locnumerobureau, @locrue, @loccodepostal, @locville, @locpays, @loctelephone, @loctelephoneinterne, @locfax,  @loccodenaturecontrattravail, @locindabsencelongueduree, @locstatutpersonne, @loccodeantenne, @locanciensite, @locanciencodeantenne,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,@locthelogin)

			SET @nbinsert = @nbinsert + 1
		END

	END
	ELSE BEGIN
		Set @ID = '0,' + CAST(@nbinsert as varchar) + ',' + CAST(@nbupdate as varchar)
		--Set @ID = '3'
	END
END

go

IF OBJECT_ID('dbo.isResidantInterdit', 'FN') IS NOT NULL
	DROP FUNCTION dbo.isResidantInterdit
GO

CREATE FUNCTION dbo.isResidantInterdit(@residantid VARCHAR(14),@dt DATETIME) RETURNS varchar AS
 BEGIN
    DECLARE @IdRes VARCHAR(14)
    DECLARE @Retour varchar(50)
    set @IdRes ='0'
	Set @IdRes=(SELECT RESIDANTID FROM RESIDANTS WHERE INTERDIT=0 AND (CONVERT(DATETIME,@dt,103) BETWEEN CONVERT(DATETIME,DEBUTINTERDIT,103) AND CONVERT(DATETIME,FININTERDIT,103)) AND RESIDANTID=@residantid)
	IF @IdRes<>'' and @IdRes is not null BEGIN
		Set @Retour ='0'
	END
	ELSE set @Retour ='1'
    RETURN @Retour
 END

 GO

 IF OBJECT_ID('dbo.isVehiculeInterdit', 'FN') IS NOT NULL
	DROP FUNCTION dbo.isVehiculeInterdit
GO

 CREATE FUNCTION dbo.isVehiculeInterdit(@vehiculeid VARCHAR(14),@dt DATETIME) RETURNS varchar AS
 BEGIN
    DECLARE @IdVeh VARCHAR(14)
    DECLARE @Retour varchar(50)
    set @IdVeh ='0'
	Set @IdVeh=(SELECT VEHICULEID FROM RESIDANTS R, VEHICULE V WHERE  R.RESIDANTID=V.RESIDANTID  AND (CONVERT(DATETIME,@dt,103) <CONVERT(DATETIME,DATELIMITE,103)) AND V.VEHICULEID=@vehiculeid)
	IF @IdVeh<>'' and @IdVeh is not null BEGIN
		Set @Retour ='0'
	END
	ELSE set @Retour ='1'
    RETURN @Retour
 END

 GO

IF OBJECT_ID('dbo.PS_ESVISITES_LOG_INS', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ESVISITES_LOG_INS
GO

CREATE PROCEDURE dbo.PS_ESVISITES_LOG_INS
	@quiid VARCHAR(14),
	@quitype  VARCHAR(40),
    @nomprenom VARCHAR(70),
	@societe VARCHAR(70),
	@numbadge VARCHAR(200),
	@sens VARCHAR(50),
	@etat VARCHAR(50),
	@details varchar(2000),
	@datepassage varchar(20),
	@typeinsert VARCHAR(14),
	@remotedate VARCHAR(20),
	@siteid VARCHAR(14),
	@guichetid VARCHAR(14),
	@poste VARCHAR(50),
	@typeLecteur VARCHAR(40)


AS
	DECLARE @FLUXID VARCHAR(14)
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
    BEGIN
	INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
	SET @IDENTITY = (SELECT @@IDENTITY AS ID)
	SET @FLAG = (SELECT TOP 1 SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
	SET @FLUXID = @FLAG + @IDENTITY
	INSERT INTO ESVISITES_LOG (ESVISITES_LOGID,QUIID,QUITYPE,NOMPRENOM,SOCIETE,NUMBADGE,SENS,ETAT,DETAILS,PASSAGE,TYPEINSERT,REMOTEDATE,SITEID,GUICHETID,POSTE,TYPELECTEUR,DATECREATION,DATEMAJ) VALUES
	(@FLUXID,@quiid,@quitype,@nomprenom,@societe,@numbadge,@sens,@etat,@details,CONVERT(DATETIME,@datepassage,103),@typeinsert,@remotedate,@siteid,@guichetid,@poste,@typelecteur,CURRENt_TIMESTAMP,CURRENT_TIMESTAMP)
END
GO

IF OBJECT_ID('dbo.PS_ESVISITES_ININT', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ESVISITES_ININT
GO

CREATE PROCEDURE dbo.PS_ESVISITES_ININT
	@visiteid VARCHAR(14),
	@guichetid  VARCHAR(14),
    @actionDate VARCHAR(20)

AS
    DECLARE @interdit VARCHAR(1)
	DECLARE @VID VARCHAR(14)
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
	DECLARE @VSTATUT VARCHAR(20)
	DECLARE @NUMVISITE INT
BEGIN
	SET @NUMVISITE = (SELECT MAX(DERNVISITE) FROM PARAMETRES)
	SET @NUMVISITE = @NUMVISITE + 1
	UPDATE PARAMETRES SET DERNVISITE = @NUMVISITE, DATEMAJ=CONVERT(DATETIME,@actionDate,103)
	SET @VSTATUT = (SELECT STATUTVISITE FROM STATUTVISITE WHERE STATUTID = 8)

	INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
	SET @IDENTITY = (SELECT @@IDENTITY AS ID)
	SET @FLAG = (SELECT TOP 1 SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
	SET @VID = @FLAG + @IDENTITY

	INSERT INTO VISITES (VISITEID, INTERLOCUTEURID, RESIDANTID, CODESALLE, SITEID, STATUTID, EXTERNALID, SOCIETERESID, NOMPRENOMRESID, SOCIETEVISIT, NOMPRENOMVISIT, DEBUTPREVU, FINPREVU, HDEBUTPREVU, HFINPREVU, NUMEROBADGE, NUMEROVISITE, DEBUTVISITE, FINVISITE, HDEBUT, HFIN, STATUTVISITE, TYPEVISITEID, BOITE, CASIER, OBJET, CASIERID, PIECE, NUMERO, VALIDITE, PARKING, IMMATRICULATION, GUICHETID, OBSERVATION, BUREAUID, LIEU, DATECREATION, DATEMAJ, DATESYNCHRO, ORIGINEVISITE, NBBDGIMPR, NBBDGIMPRTOTAL, FREE1, FREE2, FREE3, FREE4, FREE5, FREE6, FREE7, FREE8, FREE9, FREE10, MARQUE, MODELE, COTE, PREMIER, PREENREG, ECHANGES, ZONE, DESCENTE, BADGEPHYSIQUE, ATTENDU, ATTENDU_VENU, DATEHEUREENTREEPARKING, DATEHEURESORTIEPARKING, STATUTPARKING, DEBLOC, DEBLOC_USER, DEBLOC_USERID, DEBLOC_HEURE, IFONCTION, IDATENAISSANCE, ILIEUNAISSANCE, IPAYS, INOMJEUNEFILLE, MODIFICATION, ETATVISITE, ISTATUT, VIP, CODELGRESERVATION, TICKET, RONDIER, RONDIERID,LAST_ACTION,PROFIL_CTRL,PROFIL_CTRL2,PROFIL_CTRL_ID) SELECT @VID, INTERLOCUTEURID, RESIDANTID, CODESALLE, SITEID, STATUTID, EXTERNALID, SOCIETERESID, NOMPRENOMRESID, SOCIETEVISIT, NOMPRENOMVISIT, DEBUTPREVU, FINPREVU, HDEBUTPREVU, HFINPREVU, NUMEROBADGE, NUMEROVISITE, DEBUTVISITE, FINPREVU, HDEBUT, HFINPREVU, STATUTVISITE, TYPEVISITEID, BOITE, CASIER, OBJET, CASIERID, PIECE, NUMERO, VALIDITE, PARKING, IMMATRICULATION, GUICHETID, OBSERVATION, BUREAUID, LIEU, DATECREATION, DATEMAJ, DATESYNCHRO, ORIGINEVISITE, '0', NBBDGIMPRTOTAL, FREE1, FREE2, FREE3, FREE4, FREE5, FREE6, FREE7, FREE8, FREE9, FREE10, MARQUE, MODELE, COTE, PREMIER, PREENREG, ECHANGES, ZONE, DESCENTE, BADGEPHYSIQUE, ATTENDU, ATTENDU_VENU, DATEHEUREENTREEPARKING, DATEHEURESORTIEPARKING, STATUTPARKING, DEBLOC, DEBLOC_USER, DEBLOC_USERID, DEBLOC_HEURE, IFONCTION, IDATENAISSANCE, ILIEUNAISSANCE, IPAYS, INOMJEUNEFILLE, MODIFICATION, ETATVISITE, ISTATUT, VIP, CODELGRESERVATION, TICKET, RONDIER, RONDIERID,LAST_ACTION,PROFIL_CTRL,PROFIL_CTRL2,PROFIL_CTRL_ID FROM VISITES WHERE VISITEID=@visiteid

	UPDATE VISITES SET DATECREATION=@actiondate, DATEMAJ=@actiondate, DATESYNCHRO=NULL,
	DEBUTVISITE=CONVERT(DATETIME,CONVERT(VARCHAR(10),@actiondate,103),103),
	HDEBUT=CONVERT(DATETIME,SUBSTRING(CONVERT(VARCHAR,@actiondate,103),12,5),108),
	HFIN=DATEADD(hour,2,CONVERT(DATETIME,SUBSTRING(CONVERT(VARCHAR,@actiondate,103),12,5),108)),
	STATUTID='8',
	GUICHETID=@guichetid,
	NUMEROVISITE=@NUMVISITE,
	STATUTVISITE=@VSTATUT
	WHERE VISITEID=@VID

END
GO


IF OBJECT_ID('dbo.PS_ESVISITES_OUTINT', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ESVISITES_OUTINT
GO

CREATE PROCEDURE dbo.PS_ESVISITES_OUTINT
	@visiteid VARCHAR(14),
    @actionDate VARCHAR(20)
AS

BEGIN

	UPDATE VISITES SET STATUTID='16',DATEMAJ=CONVERT(DATETIME,@actiondate,103),FINVISITE=CONVERT(DATETIME,CONVERT(VARCHAR(10),@actionDate,103),103), HFIN=CONVERT(DATETIME,SUBSTRING(CONVERT(VARCHAR,@actiondate,103),12,5),108) WHERE VISITEID=@visiteid
END
GO

IF OBJECT_ID('dbo.PS_ESVISITES_INOUT_INT', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ESVISITES_INOUT_INT;
GO
CREATE PROCEDURE dbo.PS_ESVISITES_INOUT_INT
	@visiteid VARCHAR(14),
	@guichetid  VARCHAR(14),
    @actionDateIn VARCHAR(20),
	@actionDateOut VARCHAR(20),
	@badge VARCHAR(20)
AS
    DECLARE @interdit VARCHAR(1)
	DECLARE @VID VARCHAR(14)
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
	DECLARE @VSTATUT VARCHAR(20)
	DECLARE @NUMVISITE INT
BEGIN
	SET @NUMVISITE = (SELECT MAX(DERNVISITE) FROM PARAMETRES)
	SET @NUMVISITE = @NUMVISITE + 1
	UPDATE PARAMETRES SET DERNVISITE = @NUMVISITE, DATEMAJ=CONVERT(DATETIME,@actionDateIn,103)
	SET @VSTATUT = (SELECT STATUTVISITE FROM STATUTVISITE WHERE STATUTID = 16)

	INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
	SET @IDENTITY = (SELECT @@IDENTITY AS ID)
	SET @FLAG = (SELECT TOP 1 SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
	SET @VID = @FLAG + @IDENTITY

	INSERT INTO VISITES (VISITEID, INTERLOCUTEURID, RESIDANTID, CODESALLE, SITEID, STATUTID, EXTERNALID, SOCIETERESID, NOMPRENOMRESID, SOCIETEVISIT, NOMPRENOMVISIT, DEBUTPREVU, FINPREVU, HDEBUTPREVU, HFINPREVU, NUMEROBADGE, NUMEROVISITE, DEBUTVISITE, FINVISITE, HDEBUT, HFIN, STATUTVISITE, TYPEVISITEID, BOITE, CASIER, OBJET, CASIERID, PIECE, NUMERO, VALIDITE, PARKING, IMMATRICULATION, GUICHETID, OBSERVATION, BUREAUID, LIEU, DATECREATION, DATEMAJ, DATESYNCHRO, ORIGINEVISITE, NBBDGIMPR, NBBDGIMPRTOTAL, FREE1, FREE2, FREE3, FREE4, FREE5, FREE6, FREE7, FREE8, FREE9, FREE10, MARQUE, MODELE, COTE, PREMIER, PREENREG, ECHANGES, ZONE, DESCENTE, BADGEPHYSIQUE, ATTENDU, ATTENDU_VENU, DATEHEUREENTREEPARKING, DATEHEURESORTIEPARKING, STATUTPARKING, DEBLOC, DEBLOC_USER, DEBLOC_USERID, DEBLOC_HEURE, IFONCTION, IDATENAISSANCE, ILIEUNAISSANCE, IPAYS, INOMJEUNEFILLE, MODIFICATION, ETATVISITE, ISTATUT, VIP, CODELGRESERVATION, TICKET, RONDIER, RONDIERID,LAST_ACTION,PROFIL_CTRL,PROFIL_CTRL2,PROFIL_CTRL_ID) SELECT @VID, INTERLOCUTEURID, RESIDANTID, CODESALLE, SITEID, STATUTID, EXTERNALID, SOCIETERESID, NOMPRENOMRESID, SOCIETEVISIT, NOMPRENOMVISIT, DEBUTPREVU, FINPREVU, HDEBUTPREVU, HFINPREVU, NUMEROBADGE, NUMEROVISITE, DEBUTVISITE, FINPREVU, HDEBUT, HFINPREVU, STATUTVISITE, TYPEVISITEID, BOITE, CASIER, OBJET, CASIERID, PIECE, NUMERO, VALIDITE, PARKING, IMMATRICULATION, GUICHETID, OBSERVATION, BUREAUID, LIEU, DATECREATION, DATEMAJ, DATESYNCHRO, ORIGINEVISITE, '0', NBBDGIMPRTOTAL, FREE1, FREE2, FREE3, FREE4, FREE5, FREE6, FREE7, FREE8, FREE9, FREE10, MARQUE, MODELE, COTE, PREMIER, PREENREG, ECHANGES, ZONE, DESCENTE, BADGEPHYSIQUE, ATTENDU, ATTENDU_VENU, DATEHEUREENTREEPARKING, DATEHEURESORTIEPARKING, STATUTPARKING, DEBLOC, DEBLOC_USER, DEBLOC_USERID, DEBLOC_HEURE, IFONCTION, IDATENAISSANCE, ILIEUNAISSANCE, IPAYS, INOMJEUNEFILLE, MODIFICATION, ETATVISITE, ISTATUT, VIP, CODELGRESERVATION, TICKET, RONDIER, RONDIERID,LAST_ACTION,PROFIL_CTRL,PROFIL_CTRL2,PROFIL_CTRL_ID FROM VISITES WHERE VISITEID=@visiteid

	UPDATE VISITES SET DATECREATION=@actionDateIn,
	DATEMAJ=@actionDateOut,
	DATESYNCHRO=NULL,
	DEBUTVISITE=CONVERT(DATETIME,CONVERT(VARCHAR(10),@actionDateIn,103),103),
	HDEBUT=CONVERT(DATETIME,SUBSTRING(CONVERT(VARCHAR,@actionDateIn,103),12,5),108),
	FINVISITE=CONVERT(DATETIME,CONVERT(VARCHAR(10),@actionDateOut,103),103),
	HFIN=CONVERT(DATETIME,SUBSTRING(CONVERT(VARCHAR,@actionDateOut,103),12,5),108),
	NUMEROBADGE=@Badge,
	STATUTID='16',
	GUICHETID=@guichetid,
	NUMEROVISITE=@NUMVISITE,
	STATUTVISITE=@VSTATUT
	WHERE VISITEID=@VID
END

GO


IF OBJECT_ID('dbo.PS_ESVISITES_INOUT_RES', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ESVISITES_INOUT_RES
GO

CREATE PROCEDURE dbo.PS_ESVISITES_INOUT_RES
	@residantid VARCHAR(14),
	@guichetid  VARCHAR(14),
    @dateaction DATETIME,
	@badge varchar(34),
	@mode_action VARCHAR(2),
	@siteid VARCHAR(14),
	@passagerid varchar(14) OUTPUT
AS

	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
	DECLARE @nomprenom VARCHAR(70)
	DECLARE @nomguichet VARCHAR(40)
  BEGIN
	SET @nomguichet=(SELECT GUICHET FROM GUICHET WHERE GUICHETID=@guichetid)
	IF @passagerid IS NULL OR LTRIM(RTRIM(@passagerid))='' BEGIN
		SET @nomprenom =(SELECT NOMPRENOM FROM RESIDANTS WHERE RESIDANTID=@residantid)
		INSERT INTO SEQ_IDENTITY(LIBELLE) VALUES ('OK')
		SET @IDENTITY = (SELECT @@IDENTITY AS ID)
		SET @FLAG = (SELECT TOP 1 SUBSTRING(VERSION, 1, 3) FROM VERSION_SFW)
		SET @passagerid = @FLAG + @IDENTITY
		--SET @passagerid=@FLUXID
		INSERT INTO VISITES_RESIDANTS (PASSAGERID,RESIDANTID,NOMPRENOM,ENTREE,CODEACCES,OBSERVATION,DATECREATION,DATEMAJ,DATESYNCHRO,TYPEENTREE,GUICHET_E,CIRCULATION,SITEID)
		VALUES (@passagerid,@residantid,@nomprenom,CONVERT(DATETIME,@dateaction,103),@badge,'',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP, CAST(@mode_action AS INT),@nomguichet,'',@siteid)
	END ELSE BEGIN
		UPDATE VISITES_RESIDANTS SET SORTIE=CONVERT(DATETIME,@dateaction,103),GUICHET_S=@nomguichet,CIRCULATION='',OBSERVATION=OBSERVATION+'',DATEMAJ=CURRENT_TIMESTAMP,DATESYNCHRO=CURRENT_TIMESTAMP WHERE PASSAGERID=@passagerid
	END
END
GO


IF OBJECT_ID('dbo.PS_ESVISITES_INVEHICULE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ESVISITES_INVEHICULE
GO

CREATE PROCEDURE dbo.PS_ESVISITES_INVEHICULE
	@residantid VARCHAR(14),
	@guichetid  VARCHAR(14),
    @actionDate VARCHAR(20),
	@badge varchar(34),
	@PASSAGERID varchar(14)
AS
DECLARE @TMP   int
BEGIN
	SET @tmp=1
END
GO


IF OBJECT_ID('dbo.PS_ESVISITES_OUTVEHICULE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ESVISITES_OUTVEHICULE
GO

CREATE PROCEDURE dbo.PS_ESVISITES_OUTVEHICULE
	@residantid VARCHAR(14),
	@guichetid  VARCHAR(14),
    @actionDate VARCHAR(20),
	@badge varchar(34),
	@PASSAGERID varchar(14)
AS
DECLARE @TMP   int
BEGIN
	SET @tmp=1
END
GO



IF OBJECT_ID('dbo.PS_ESVISITEUR', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ESVISITEUR
GO

CREATE PROCEDURE dbo.PS_ESVISITEUR

    --INTERLOCUTEUR
	@siteid VARCHAR(14),
	@poste  VARCHAR(150),
	@mode_action VARCHAR(1),
    @badge VARCHAR(50),
    @actiondate VARCHAR(20),
	@typeinsert VARCHAR(14),
	@typelecteur VARCHAR(40),
    @RETOUR VARCHAR(150) OUTPUT

AS

	DECLARE @interlocuteurid VARCHAR(14)
	DECLARE @visiteid VARCHAR(14)
	DECLARE @VID VARCHAR(14)
	DECLARE @FLAG VARCHAR(14)
	DECLARE @IDENTITY VARCHAR(14)
	DECLARE @VSTATUT VARCHAR(20)
	DECLARE @guichetid VARCHAR(14)
	DECLARE @NUMVISITE INT
	DECLARE @tmp varchar(1)
	DECLARE @societevisit VARCHAR(35)
	DECLARE @nomprenomvisit VARCHAR(70)
	DECLARE @dateaction DATETIME
	DECLARE @id varchar(14)
BEGIN
	SET @RETOUR='-1'
	SET @guichetid=( SELECT GUICHETID FROM TQ_POSTE WHERE NOM_POSTE=@poste AND SITEId=@siteID)
	set @dateaction=CONVERT(DATETIME,@actiondate,103)
	IF @mode_action='1' BEGIN		 --ENTREE FORCEE
			IF EXISTS (SELECT I.INTERLOCUTEURID FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@siteid AND STATUTID IN (8,35)) BEGIN
				SET @visiteid=(SELECT TOP 1 V.VISITEID FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@siteid AND STATUTID IN (8,35))
				EXEC PS_ESVISITES_OUTINT @visiteid,@actionDate
				SET @RETOUR='OK,VIS_SORTI'
				SET @interlocuteurid=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=@visiteid)
				SET @nomprenomvisit=(SELECT NOMPRENOMVISIT FROM VISITES WHERE VISITEID=@visiteid)
				SET @societevisit=(SELECT SOCIETEVISIT FROM VISITES WHERE VISITEID=@visiteid)
				EXEC PS_ESVISITES_LOG_INS  @interlocuteurid,'VISITEUR', @nomprenomvisit,@societevisit,@badge,'Entrée forcée badge','OK','Sortie validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
			END
			IF EXISTS (SELECT TOP 1 I.INTERLOCUTEURID FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@SITEID AND STATUTID IN (2,32) AND (CONVERT(DATETIME,CONVERT(VARCHAR(10),@actionDate,103),103) BETWEEN DEBUTPREVU AND FINPREVU))
			BEGIN
				set @visiteid=(SELECT TOP 1 V.VISITEID FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@SITEID AND STATUTID IN (2,32) AND (CONVERT(DATETIME,CONVERT(VARCHAR(10),@actionDate,103),103) BETWEEN DEBUTPREVU AND FINPREVU))
				SET @interlocuteurid=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=@visiteid)
				SET @nomprenomvisit=(SELECT NOMPRENOMVISIT FROM VISITES WHERE VISITEID=@visiteid)
				SET @societevisit=(SELECT SOCIETEVISIT FROM VISITES WHERE VISITEID=@visiteid)
				IF (dbo.isVisiteurInterdit(@interlocuteurid,@dateaction)='0' or dbo.isVisiteurInterdit(@interlocuteurid,@dateaction)='1' ) BEGIN
					EXEC PS_ESVISITES_ININT @visiteid,@guichetid,@actionDate
					IF (@RETOUR<>'-1') BEGIN
						SET @RETOUR='OK,VIS_SORTIENTRE'
					END ELSE BEGIN
						SET @RETOUR='OK,VIS_ENTRE'
					END
					EXEC PS_ESVISITES_LOG_INS  @interlocuteurid,'VISITEUR', @nomprenomvisit,@societevisit,@badge,'Entrée forcée badge','OK','Entrée validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
				END ELSE BEGIN
					SET @RETOUR='PAS OK,MES_VIS_INTERDIT'
					EXEC PS_ESVISITES_LOG_INS  @interlocuteurid,'VISITEUR', @nomprenomvisit,@societevisit,@badge,'Entrée forcée badge','PAS OK','Visiteur interdit',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
				END

			END

	END
	IF @mode_action='2' BEGIN		 	--ENTREE
			IF EXISTS (SELECT I.INTERLOCUTEURID FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@siteid AND STATUTID IN (8,35)) BEGIN
			    SET @visiteid=(SELECT TOP 1 visiteid FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@siteid AND STATUTID IN (8,35))
				SET @RETOUR='PAS OK,MES_VIS_DENTRE,'+@visiteid
				SET @interlocuteurid=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=@visiteid)
				SET @nomprenomvisit=(SELECT NOMPRENOMVISIT FROM VISITES WHERE VISITEID=@visiteid)
				SET @societevisit=(SELECT SOCIETEVISIT FROM VISITES WHERE VISITEID=@visiteid)
				EXEC PS_ESVISITES_LOG_INS  @interlocuteurid,'VISITEUR', @nomprenomvisit,@societevisit,@badge,'Entrée badge','OK','Visiteur déjà entré',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
			END ELSE
				IF EXISTS (SELECT TOP 1 I.INTERLOCUTEURID FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@SITEID AND STATUTID IN (2,32) AND (CONVERT(DATETIME,CONVERT(VARCHAR(10),@actionDate,103),103) BETWEEN DEBUTPREVU AND FINPREVU))
			BEGIN
				set @visiteid=(SELECT TOP 1 V.VISITEID FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@SITEID AND STATUTID IN (2,32) AND (CONVERT(DATETIME,CONVERT(VARCHAR(10),@actionDate,103),103) BETWEEN DEBUTPREVU AND FINPREVU))
				SET @interlocuteurid=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=@visiteid)
				SET @nomprenomvisit=(SELECT NOMPRENOMVISIT FROM VISITES WHERE VISITEID=@visiteid)
				SET @societevisit=(SELECT SOCIETEVISIT FROM VISITES WHERE VISITEID=@visiteid)
				IF (dbo.isVisiteurInterdit(@interlocuteurid,@dateaction)='0' or dbo.isVisiteurInterdit(@interlocuteurid,@dateaction)='1' ) BEGIN
					EXEC PS_ESVISITES_ININT @visiteid,@guichetid,@actionDate
					EXEC PS_ESVISITES_LOG_INS  @interlocuteurid,'VISITEUR', @nomprenomvisit,@societevisit,@badge,'Entrée badge','OK','Entrée Validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
					SET @RETOUR='OK,MES_VIS_ENTRE,'+@visiteid
				END ELSE BEGIN
					SET @RETOUR='PAS OK,MES_VIS_INTERDIT'
					EXEC PS_ESVISITES_LOG_INS  @interlocuteurid,'VISITEUR', @nomprenomvisit,@societevisit,@badge,'Entrée badge','PAS OK','Visiteur interdit',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
				END
			END

	END
	IF @mode_action='3' BEGIN	--SORTIE FORCEE
		IF EXISTS (SELECT I.INTERLOCUTEURID FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@siteid AND STATUTID IN (8,35)) BEGIN
			SET @visiteid=(SELECT TOP 1 V.VISITEID FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@siteid AND STATUTID IN (8,35))
			EXEC PS_ESVISITES_OUTINT @visiteid,@actionDate
			SET @RETOUR='OK,MES_VIS_SORTI,'+@visiteid
			SET @interlocuteurid=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=@visiteid)
			SET @nomprenomvisit=(SELECT NOMPRENOMVISIT FROM VISITES WHERE VISITEID=@visiteid)
			SET @societevisit=(SELECT SOCIETEVISIT FROM VISITES WHERE VISITEID=@visiteid)
			EXEC PS_ESVISITES_LOG_INS  @interlocuteurid,'VISITEUR', @nomprenomvisit,@societevisit,@badge,'Sortie forcée badge','OK','Sortie validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
		END
		ELSE
		IF EXISTS (SELECT TOP 1 I.INTERLOCUTEURID FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@SITEID AND STATUTID IN (2,32) AND (CONVERT(DATETIME,CONVERT(VARCHAR(10),@actionDate,103),103) BETWEEN DEBUTPREVU AND FINPREVU)) BEGIN
			set @visiteid=(SELECT TOP 1 V.VISITEID FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@SITEID AND STATUTID IN (2,32) AND (CONVERT(DATETIME,CONVERT(VARCHAR(10),@actionDate,103),103) BETWEEN DEBUTPREVU AND FINPREVU))
			SET @interlocuteurid=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=@visiteid)
			SET @nomprenomvisit=(SELECT NOMPRENOMVISIT FROM VISITES WHERE VISITEID=@visiteid)
			SET @societevisit=(SELECT SOCIETEVISIT FROM VISITES WHERE VISITEID=@visiteid)
			IF (dbo.isVisiteurInterdit(@interlocuteurid,@dateaction)='0' or dbo.isVisiteurInterdit(@interlocuteurid,@dateaction)='1' ) BEGIN
				EXEC PS_ESVISITES_ININT @visiteid,@guichetid,@actionDate
				SET @RETOUR='OK,MES_VIS_ENTRE'
				EXEC PS_ESVISITES_LOG_INS  @interlocuteurid,'VISITEUR', @nomprenomvisit,@societevisit,@badge,'Sortie forcée badge','OK','Entrée validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
				SET @visiteid=(SELECT TOP 1 V.VISITEID FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@siteid AND STATUTID IN (8,35))
				EXEC PS_ESVISITES_OUTINT @visiteid,@actiondate
				EXEC PS_ESVISITES_LOG_INS  @interlocuteurid,'VISITEUR', @nomprenomvisit,@societevisit,@badge,'Sortie forcée badge','OK','Sortie validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
				SET @RETOUR='OK,MES_VIS_ENTRESORTI,'+@visiteid
			END ELSE BEGIN
				SET @RETOUR='PAS OK,MES_VIS_INTERDIT'
				EXEC PS_ESVISITES_LOG_INS  @interlocuteurid,'VISITEUR', @nomprenomvisit,@societevisit,@badge,'Sortie forcée badge','PAS OK','Visiteur interdit',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
			END
		END
	END
	IF @mode_action='4' BEGIN	--SORTIE
			IF EXISTS (SELECT I.INTERLOCUTEURID FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@siteid AND STATUTID IN (8,35)) BEGIN
				SET @visiteid=(SELECT TOP 1 V.VISITEID FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@siteid AND STATUTID IN (8,35))
				EXEC PS_ESVISITES_OUTINT @visiteid,@actionDate
				SET @RETOUR='OK,MES_VIS_SORTI'+@visiteid
				SET @interlocuteurid=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=@visiteid)
				SET @nomprenomvisit=(SELECT NOMPRENOMVISIT FROM VISITES WHERE VISITEID=@visiteid)
				SET @societevisit=(SELECT SOCIETEVISIT FROM VISITES WHERE VISITEID=@visiteid)
				EXEC PS_ESVISITES_LOG_INS  @interlocuteurid,'VISITEUR', @nomprenomvisit,@societevisit,@badge,'Sortie badge','OK','Sortie validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
			END ELSE
			IF EXISTS (SELECT I.INTERLOCUTEURID FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@siteid AND STATUTID IN (16)) BEGIN
			    SET @visiteid=(SELECT TOP 1 V.VISITEID FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@siteid AND STATUTID IN (16))
				SET @RETOUR='PAS OK,MES_VIS_DSORTI,'+@visiteid
				SET @interlocuteurid=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=@visiteid)
				SET @nomprenomvisit=(SELECT NOMPRENOMVISIT FROM VISITES WHERE VISITEID=@visiteid)
				SET @societevisit=(SELECT SOCIETEVISIT FROM VISITES WHERE VISITEID=@visiteid)
				EXEC PS_ESVISITES_LOG_INS  @interlocuteurid,'VISITEUR', @nomprenomvisit,@societevisit,@badge,'Sortie badge','OK','Visiteur déjà sorti',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
			 END ELSE
			 IF EXISTS (SELECT I.INTERLOCUTEURID FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@siteid AND STATUTID IN (2,32)) BEGIN
			    SET @visiteid=(SELECT TOP 1 V.VISITEID FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@siteid AND STATUTID IN (2,32))
				SET @RETOUR='PAS OK,MES_VIS_DSORTI,'+@visiteid
				SET @interlocuteurid=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=@visiteid)
				SET @nomprenomvisit=(SELECT NOMPRENOMVISIT FROM VISITES WHERE VISITEID=@visiteid)
				SET @societevisit=(SELECT SOCIETEVISIT FROM VISITES WHERE VISITEID=@visiteid)
				EXEC PS_ESVISITES_LOG_INS  @interlocuteurid,'VISITEUR', @nomprenomvisit,@societevisit,@badge,'Sortie badge','PAS OK','Visiteur non entré',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
			 END
	END
	IF @mode_action='5' BEGIN	--ENTREE/SORTIE
			IF EXISTS (SELECT I.INTERLOCUTEURID FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@siteid AND STATUTID IN (8,35)) BEGIN
				SET @visiteid=(SELECT TOP 1 V.VISITEID FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@siteid AND STATUTID IN (8,35))
				EXEC PS_ESVISITES_OUTINT @visiteid,@actionDate
				SET @RETOUR='OK,MES_VIS_SORTI,'+@visiteid
				SET @interlocuteurid=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=@visiteid)
				SET @nomprenomvisit=(SELECT NOMPRENOMVISIT FROM VISITES WHERE VISITEID=@visiteid)
				SET @societevisit=(SELECT SOCIETEVISIT FROM VISITES WHERE VISITEID=@visiteid)
				EXEC PS_ESVISITES_LOG_INS  @interlocuteurid,'VISITEUR', @nomprenomvisit,@societevisit,@badge,'Entrée/Sortie badge','OK','Sortie validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
			END ELSE BEGIN
				SET @id=(SELECT TOP 1 V.VISITEID FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@SITEID AND STATUTID IN (2,32) AND (CONVERT(DATETIME,CONVERT(VARCHAR(10),@actionDate,103),103) BETWEEN DEBUTPREVU AND FINPREVU))

				IF EXISTS (SELECT TOP 1 I.INTERLOCUTEURID FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@SITEID AND STATUTID IN (2,32) AND (CONVERT(DATETIME,CONVERT(VARCHAR(10),@actionDate,103),103) BETWEEN DEBUTPREVU AND FINPREVU)) BEGIN
					set @visiteid=(SELECT TOP 1 V.VISITEID FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=@badge AND SITEID=@SITEID AND STATUTID IN (2,32) AND (CONVERT(DATETIME,CONVERT(VARCHAR(10),@actionDate,103),103) BETWEEN DEBUTPREVU AND FINPREVU))
					SET @interlocuteurid=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=@visiteid)
					SET @nomprenomvisit=(SELECT NOMPRENOMVISIT FROM VISITES WHERE VISITEID=@visiteid)
					SET @societevisit=(SELECT SOCIETEVISIT FROM VISITES WHERE VISITEID=@visiteid)
					IF (dbo.isVisiteurInterdit(@interlocuteurid,@dateaction)='0' or dbo.isVisiteurInterdit(@interlocuteurid,@dateaction)='1' ) BEGIN
						EXEC PS_ESVISITES_ININT @visiteid,@guichetid,@actionDate
						SET @RETOUR='OK,MES_VIS_ENTRE'
						EXEC PS_ESVISITES_LOG_INS  @interlocuteurid,'VISITEUR', @nomprenomvisit,@societevisit,@badge,'Entrée/Sortie badge','OK','Entrée validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
					END ELSE BEGIN
						SET @RETOUR='PAS OK,MES_VIS_INTERDIT'
						EXEC PS_ESVISITES_LOG_INS  @interlocuteurid,'VISITEUR', @nomprenomvisit,@societevisit,@badge,'Entrée/Sortie badge','PAS OK','Visiteur interdit',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
					END
				END
			END
	END
	IF @RETOUR='-1' BEGIN
	 EXEC PS_ESVISITES_LOG_INS  '-Incounu-','VISITEUR', '-Inconnu-','-Inconnue-',@badge,'',' PAS OK','Badge non valide',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
	 SET @RETOUR='PAS OK,MES_BADGE_NON_VALIDE'
	END
END
GO



IF OBJECT_ID('dbo.PS_ESRESIDANT', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ESRESIDANT
GO

CREATE PROCEDURE dbo.PS_ESRESIDANT

    --RESIDANT
	@siteid VARCHAR(14),
	@poste  VARCHAR(150),
	@mode_action VARCHAR(1),
    @badge VARCHAR(50),
    @actiondate VARCHAR(20),
	@typeinsert VARCHAR(14),
	@typelecteur VARCHAR(40),
    @RETOUR VARCHAR(150) OUTPUT

AS

	DECLARE @residantid VARCHAR(14)
	DECLARE @passagerid VARCHAR(14)
	DECLARE @guichetid VARCHAR(14)
	DECLARE @societeresid VARCHAR(35)
	DECLARE @nomprenomresid VARCHAR(70)
	DECLARE @dateaction DATETIME

BEGIN
	SET @RETOUR='-1'
	SET @guichetid=(SELECT GUICHETID FROM TQ_POSTE WHERE NOM_POSTE=@poste AND SITEId=@siteID)
	set @dateaction=CONVERT(DATETIME,@actiondate,103)
	IF EXISTS (SELECT RESIDANTID FROM RESIDANTS WHERE CODEACCES=@badge) BEGIN
		SET @residantid=(SELECT TOP 1 RESIDANTID FROM RESIDANTS WHERE CODEACCES=@badge)
		SET @nomprenomresid=(SELECT NOMPRENOM FROM RESIDANTS WHERE RESIDANTID=@residantid)
		SET @societeresid=(SELECT S.NOM FROM SOCIETE S, RESIDANTS R WHERE R.SOCIETEID=S.SOCIETEID AND R.RESIDANTID=@residantid)
		IF @mode_action='1' BEGIN		 --ENTREE FORCEE
				IF EXISTS (SELECT VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NULL) BEGIN
					SET @passagerid=(SELECT TOP 1 VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE  R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NULL ORDER BY VR.DATEMAJ)
					EXEC PS_ESVISITES_INOUT_RES @residantid,@guichetid,@dateaction,@badge,@mode_action,@siteid,@passagerid OUTPUT
					SET @RETOUR='OK,RES_SORTI'
					EXEC PS_ESVISITES_LOG_INS  @residantid,'RESIDANT', @nomprenomresid,@societeresid,@badge,'Entrée forcée badge','OK','Sortie validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
				END
				SET @passagerid='';
				IF dbo.isResidantInterdit(@residantid,@dateaction)='0' BEGIN
					EXEC PS_ESVISITES_INOUT_RES @residantid,@guichetid,@dateaction,@badge,@mode_action,@siteid,@passagerid OUTPUT
					IF (@RETOUR<>'-1') BEGIN
						SET @RETOUR='OK,RES_SORTIENTRE'
					END ELSE BEGIN
						SET @RETOUR='OK,RES_ENTRE'
					END
					EXEC PS_ESVISITES_LOG_INS  @residantid,'RESIDANT', @nomprenomresid,@societeresid,@badge,'Entrée forcée badge','OK','Entrée validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
				END ELSE BEGIN
					SET @RETOUR='PAS OK,MES_RES_INTERDIT'
					EXEC PS_ESVISITES_LOG_INS  @residantid,'RESIDANT', @nomprenomresid,@societeresid,@badge,'Entrée forcée badge','PAS OK','Résident interdit',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
				END
		END
		IF @mode_action='2' BEGIN		 		--ENTREE SEULEMENT
				 IF EXISTS (SELECT VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NULL) BEGIN
					 SET @passagerid=(SELECT TOP 1 VR.PASSAGERID FROM VISITES_RESIDANTS VR , RESIDANTS R WHERE   R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NULL ORDER BY VR.DATEMAJ)
					SET @RETOUR='PAS OK,MES_RES_ENTRE,'+@passagerid
					EXEC PS_ESVISITES_LOG_INS  @residantid,'RESIDANT', @nomprenomresid,@societeresid,@badge,'Entrée badge','OK','Résidant déjà entré',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
				END ELSE BEGIN
					SET @passagerid='';
					IF (dbo.isresidantInterdit(@residantid,@dateaction)='0' ) BEGIN
						EXEC PS_ESVISITES_INOUT_RES @residantid,@guichetid,@dateaction,@badge,@mode_action,@siteid, @passagerid OUTPUT
						SET @RETOUR='OK,RES_ENTRE'
						EXEC PS_ESVISITES_LOG_INS  @residantid,'RESIDANT', @nomprenomresid,@societeresid,@badge,'Entrée badge','OK','Entrée validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
					END ELSE BEGIN
						SET @RETOUR='PAS OK,MES_RES_INTERDIT'
						EXEC PS_ESVISITES_LOG_INS  @residantid,'RESIDANT', @nomprenomresid,@societeresid,@badge,'Entrée badge','PAS OK','Résident interdit',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
					END
				END
		END
		IF @mode_action='3' BEGIN	--SORTIE FORCEE
				 IF EXISTS (SELECT VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NULL) BEGIN
					SET @passagerid=(SELECT TOP 1 VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NULL ORDER BY VR.DATEMAJ)
					SET @RETOUR='OK,MES_RES_SORTI,'+@passagerid
					EXEC PS_ESVISITES_INOUT_RES @residantid,@guichetid,@dateaction,@badge,@mode_action,@siteid,@passagerid OUTPUT
					EXEC PS_ESVISITES_LOG_INS  @residantid,'RESIDANT', @nomprenomresid,@societeresid,@badge,'Sortie forcée badge','OK','Sortie validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
				END
				ELSE BEGIN
					SET @passagerid='';
					IF (dbo.isresidantInterdit(@residantid,@dateaction)='0' ) BEGIN
						EXEC PS_ESVISITES_INOUT_RES @residantid,@guichetid,@dateaction,@badge,@mode_action,@siteid,@passagerid OUTPUT
						EXEC PS_ESVISITES_LOG_INS  @residantid,'RESIDANT', @nomprenomresid,@societeresid,@badge,'Sortie forcée badge','OK','Entrée validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
						--INSERT INTO ALARME (ALARMEID,LIBELLE,DATEMAJ,DATECREATION) VALUES (@id),@passagerid,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP)
						EXEC PS_ESVISITES_INOUT_RES @residantid,@guichetid,@dateaction,@badge,@mode_action,@siteid,@passagerid OUTPUT
						EXEC PS_ESVISITES_LOG_INS  @residantid,'RESIDANT', @nomprenomresid,@societeresid,@badge,'Sortie forcée badge','OK','Sortie validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
						SET @RETOUR='OK,MES_RES_ENTRESORTI,'+@passagerid
					END ELSE BEGIN
						SET @RETOUR='PAS OK,MES_RES_INTERDIT'
						EXEC PS_ESVISITES_LOG_INS  @residantid,'RESIDANT', @nomprenomresid,@nomprenomresid,@badge,'Sortie forcée badge','PAS OK','Résident interdit',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
					END
				END
		END
		IF @mode_action='4' BEGIN	--SORTIE
			IF EXISTS (SELECT VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NULL) BEGIN
				SET @PASSAGERID=(SELECT TOP 1 VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NULL ORDER BY VR.DATEMAJ )
				SET @RETOUR='OK,RES_SORTI'
				EXEC PS_ESVISITES_INOUT_RES @residantid,@guichetid,@dateaction,@badge,@mode_action,@siteid,@passagerid	OUTPUT
				EXEC PS_ESVISITES_LOG_INS  @residantid,'RESIDANT', @nomprenomresid,@societeresid,@badge,'Sortie badge','OK','Sortie validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
			END ELSE BEGIN
				IF EXISTS(SELECT VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NOT NULL) BEGIN
					SET @passagerid=(SELECT TOP 1 VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NOT NULL ORDER BY VR.DATEMAJ )
					SET @RETOUR='PAS OK,MES_RES_DSORTI,'+@passagerid
					EXEC PS_ESVISITES_LOG_INS  @residantid,'RESIDANT', @nomprenomresid,@societeresid,@badge,'Sortie badge','OK','Résident déjà sorti',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
				END ELSE BEGIN
					SET @passagerid='';
					SET @residantid=(SELECT TOP 1 RESIDANTID FROM RESIDANTS WHERE CODEACCES=@badge)
					SET @nomprenomresid=(SELECT NOMPRENOM FROM RESIDANTS WHERE RESIDANTID=@residantid)
					SET @societeresid=(SELECT S.NOM FROM SOCIETE S, RESIDANTS R WHERE R.SOCIETEID=S.SOCIETEID AND R.RESIDANTID=@residantid)
					SET @RETOUR='PAS OK,MES_RES_DSORTI,'+@passagerid
					EXEC PS_ESVISITES_LOG_INS  @residantid,'RESIDANT', @nomprenomresid,@societeresid,@badge,'Sortie badge','PAS OK','Résident non entré',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
				END
			END
		END
		IF @mode_action='5' BEGIN	--ENTRE/SORTIE
			IF EXISTS (SELECT VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NULL) BEGIN
				SET @PASSAGERID=(SELECT TOP 1 VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NULL ORDER BY VR.DATEMAJ )
				EXEC PS_ESVISITES_INOUT_RES @residantid,@guichetid,@dateaction,@badge,@mode_action,@siteid,@passagerid OUTPUT
				SET @RETOUR='OK,MES_RES_SORTI,'+@PASSAGERID
				EXEC PS_ESVISITES_LOG_INS  @residantid,'RESIDANT', @nomprenomresid,@societeresid,@badge,'Entrée/Sortie badge','OK','Sortie validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
			END ELSE BEGIN
				SET @PASSAGERID='';
				IF dbo.isResidantInterdit(@residantid,@dateaction)='0' BEGIN
					EXEC PS_ESVISITES_INOUT_RES @residantid,@guichetid,@dateaction,@badge,@mode_action,@siteid,@passagerid OUTPUT
					SET @RETOUR='OK,MES_RES_ENTRE'
					EXEC PS_ESVISITES_LOG_INS  @residantid,'RESIDANT', @nomprenomresid,@societeresid,@badge,'Entrée/Sortie badge','OK','Entrée validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
				END ELSE BEGIN
					SET @RETOUR='PAS OK,MES_RES_INTERDIT'
					EXEC PS_ESVISITES_LOG_INS  @residantid,'RESIDANT', @nomprenomresid,@societeresid,@badge,'Entrée/Sortie badge','PAS OK','Résident interdit',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
				END
			END
		END
	END ELSE BEGIN
			EXEC PS_ESVISITES_LOG_INS  '-Incounu-','RESIDANT', '-Inconnu-','-Inconnue-',@badge,'',' PAS OK','Badge non valide',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
			SET @RETOUR='PAS OK,MES_BADGE_NON_VALIDE'
	END
END
GO



IF OBJECT_ID('dbo.PS_ESVEHICULE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ESVEHICULE
GO

CREATE PROCEDURE dbo.PS_ESVEHICULE

    --RESIDANT
	@siteid VARCHAR(14),
	@poste  VARCHAR(150),
	@mode_action VARCHAR(1),
    @badge VARCHAR(50),
    @actiondate VARCHAR(20),
	@typeinsert VARCHAR(14),
	@typelecteur VARCHAR(40),
    @RETOUR VARCHAR(150) OUTPUT

AS

	DECLARE @residantid VARCHAR(14)
	DECLARE @vehiculeid VARCHAR(14)
	DECLARE @PASSAGERID VARCHAR(14)
	DECLARE @guichetid VARCHAR(14)
	DECLARE @societeresid VARCHAR(35)
	DECLARE @nomprenomresid VARCHAR(70)
	DECLARE @dateaction DATETIME
BEGIN
	SET @RETOUR='-1'
	SET @guichetid=(SELECT GUICHETID FROM TQ_POSTE WHERE NOM_POSTE=@poste AND SITEId=@siteID)
	set @dateaction=CONVERT(DATETIME,@actiondate,103)
	IF EXISTS (SELECT V.VEHICULEID FROM RESIDANTS R, VEHICULE V WHERE R.RESIDANTID=V.RESIDANTID AND V.NUMEROPASS=@badge) BEGIN
		SET @vehiculeid=(SELECT TOP 1 V.VEHICULEID FROM RESIDANTS R, VEHICULE V WHERE R.RESIDANTID=V.RESIDANTID AND V.NUMEROPASS=@badge)
		SET @residantid=(SELECT TOP 1 R.RESIDANTID FROM RESIDANTS R, VEHICULE V WHERE R.RESIDANTID=V.RESIDANTID AND V.NUMEROPASS=@badge)
		SET @nomprenomresid=(SELECT NOMPRENOM FROM RESIDANTS WHERE RESIDANTID=@residantid)
		SET @societeresid=(SELECT S.NOM FROM SOCIETE S, RESIDANTS R WHERE R.SOCIETEID=S.SOCIETEID AND R.RESIDANTID=@residantid)
		IF @mode_action='1' BEGIN		 --ENTREE FORCEE
				IF EXISTS (SELECT VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NULL) BEGIN
					SET @passagerid=(SELECT TOP 1 VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE  R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NULL ORDER BY VR.DATEMAJ)
					EXEC PS_ESVISITES_INOUT_RES @residantid,@guichetid,@dateaction,@badge,@mode_action,@siteid,@passagerid OUTPUT
					SET @RETOUR='OK,VEH_SORTI'
					EXEC PS_ESVISITES_LOG_INS  @residantid,'VEHICULE', @nomprenomresid,@societeresid,@badge,'Entrée forcée badge','OK','Sortie validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
				END
				SET @passagerid='';
				IF dbo.isVehiculeInterdit(@vehiculeid,@dateaction)='0' BEGIN
					EXEC PS_ESVISITES_INOUT_RES @residantid,@guichetid,@dateaction,@badge,@mode_action,@siteid,@passagerid OUTPUT
					IF (@RETOUR<>'-1') BEGIN
						SET @RETOUR='OK,VEH_SORTIENTRE'
					END ELSE BEGIN
						SET @RETOUR='OK,VEH_ENTRE'
					END
					EXEC PS_ESVISITES_LOG_INS  @residantid,'VEHICULE', @nomprenomresid,@societeresid,@badge,'Entrée forcée badge','OK','Entrée validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
				END ELSE BEGIN
					SET @RETOUR='PAS OK,MES_VEH_INTERDIT'
					EXEC PS_ESVISITES_LOG_INS  @residantid,'VEHICULE', @nomprenomresid,@societeresid,@badge,'Entrée forcée badge','PAS OK','Véhicule interdit',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
				END
		END
		IF @mode_action='2' BEGIN		 		--ENTREE SEULEMENT
				 IF EXISTS (SELECT VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NULL) BEGIN
					 SET @passagerid=(SELECT TOP 1 VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE  R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NULL ORDER BY VR.DATEMAJ)
					SET @RETOUR='PAS OK,MES_VEH_ENTRE,'+@passagerid
					EXEC PS_ESVISITES_LOG_INS  @residantid,'VEHICULE', @nomprenomresid,@societeresid,@badge,'Entrée badge','OK','Résidant déjà entré',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
				END ELSE BEGIN
					SET @passagerid='';
					IF (dbo.isVehiculeInterdit(@vehiculeid,@dateaction)='0' ) BEGIN
						EXEC PS_ESVISITES_INOUT_RES @residantid,@guichetid,@dateaction,@badge,@mode_action,@siteid, @passagerid OUTPUT
						SET @RETOUR='OK,RES_ENTRE'
						EXEC PS_ESVISITES_LOG_INS  @residantid,'VEHICULE', @nomprenomresid,@societeresid,@badge,'Entrée badge','OK','Entrée validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
					END ELSE BEGIN
						SET @RETOUR='PAS OK,MES_VEH_INTERDIT'
						EXEC PS_ESVISITES_LOG_INS  @residantid,'VEHICULE', @nomprenomresid,@societeresid,@badge,'Entrée badge','PAS OK','Véhicule interdit',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
					END
				END
		END
		IF @mode_action='3' BEGIN	--SORTIE FORCEE
				 IF EXISTS (SELECT VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NULL) BEGIN
					SET @passagerid=(SELECT TOP 1 VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NULL ORDER BY VR.DATEMAJ)
					SET @RETOUR='OK,MES_VEH_SORTI,'+@passagerid
					EXEC PS_ESVISITES_INOUT_RES @residantid,@guichetid,@dateaction,@badge,@mode_action,@siteid,@passagerid OUTPUT
					EXEC PS_ESVISITES_LOG_INS  @residantid,'VEHICULE', @nomprenomresid,@societeresid,@badge,'Sortie forcée badge','OK','Sortie validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
				END
				ELSE BEGIN
					SET @passagerid='';
					IF (dbo.isVehiculeInterdit(@vehiculeid,@dateaction)='0' ) BEGIN
						EXEC PS_ESVISITES_INOUT_RES @residantid,@guichetid,@dateaction,@badge,@mode_action,@siteid,@passagerid OUTPUT
						EXEC PS_ESVISITES_LOG_INS  @residantid,'VEHICULE', @nomprenomresid,@societeresid,@badge,'Sortie forcée badge','OK','Entrée validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
						--INSERT INTO ALARME (ALARMEID,LIBELLE,DATEMAJ,DATECREATION) VALUES (@id),@passagerid,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP)
						EXEC PS_ESVISITES_INOUT_RES @residantid,@guichetid,@dateaction,@badge,@mode_action,@siteid,@passagerid OUTPUT
						EXEC PS_ESVISITES_LOG_INS  @residantid,'VEHICULE', @nomprenomresid,@societeresid,@badge,'Sortie forcée badge','OK','Sortie validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
						SET @RETOUR='OK,MES_VEH_ENTRESORTI,'+@passagerid
					END ELSE BEGIN
						SET @RETOUR='PAS OK,MES_VEH_INTERDIT'
						EXEC PS_ESVISITES_LOG_INS  @residantid,'RESIDANT', @nomprenomresid,@nomprenomresid,@badge,'Sortie forcée badge','PAS OK','Véhicule interdit',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
					END
				END
		END
		IF @mode_action='4' BEGIN	--SORTIE
			IF EXISTS (SELECT VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NULL) BEGIN
				SET @PASSAGERID=(SELECT TOP 1 VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NULL ORDER BY VR.DATEMAJ )
				SET @RETOUR='OK,RES_SORTI'
				EXEC PS_ESVISITES_INOUT_RES @residantid,@guichetid,@dateaction,@badge,@mode_action,@siteid,@passagerid	OUTPUT
				EXEC PS_ESVISITES_LOG_INS  @residantid,'RESIDANT', @nomprenomresid,@societeresid,@badge,'Sortie badge','OK','Sortie validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
			END ELSE BEGIN
				IF EXISTS(SELECT VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NOT NULL) BEGIN
					SET @passagerid=(SELECT TOP 1 VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NOT NULL ORDER BY VR.DATEMAJ )
					SET @RETOUR='PAS OK,MES_VEH_DSORTI,'+@passagerid
					EXEC PS_ESVISITES_LOG_INS  @residantid,'VEHICULE', @nomprenomresid,@societeresid,@badge,'Sortie badge','OK','Véhicule déjà sorti',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
				END ELSE BEGIN
					SET @passagerid='';
					SET @residantid=(SELECT TOP 1 RESIDANTID FROM RESIDANTS WHERE CODEACCES=@badge)
					SET @nomprenomresid=(SELECT NOMPRENOM FROM RESIDANTS WHERE RESIDANTID=@residantid)
					SET @societeresid=(SELECT S.NOM FROM SOCIETE S, RESIDANTS R WHERE R.SOCIETEID=S.SOCIETEID AND R.RESIDANTID=@residantid)
					SET @RETOUR='PAS OK,MES_VEH_DSORTI,'+@passagerid
					EXEC PS_ESVISITES_LOG_INS  @residantid,'VEHICULE', @nomprenomresid,@societeresid,@badge,'Sortie badge','PAS OK','Véhicule non entré',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
				END
			END
		END
		IF @mode_action='5' BEGIN	--ENTRE/SORTIE
			IF EXISTS (SELECT VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NULL) BEGIN
				SET @PASSAGERID=(SELECT TOP 1 VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=@badge AND VR.SITEID=@siteid AND SORTIE IS NULL ORDER BY VR.DATEMAJ )
				EXEC PS_ESVISITES_INOUT_RES @residantid,@guichetid,@dateaction,@badge,@mode_action,@siteid,@passagerid OUTPUT
				SET @RETOUR='OK,MES_VEH_SORTI,'+@PASSAGERID
				EXEC PS_ESVISITES_LOG_INS  @residantid,'VEHICULE', @nomprenomresid,@societeresid,@badge,'Entrée/Sortie badge','OK','Sortie validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
			END ELSE BEGIN
				SET @PASSAGERID='';
				IF dbo.isVehiculeInterdit(@vehiculeid,@dateaction)='0' BEGIN
					EXEC PS_ESVISITES_INOUT_RES @residantid,@guichetid,@dateaction,@badge,@mode_action,@siteid,@passagerid OUTPUT
					SET @RETOUR='OK,MES_VEH_ENTRE'
					EXEC PS_ESVISITES_LOG_INS  @residantid,'VEHICULE', @nomprenomresid,@societeresid,@badge,'Entrée/Sortie badge','OK','Entrée validée',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
				END ELSE BEGIN
					SET @RETOUR='PAS OK,MES_VEH_INTERDIT'
					EXEC PS_ESVISITES_LOG_INS  @residantid,'VEHICULE', @nomprenomresid,@societeresid,@badge,'Entrée/Sortie badge','PAS OK','Véhicule interdit',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
				END
			END
		END
	END ELSE BEGIN
			EXEC PS_ESVISITES_LOG_INS  '-Incounu-','VEHICULE', '-Inconnu-','-Inconnue-',@badge,'',' PAS OK','Badge non valide',@actionDate,@typeinsert,@actionDate,@siteid,@guichetid,@poste,@typelecteur
			SET @RETOUR='PAS OK,MES_BADGE_NON_VALIDE'
	END
END
GO



IF OBJECT_ID('dbo.PS_ESVISITES_MODE_DEUX', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_ESVISITES_MODE_DEUX
GO

CREATE PROCEDURE dbo.PS_ESVISITES_MODE_DEUX


    --INTERLOCUTEUR
	@siteid VARCHAR(14),
	@poste  VARCHAR(150),
	@mode_action VARCHAR(1),
    @badge VARCHAR(50),
	@entite VARCHAR(20),
    @actiondate VARCHAR(20),
	@typeinsert VARCHAR(14),
	@typelecteur VARCHAR(40),
    @RETOUR VARCHAR(150) OUTPUT

AS


BEGIN
	IF @entite='VISITEUR' BEGIN
		EXEC PS_ESVISITEUR @siteid,@poste,@mode_action,@badge,@actiondate,@typeinsert,@typelecteur, @RETOUR	 OUTPUT
	END ELSE
		IF @entite='RESIDANT' BEGIN
			EXEC PS_ESRESIDANT @siteid,@poste,@mode_action,@badge,@actiondate,@typeinsert,@typelecteur, @RETOUR	 OUTPUT
		END ELSE
			IF @entite='VEHICULE' BEGIN
				EXEC PS_ESVEHICULE @siteid,@poste,@mode_action,@badge,@actiondate,@typeinsert,@typelecteur, @RETOUR	 OUTPUT
			END ELSE
				IF @entite='TRAVAILLEUR' BEGIN
					EXEC PS_ESVISITEUR @siteid,@poste,@mode_action,@badge,@actiondate,@typeinsert,@typelecteur, @RETOUR	 OUTPUT
				END
END
GO

IF OBJECT_ID('dbo.PS_SORTIE_VISITES_RESIDANTS', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_SORTIE_VISITES_RESIDANTS;
GO
CREATE PROCEDURE dbo.PS_SORTIE_VISITES_RESIDANTS
AS
BEGIN
 UPDATE VISITES_RESIDANTS SET SORTIE=GETDATE(), OBSERVATION=OBSERVATION + ' | Sortie automatique', DATEMAJ=GETDATE(), DATESYNCHRO=GETDATE(), GUICHET_S='TLMQ SERVEUR' WHERE SORTIE IS NULL
END
GO

IF OBJECT_ID('dbo.PS_IMPORT_PHOTO', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_IMPORT_PHOTO;
GO

CREATE PROCEDURE dbo.PS_IMPORT_PHOTO
	@flagin int,
	@champctrl varchar(80),
	@uniquekey VARCHAR(40),
	@photo IMAGE,
	@ID VARCHAR(18) OUTPUT

AS
	 DECLARE @TMP INT
BEGIN


		-- valeurs par défaut des champs dans residant

   IF (@champctrl IS NOT NULL) AND LTRIM(@champctrl) IS NOT NULL AND @champctrl<>'' BEGIN
		SET @TMP = (SELECT COUNT(*) FROM RESIDANTS R WHERE
			  CASE
					WHEN  @champctrl='NOMPRENOM' AND UPPER(NOMPRENOM)=UPPER(@uniquekey) THEN 1
					WHEN  @champctrl='MATRICULE' AND UPPER(MATRICULE)=UPPER(@uniquekey) THEN 1
					WHEN  @champctrl='BADGE' AND  UPPER(CODEACCES)=UPPER(@uniquekey) THEN 1
					WHEN  @champctrl='EMAIL' AND UPPER(EMAIL)=UPPER(@uniquekey)  THEN 1
					ELSE 0
			  END=1)
		IF @TMP>0 BEGIN
			 SET @ID = (SELECT TOP 1 RESIDANTID FROM RESIDANTS R WHERE
			  CASE
					WHEN  @champctrl='NOMPRENOM' AND UPPER(NOMPRENOM)=UPPER(@uniquekey) THEN 1
					WHEN  @champctrl='MATRICULE' AND UPPER(MATRICULE)=UPPER(@uniquekey) THEN 1
					WHEN  @champctrl='BADGE' AND  UPPER(CODEACCES)=UPPER(@uniquekey) THEN 1
					WHEN  @champctrl='EMAIL' AND UPPER(EMAIL)=UPPER(@uniquekey)  THEN 1
					ELSE 0
			  END=1)

			UPDATE RESIDANTS SET PHOTO=@photo, DATEMAJ=CURRENT_TIMESTAMP WHERE RESIDANTID=@ID
			Set @ID = @ID + ',0,1'
		END ELSE
			Set @ID = @ID + ',0,0'
		END
	ELSE BEGIN
		Set @ID = '0,0,0'
	END
END

GO

IF OBJECT_ID('dbo.GET_LOCALISATIONBYVISITE', 'FN') IS NOT NULL
	DROP FUNCTION dbo.GET_LOCALISATIONBYVISITE;
GO
CREATE FUNCTION dbo.GET_LOCALISATIONBYVISITE(@MYVISITEID  VARCHAR(14)) RETURNS VARCHAR(4000)
AS

BEGIN
	DECLARE @TMP VARCHAR(4000)
	DECLARE @TMP2 VARCHAR(4000)

	SELECT @TMP=COALESCE(@TMP+',','')+ISNULL(L.LIBELLE,'') FROM LOCALISATION L,VISITES_LOCALISATION VL WHERE VL.LOCALISATIONID=L.LOCALISATIONID AND VL.VISITEID=@MYVISITEID
	SET @TMP2=@TMP
	RETURN @TMP2
END
GO
IF OBJECT_ID('dbo.PS_PURGE_VISITEUR', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_PURGE_VISITEUR
GO
CREATE PROCEDURE dbo.PS_PURGE_VISITEUR
    @INTERLOCUTEURID VARCHAR(14)
AS
    DECLARE @TMP INTEGER
BEGIN
    SET @TMP= (select count(INTERLOCUTEURID) FROM INTERLOCUTEUR where INTERLOCUTEURID=@INTERLOCUTEURID AND INTERDIT<>0)
    IF @TMP=0 BEGIN
        DELETE FROM COLISEMIS  WHERE INTERLOCUTEURID=@INTERLOCUTEURID
        DELETE FROM COLISRECU WHERE INTERLOCUTEURID=@INTERLOCUTEURID
        DELETE FROM CONSIGNE WHERE INTERLOCUTEURID=@INTERLOCUTEURID
        DELETE FROM CONTACT WHERE INTERLOCUTEURID=@INTERLOCUTEURID
        DELETE FROM DEVIS WHERE INTERLOCUTEURID=@INTERLOCUTEURID

        DELETE FROM HLGPARTICIPANT WHERE INTERLOCUTEURID=@INTERLOCUTEURID
        DELETE FROM HVISITES WHERE INTERLOCUTEURID=@INTERLOCUTEURID
        DELETE FROM IDENTITES WHERE INTERLOCUTEURID=@INTERLOCUTEURID
        DELETE FROM INTER_RSERVICE WHERE INTERLOCUTEURID=@INTERLOCUTEURID
        DELETE FROM LGPARTICIPANT WHERE INTERLOCUTEURID=@INTERLOCUTEURID

        DELETE FROM OJOURNAL_PERSMVT WHERE INTERLOCUTEURID=@INTERLOCUTEURID
        DELETE FROM VISITES_TEMP WHERE INTERLOCUTEURID=@INTERLOCUTEURID
        DELETE FROM PASSAGERTAXI WHERE INTERLOCUTEURID=@INTERLOCUTEURID
        DELETE FROM INTER_ACTION WHERE INTERLOCUTEURID=@INTERLOCUTEURID
        DELETE FROM XANNEXE WHERE ORIGINE='INTERLOCUTEUR' AND ORIGINEID=@INTERLOCUTEURID
        DELETE FROM XANNEXE WHERE ORIGINE='VISITES' AND (ORIGINEID IN ( SELECT VISITEID FROM VISITES WHERE INTERLOCUTEURID=@INTERLOCUTEURID) ) OR REFID IN ( SELECT VISITEID FROM VISITES WHERE INTERLOCUTEURID=@INTERLOCUTEURID)

        DELETE FROM VISITES WHERE INTERLOCUTEURID=@INTERLOCUTEURID
        DELETE FROM IDENTITES WHERE INTERLOCUTEURID=@INTERLOCUTEURID
        DELETE FROM XANNEXE WHERE ORIGINE='INTERLOCUTEUR' AND ORIGINEID=@INTERLOCUTEURID
		DELETE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=@INTERLOCUTEURID
        DELETE FROM XANNEXE WHERE ORIGINE='VISITES' AND ((SELECT COUNT(VISITEID) FROM VISITES WHERE VISITEID=ORIGINEID)=0)
        DELETE FROM IDENTITES WHERE ((SELECT COUNT(INTERLOCUTEURID) FROM INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=IDENTITES.INTERLOCUTEURID AND I.INTERDIT='0')=0)
    END
 END
GO
IF OBJECT_ID('dbo.PS_PURGE_SOCIETE', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_PURGE_SOCIETE
GO
CREATE PROCEDURE dbo.PS_PURGE_SOCIETE
    @SOCIETEID VARCHAR(14)
AS
    DECLARE @TMP INTEGER
BEGIN
    SET @TMP=(select count(SOCIETEID) FROM SOCIETE where SOCIETEID=@SOCIETEID AND (INTERDIT=1 OR (SELECt COUNT(INTERLOCUTEURID) FROM INTERLOCUTEUR I WHERE I.SOCIETEID=@SOCIETEID AND I.INTERDIT<>'0')>0))
    IF @TMP=0 BEGIN
        DELETE FROM COLISEMIS  WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=@SOCIETEID AND INTERDIT='0')
        DELETE FROM COLISRECU WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=@SOCIETEID AND INTERDIT='0')
        DELETE FROM CONSIGNE WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=@SOCIETEID AND INTERDIT='0')
        DELETE FROM CONTACT WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=@SOCIETEID AND INTERDIT='0')
        DELETE FROM DEVIS WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=@SOCIETEID AND INTERDIT='0')

        DELETE FROM HLGPARTICIPANT WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=@SOCIETEID AND INTERDIT='0')
        DELETE FROM HVISITES WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=@SOCIETEID AND INTERDIT='0')
        DELETE FROM IDENTITES WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=@SOCIETEID  AND INTERDIT='0')
        DELETE FROM INTER_RSERVICE WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=@SOCIETEID AND INTERDIT='0')
        DELETE FROM LGPARTICIPANT WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=@SOCIETEID AND INTERDIT='0')

        DELETE FROM OJOURNAL_PERSMVT WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=@SOCIETEID AND INTERDIT='0')
        DELETE FROM VISITES_TEMP WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=@SOCIETEID AND INTERDIT='0')
        DELETE FROM PASSAGERTAXI WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=@SOCIETEID AND INTERDIT='0')
        DELETE FROM INTER_ACTION WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=@SOCIETEID AND INTERDIT='0')
        DELETE FROM XANNEXE WHERE ORIGINE='INTERLOCUTEUR' AND ORIGINEID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=@SOCIETEID AND INTERDIT='0')
        DELETE FROM XANNEXE WHERE ORIGINE='VISITES' AND (ORIGINEID IN ( SELECT VISITEID FROM VISITES WHERE INTERLOCUTEURID IN (select INTERLOCUTEURID from INTERLOCUTEUR where SOCIETEID=@SOCIETEID AND INTERDIT='0') ) OR REFID IN ( SELECT VISITEID FROM VISITES WHERE INTERLOCUTEURID IN (select INTERLOCUTEURID from INTERLOCUTEUR where SOCIETEID=@SOCIETEID AND INTERDIT='0') ))

        DELETE FROM VISITES WHERE INTERLOCUTEURID IN (select INTERLOCUTEURID from INTERLOCUTEUR where SOCIETEID=@SOCIETEID AND INTERDIT='0')
        DELETE FROM CONTACT WHERE  SOCIETEID=@SOCIETEID
        DELETE FROM SERVICE WHERE DEPTID IN (SELECT DEPTID FROM DEPARTEMENT WHERE SOCIETEID=@SOCIETEID)
        DELETE FROM DEPARTEMENT WHERE SOCIETEID=@SOCIETEID
        DELETE FROM DEVIS WHERE SOCIETEID=@SOCIETEID
        DELETE FROM DIRECTIONS WHERE SOCIETEID=@SOCIETEID

        DELETE FROM MARQUE WHERE SOCIETEID=@SOCIETEID
        DELETE FROM PARKING WHERE SOCIETEID=@SOCIETEID
        DELETE FROM POSTE WHERE SOCIETEID=@SOCIETEID
        DELETE FROM PXACHAT WHERE SOCIETEID=@SOCIETEID
        DELETE FROM RESERVATION WHERE SOCIETEID=@SOCIETEID
        DELETE FROM SALLE WHERE SOCIETEID=@SOCIETEID
        DELETE FROM SOCIETE_LOCALISATION  WHERE SOCIETEID=@SOCIETEID
        DELETE FROM SOCBAT WHERE SOCIETEID=@SOCIETEID
        DELETE FROM SOCMAR WHERE SOCIETEID=@SOCIETEID
        DELETE FROM SOCSITE  WHERE SOCIETEID=@SOCIETEID
        DELETE FROM SOCIETE_ACTION WHERE SOCIETEID=@SOCIETEID
        DELETE FROM USERS WHERE SOCIETEID=@SOCIETEID
        DELETE FROM XANNEXE WHERE ORIGINE='SOCIETE' AND ORIGINEID=@SOCIETEID
        DELETE FROM IDENTITES WHERE INTERLOCUTEURID IN (select INTERLOCUTEURID from INTERLOCUTEUR where SOCIETEID=@SOCIETEID AND INTERDIT='0')
        DELETE FROM INTERLOCUTEUR WHERE SOCIETEID=@SOCIETEID AND INTERDIT='0'
        DELETE FROM SOCIETE WHERE SOCIETEID=@SOCIETEID

        DELETE FROM XANNEXE WHERE ORIGINE='INTERLOCUTEUR' AND ((SELECT COUNT(INTERLOCUTEURID) FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=ORIGINEID AND INTERDIT='0')=0)
        DELETE FROM XANNEXE WHERE ORIGINE='SOCIETE' AND ((SELECT COUNT(SOCIETEID) FROM SOCIETE WHERE SOCIETEID=ORIGINEID)=0)
        DELETE FROM XANNEXE WHERE ORIGINE='VISITES' AND ((SELECT COUNT(VISITEID) FROM VISITES WHERE VISITEID=ORIGINEID)=0)
        DELETE FROM IDENTITES WHERE ((SELECT COUNT(INTERLOCUTEURID) FROM INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=IDENTITES.INTERLOCUTEURID AND I.INTERDIT='0')=0)
    END
 END
GO
IF OBJECT_ID('dbo.PS_DEDUP_PAYS', 'P') IS NOT NULL
	DROP PROCEDURE dbo.PS_DEDUP_PAYS
GO
CREATE procedure  dbo.PS_DEDUP_PAYS(@MYIDSOURCE VARCHAR(14),@MYIDDEST VARCHAR(14))
AS

BEGIN
    UPDATE INTERLOCUTEUR SET NATIONALITEID=@MYIDSOURCE, DATEMAJ=CURRENt_TIMESTAMP WHERE NATIONALITEID=@MYIDDEST ;
    UPDATE RESIDANTS SET NATIONALITEID=@MYIDSOURCE, DATEMAJ=CURRENt_TIMESTAMP WHERE NATIONALITEID=@MYIDDEST ;
    DELETE FROM PAYS WHERE PAYSID=@MYIDDEST;
    DELETE FROM DEDUP_DEDUP WHERE DEDUP1ID=@MYIDDEST OR DEDUP2ID=@MYIDDEST;
END

GO
IF OBJECT_ID('dbo.GET_GRPVALIDEUR', 'FN') IS NOT NULL
	DROP FUNCTION dbo.GET_GRPVALIDEUR;
GO
CREATE FUNCTION dbo.GET_GRPVALIDEUR(@VISITEID VARCHAR(14)) RETURNS  VARCHAR(200)
AS
BEGIN
	DECLARE @TMP VARCHAR(4000)
	DECLARE @TMP2 VARCHAR(4000)
	SELECT @TMP=COALESCE(@TMP+',','')+CAST(ISNULL(GV.GRPVALIDEURID,'')AS VARCHAR(200)) FROM REGLE_GRPVALIDEUR GV , VISITE_REGLE VR
	WHERE  GV.REGLEID=VR.REGLEID AND VR.VISITEID=@VISITEID --AND GV.GRPVALIDEURID=@GRPVALIDEURID
	SET @TMP2=@TMP
	RETURN @TMP2
END
GO

IF OBJECT_ID('dbo.GET_ETATGRPVALIDEUR', 'FN') IS NOT NULL
	DROP FUNCTION dbo.GET_ETATGRPVALIDEUR;
GO
CREATE FUNCTION dbo.GET_ETATGRPVALIDEUR(@VISITEID VARCHAR(14),@GRPVALIDEURID INT) RETURNS  VARCHAR(1)
AS
BEGIN
	DECLARE @TMP VARCHAR(1)
	DECLARE @LESGRPVALIDEURID VARCHAR(20)
	SET @LESGRPVALIDEURID=dbo.GET_GRPVALIDEUR(@VISITEID)
	SET @TMP =(SELECT CASE WHEN @GRPVALIDEURID=-1 AND (RES_OS IS NULL AND CHARINDEX(@LESGRPVALIDEURID,'-1')>0 OR CHARINDEX(@LESGRPVALIDEURID,'-1')=0)
													AND (GRPVALIDEUR2 IS NOT NULL AND CHARINDEX('-2',@LESGRPVALIDEURID)>0 OR CHARINDEX('-2',@LESGRPVALIDEURID)=0)
													AND (GRPVALIDEUR3 IS NOT NULL AND CHARINDEX('-3',@LESGRPVALIDEURID)>0 OR CHARINDEX('-3',@LESGRPVALIDEURID)=0)
													AND (GRPVALIDEUR4 IS NOT NULL AND CHARINDEX('-4',@LESGRPVALIDEURID)>0 OR CHARINDEX('-4',@LESGRPVALIDEURID)=0)  THEN '1'
						    WHEN @GRPVALIDEURID=-2 --AND (RES_OS IS NOT NULL AND CHARINDEX('-1',@LESGRPVALIDEURID)>0 OR CHARINDEX('-1',@LESGRPVALIDEURID)=0)
													AND (GRPVALIDEUR2 IS NULL AND CHARINDEX('-2',@LESGRPVALIDEURID)>0 OR CHARINDEX('-2',@LESGRPVALIDEURID)=0)
													AND (GRPVALIDEUR3 IS NOT NULL AND CHARINDEX('-3',@LESGRPVALIDEURID)>0 OR CHARINDEX('-3',@LESGRPVALIDEURID)=0)
													AND (GRPVALIDEUR4 IS NOT NULL AND CHARINDEX('-4',@LESGRPVALIDEURID)>0 OR CHARINDEX('-4',@LESGRPVALIDEURID)=0)  THEN '1'
						    WHEN @GRPVALIDEURID=-3 --AND (RES_OS IS NOT NULL AND CHARINDEX('-1',@LESGRPVALIDEURID)>0 OR CHARINDEX('-1',@LESGRPVALIDEURID)=0)
													--AND (GRPVALIDEUR2 IS NOT NULL AND CHARINDEX('-2',@LESGRPVALIDEURID)>0 OR CHARINDEX('-2',@LESGRPVALIDEURID)=0)
													AND (GRPVALIDEUR3 IS NULL AND CHARINDEX('-3',@LESGRPVALIDEURID)>0 OR CHARINDEX('-3',@LESGRPVALIDEURID)=0)
													AND (GRPVALIDEUR4 IS NOT NULL AND CHARINDEX('-4',@LESGRPVALIDEURID)>0 OR CHARINDEX('-4',@LESGRPVALIDEURID)=0)  THEN '1'
							WHEN @GRPVALIDEURID=-4 AND --(RES_OS IS NOT NULL AND CHARINDEX('-1',@LESGRPVALIDEURID)>0 OR CHARINDEX('-1',@LESGRPVALIDEURID)=0)
													--AND (GRPVALIDEUR2 IS NOT NULL AND CHARINDEX('-2',@LESGRPVALIDEURID)>0 OR CHARINDEX('-2',@LESGRPVALIDEURID)=0)
													--AND (GRPVALIDEUR3 IS NOT NULL AND CHARINDEX('-3',@LESGRPVALIDEURID)>0 OR CHARINDEX('-3',@LESGRPVALIDEURID)=0)
													 (GRPVALIDEUR4 IS NULL AND CHARINDEX('-4',@LESGRPVALIDEURID)>0 OR CHARINDEX('-4',@LESGRPVALIDEURID)=0)  THEN '1'

						   ELSE '0' END FROM  VISITES WHERE VISITEID=@VISITEID)
	RETURN @TMP
END
GO

IF OBJECT_ID('dbo.GET_VAL_VIS_LOC', 'FN') IS NOT NULL
	DROP FUNCTION dbo.GET_VAL_VIS_LOC;
GO
CREATE FUNCTION dbo.GET_VAL_VIS_LOC(@VISITEID VARCHAR(14),@USERID VARCHAR(14)) RETURNS  VARCHAR(1)
AS
BEGIN
	DECLARE @TMP VARCHAR(1)
	SET @TMP='1'
	IF EXISTS (SELECT LOCALISATIONID FROM LOCALISATION_USER WHERE USERID=@USERID) BEGIN
	SET @TMP=(SELECT CAST(COUNT(*) AS VARCHAR(1)) FROM VISITES_LOCALISATION L, LOCALISATION_USER LU WHERE LU.LOCALISATIONID=L.LOCALISATIONID AND L.VISITEID=@VISITEID  AND LU.USERID=@USERID )
	END
	RETURN @TMP
END
GO

IF OBJECT_ID('dbo.GET_GRPVALIDEUR_ARBITRAGE', 'FN') IS NOT NULL
	DROP FUNCTION dbo.GET_GRPVALIDEUR_ARBITRAGE;
GO
CREATE FUNCTION [dbo].[GET_GRPVALIDEUR_ARBITRAGE](@ETAT VARCHAR(50),@VISITEID VARCHAR(14),@GRPVALIDEUR INT) RETURNS VARCHAR(50)
AS
BEGIN
	DECLARE @TMPINT VARCHAR(50)
	SET @TMPINT=''
	SET @TMPINT=(SELECT CASE WHEN @GRPVALIDEUR=-1 THEN ISNULL(RES_OS,@ETAT)
				WHEN @GRPVALIDEUR=-2 THEN ISNULL(GRPVALIDEUR2,@ETAT)
				WHEN @GRPVALIDEUR=-3 THEN ISNULL(GRPVALIDEUR3,@ETAT)
				WHEN @GRPVALIDEUR=-4 THEN ISNULL(GRPVALIDEUR4,@ETAT)
				ELSE '' END FROM VISITES WHERE VISITEID=@VISITEID)

	RETURN @TMPINT
END
GO

IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='F_GET_ASSOCIATION' AND TYPE='FN')
  DROP FUNCTION dbo.F_GET_ASSOCIATION
GO

CREATE FUNCTION dbo.F_GET_ASSOCIATION (@codesalle VARCHAR(14))
RETURNS VARCHAR(4000)
AS BEGIN
    DECLARE @Work VARCHAR(1000)
	DECLARE @COMBI VARCHAR(150)
	DECLARE @SALLE VARCHAR(150)
    DECLARE CURSEUR CURSOR
	
	FOR SELECT SF.LIBELLE COMBI,S.LIBELLE SALLE FROM SALLEFUS SF,SALLEFUS_COMP SFC,SALLE S 
	WHERE SF.CODESALLEFUS=SFC.CODESALLEFUS AND DECODESALLE=S.CODESALLE 
	AND SF.CODESALLEFUS IN (SELECT SF.CODESALLEFUS FROM SALLEFUS SF,SALLEFUS_COMP SFC WHERE SF.CODESALLEFUS=SFC.CODESALLEFUS AND (DECODESALLE=@codesalle OR SFC.CODESALLE=@codesalle)) 
	UNION SELECT SF.LIBELLE COMBI,S.LIBELLE SALLE FROM SALLEFUS SF,SALLEFUS_COMP SFC,SALLE S 
	WHERE SF.CODESALLEFUS=SFC.CODESALLEFUS AND SFC.CODESALLE=S.CODESALLE 
	AND SF.CODESALLEFUS IN (SELECT SF.CODESALLEFUS FROM SALLEFUS SF,SALLEFUS_COMP SFC WHERE SF.CODESALLEFUS=SFC.CODESALLEFUS AND (DECODESALLE=@codesalle OR SFC.CODESALLE=@codesalle)) ORDER BY COMBI,SALLE

	set @work = ''

	OPEN CURSEUR
	FETCH NEXT FROM CURSEUR
	INTO @COMBI,@SALLE

	WHILE @@FETCH_STATUS = 0
	BEGIN
		set @work = @work+';'+@COMBI+'|'+@SALLE
		FETCH NEXT FROM CURSEUR
		INTO @COMBI,@SALLE
	END
	CLOSE CURSEUR
	DEALLOCATE CURSEUR

	--IF LEN(@work)>0 BEGIN
	--	set @work = SUBSTRING(@work,2,LEN(@work))
	--END 

    RETURN @work
END
GO

IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME='F_GET_AMENAGEMENT' AND TYPE='FN')
  DROP FUNCTION dbo.F_GET_AMENAGEMENT
GO

CREATE FUNCTION dbo.F_GET_AMENAGEMENT (@codesalle VARCHAR(14))
RETURNS VARCHAR(4000)
AS BEGIN
    DECLARE @Work VARCHAR(1000)

	DECLARE @LIBELLE VARCHAR(150)
	DECLARE @CAPACITE VARCHAR(150)
	DECLARE @PREPA VARCHAR(150)
	DECLARE @RANG VARCHAR(150)
    DECLARE CURSEUR CURSOR
	
	FOR SELECT ISNULL(LIBELLE,''),ISNULL(CAPACITE,''),ISNULL(CONVERT(VARCHAR(5),PREPARATION,108),'') PREPA,ISNULL(CONVERT(VARCHAR(5),RANGEMENT,108),'') RANG FROM AMENAGEMENT,AMENAGSALLE WHERE AMENAGEMENT.CODEAMENAGEMENT=AMENAGSALLE.CODEAMENAGEMENT AND CODESALLE=@codesalle ORDER BY LIBELLE

	set @work = ''

	OPEN CURSEUR
	FETCH NEXT FROM CURSEUR
	INTO @LIBELLE,@CAPACITE,@PREPA,@RANG

	WHILE @@FETCH_STATUS = 0
	BEGIN
		set @work = @work+';'+@LIBELLE+'|'+@CAPACITE+'|'+@PREPA+'|'+@RANG
		FETCH NEXT FROM CURSEUR
		INTO @LIBELLE,@CAPACITE,@PREPA,@RANG
	END
	CLOSE CURSEUR
	DEALLOCATE CURSEUR

	--IF LEN(@work)>0 BEGIN
	--	set @work = SUBSTRING(@work,2,LEN(@work))
	--END 

    RETURN @work
END
GO
