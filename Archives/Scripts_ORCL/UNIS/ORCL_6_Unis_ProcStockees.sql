--------------------------------------------------------------------------------
--                                                                            --
--     PROCEDURES STOCKEES         Date de dernière mise à jour : 16/02/2009     --
--                                                                            --
--------------------------------------------------------------------------------

-------------------------------
-- PROCEDURES STOCKEES ZCL23 --
-------------------------------

CREATE OR REPLACE PROCEDURE PS_IDENTITE_CREATION_VISITEUR
    (MYNOM IN VARCHAR2,
    MYPRENOM IN VARCHAR2,
    MYDATENAISSANCE IN DATE,
    MYSEXE IN VARCHAR2, /*F ou M*/
    MYNATIONALITE IN VARCHAR2, /* iso 3 */
    MYID OUT VARCHAR2)
IS
    MYNATIONALITEID VARCHAR2(14);
    MYNOMJEUNEFILLE VARCHAR2(35);
    MYSOCIETE VARCHAR2(35);
    MYSOCIETEID VARCHAR2(14);
    MYCODECIVILITE INT;
    MYCIVILITE VARCHAR2(30);
    MYINTERDIT VARCHAR2(1);
    MYDEBUTINTERDIT DATE;
    MYFININTERDIT DATE;
    MYNATUREID VARCHAR2(35);
    MYFLAG VARCHAR2(14);
    MYIDENTITY VARCHAR2(14);
    MYPAYS VARCHAR2(35);
    TMP INT;
BEGIN
    SELECT SUBSTR(VERSION, 1, 3) INTO MYFLAG FROM VERSION_SFW WHERE ROWNUM = 1;
    SELECT SEQ_IDENTITY.NEXTVAL INTO MYIDENTITY FROM DUAL;
    MYID := MYFLAG || '' || MYIDENTITY;

    SELECT COUNT(*) INTO TMP FROM PAYS WHERE UPPER(CODEISO3) = UPPER(MYNATIONALITE);
    IF TMP > 0 THEN
        SELECT PAYSID INTO MYNATIONALITEID FROM PAYS WHERE UPPER(CODEISO3) = UPPER(MYNATIONALITE) AND ROWNUM = 1 AND PAYSID IS NOT NULL;
    ELSE
        MYNATIONALITEID := 'VPARDEFAUT';
    END IF;

    SELECT LIBELLE INTO MYPAYS FROM PAYS WHERE PAYSID = MYNATIONALITEID;

    IF UPPER(MYSEXE) = 'F' THEN
        MYCODECIVILITE := 2;
        MYCIVILITE := 'Mme';
        MYNOMJEUNEFILLE := MYNOM;
    ELSE
        IF UPPER(MYSEXE) = 'M' THEN
            MYCODECIVILITE := 1;
            MYCIVILITE := 'M.';
        END IF;
    END IF;

    MYSOCIETEID := 'VPARDEFAUT';
    MYSOCIETE := '**********';
    MYINTERDIT := '0';
    MYDEBUTINTERDIT := TRUNC(SYSDATE);
    MYFININTERDIT := SYSDATE + 36525;
    MYNATUREID := 'VPARDEFAUT';

    INSERT INTO INTERLOCUTEUR (INTERLOCUTEURID, SOCIETEID, SOCIETE, NOM, NOMJEUNEFILLE, PRENOM, NOMPRENOM, DATENAISSANCE, NATIONALITEID, PAYS, CODECIVILITE, CIVILITE, NATUREID, INTERDIT, DEBUTINTERDIT, FININTERDIT, DATECREATION, DATEMAJ)
        VALUES (MYID, MYSOCIETEID, MYSOCIETE, UPPER(MYNOM), UPPER(MYNOMJEUNEFILLE), MYPRENOM, UPPER(MYNOM)||' '||MYPRENOM, MYDATENAISSANCE, MYNATIONALITEID, MYPAYS, MYCODECIVILITE, MYCIVILITE, MYNATUREID, MYINTERDIT, TRUNC(MYDEBUTINTERDIT), TRUNC(MYFININTERDIT), SYSDATE, SYSDATE);
    COMMIT;
END;
/
COMMIT;


CREATE OR REPLACE PROCEDURE PS_IDENTITE_CREATION_PIECE
    (MYTYPEPIECE IN VARCHAR2, /* P pour passeport et ID pour carte identite */
    MYPAYSEMETTEUR IN VARCHAR2,
    MYNPIECE IN VARCHAR2,
    MYPREFEMETTRICE IN VARCHAR2,
    MYDATEEXPIRATION IN DATE,
    MYOPTIONS IN VARCHAR2,
    MYINTERLOCUTEURID IN VARCHAR2)
IS
    MYID VARCHAR2(14);
    MYTYPEIDENTITEID INT;
    MYFLAG VARCHAR2(14);
    MYIDENTITY VARCHAR2(14);
BEGIN
    SELECT SUBSTR(VERSION, 1, 3) INTO MYFLAG FROM VERSION_SFW WHERE ROWNUM = 1;
    SELECT SEQ_IDENTITY.NEXTVAL INTO MYIDENTITY FROM DUAL;
    MYID := MYFLAG || '' || MYIDENTITY;

    MYTYPEIDENTITEID := 0;
    IF MYTYPEPIECE='P' THEN MYTYPEIDENTITEID :=-1; END IF;
    IF MYTYPEPIECE LIKE 'A%' OR MYTYPEPIECE LIKE 'C%' OR MYTYPEPIECE LIKE 'I%' THEN MYTYPEIDENTITEID :=-4; END IF;
    IF MYTYPEPIECE='TS' THEN MYTYPEIDENTITEID :=-3; END IF;
    IF MYTYPEPIECE='ID' AND MYPAYSEMETTEUR = 'FRA' THEN MYTYPEIDENTITEID :=-2; END IF;
    IF MYTYPEPIECE LIKE 'V%' THEN MYTYPEIDENTITEID :=-5; END IF;

    INSERT INTO IDENTITES (IDENTITEID, TYPEIDENTITEID, FINVALIDITE, NUMERO, INTERLOCUTEURID, DATECREATION, DATEMAJ)
        VALUES (MYID, MYTYPEIDENTITEID, MYDATEEXPIRATION, MYNPIECE, MYINTERLOCUTEURID, SYSDATE, SYSDATE);

    UPDATE INTERLOCUTEUR SET IDENTITEID = MYID WHERE INTERLOCUTEURID = MYINTERLOCUTEURID;
    COMMIT;
END;
/
COMMIT;


CREATE OR REPLACE PROCEDURE PS_IDENTITE_CREATION
    (MYTYPEPIECE IN VARCHAR2,
    MYPAYSEMETTEUR IN VARCHAR2,
    MYNPIECE IN VARCHAR2,
    MYPREFEMETTRICE IN VARCHAR2,
    MYNOM IN VARCHAR2,
    MYPRENOM IN VARCHAR2,
    MYDATENAISSANCE IN DATE,
    MYSEXE IN VARCHAR2,
    MYNATIONALITE IN VARCHAR2, /* iso 3 */
    MYDATEEXPIRATION IN DATE,
    MYOPTIONS IN VARCHAR2,
    MYINTERLOCUTEURID OUT VARCHAR2)
IS
BEGIN
    PS_IDENTITE_CREATION_VISITEUR(MYNOM, MYPRENOM, MYDATENAISSANCE, MYSEXE, MYNATIONALITE, MYINTERLOCUTEURID);
    PS_IDENTITE_CREATION_PIECE(MYTYPEPIECE, MYPAYSEMETTEUR, MYNPIECE, MYPREFEMETTRICE, MYDATEEXPIRATION, MYOPTIONS, MYINTERLOCUTEURID);
END;
/
COMMIT;


CREATE OR REPLACE PROCEDURE PS_IDENTITE_CRITERES_DEUX
    (MYNOM IN VARCHAR2,
    MYPRENOM IN VARCHAR2,
    MYDATENAISSANCE IN DATE)
IS
    TMP INT;
BEGIN
    DELETE FROM IDENTITE_TMP;
    SELECT COUNT(*) INTO TMP FROM INTERLOCUTEUR WHERE ((UPPER(NOM) = MYNOM OR UPPER(NOMJEUNEFILLE) = MYNOM) AND (UPPER(PRENOM) LIKE(MYPRENOM||'%'))) OR ((UPPER(NOM) = MYNOM OR UPPER(NOMJEUNEFILLE) = MYNOM) AND TRUNC(DATENAISSANCE) = TRUNC(MYDATENAISSANCE));
    IF TMP > 0 THEN
        INSERT INTO IDENTITE_TMP (TMPID) SELECT INTERLOCUTEURID FROM INTERLOCUTEUR WHERE ((UPPER(NOM) = MYNOM OR UPPER(NOMJEUNEFILLE) = MYNOM) AND (UPPER(PRENOM) LIKE(MYPRENOM||'%'))) OR ((UPPER(NOM) = MYNOM OR UPPER(NOMJEUNEFILLE) = MYNOM) AND TRUNC(DATENAISSANCE) = TRUNC(MYDATENAISSANCE));
    ELSE
        INSERT INTO IDENTITE_TMP (TMPID) VALUES ('-1');
    END IF;
    COMMIT;
END;
/
COMMIT;


CREATE OR REPLACE PROCEDURE PS_IDENTITE_CRITERES_TROIS
    (MYNOM IN VARCHAR2,
    MYPRENOM IN VARCHAR2,
    MYDATENAISSANCE IN DATE)
IS
    TMP INT;
BEGIN
    DELETE FROM IDENTITE_TMP;
    COMMIT;
    SELECT COUNT(*) INTO TMP FROM INTERLOCUTEUR WHERE (UPPER(NOM) = MYNOM OR UPPER(NOMJEUNEFILLE) = MYNOM) AND UPPER(PRENOM) LIKE (MYPRENOM||'%') AND TRUNC(DATENAISSANCE) = TRUNC(MYDATENAISSANCE);
    IF TMP > 0 THEN
        INSERT INTO IDENTITE_TMP (TMPID) SELECT INTERLOCUTEURID FROM INTERLOCUTEUR WHERE (UPPER(NOM) = MYNOM OR UPPER(NOMJEUNEFILLE) = MYNOM) AND UPPER(PRENOM) LIKE (MYPRENOM||'%') AND TRUNC(DATENAISSANCE) = TRUNC(MYDATENAISSANCE);
        COMMIT;
    ELSE
        INSERT INTO IDENTITE_TMP (TMPID) VALUES ('-1');
        COMMIT;
    END IF;
END;
/
COMMIT;


CREATE OR REPLACE PROCEDURE PS_IDENTITE_MAJ_VISITEUR
    (MYNOM IN VARCHAR2,
    MYPRENOM IN VARCHAR2,
    MYDATENAISSANCE IN DATE,
    MYSEXE IN VARCHAR2,
    MYNATIONALITE IN VARCHAR2, /* iso 3 */
    MYINTERLOCUTEURID IN VARCHAR2)
IS
    MYNATIONALITEID VARCHAR2(14);
    MYNOMJEUNEFILLE VARCHAR2(35);
    MYNOM2 VARCHAR2(35);
    MYCODECIVILITE INT;
    MYCIVILITE VARCHAR2(30);
    MYPAYS VARCHAR2(35);
    TMP INT;
BEGIN
    MYNOM2 := MYNOM;
    SELECT COUNT(*) INTO TMP FROM PAYS WHERE UPPER(CODEISO3) = UPPER(MYNATIONALITE);
    IF TMP > 0 THEN
        SELECT PAYSID INTO MYNATIONALITEID FROM PAYS WHERE UPPER(CODEISO3) = UPPER(MYNATIONALITE) AND ROWNUM = 1 AND PAYSID IS NOT NULL;
    ELSE
        MYNATIONALITEID := 'VPARDEFAUT';
    END IF;

    SELECT LIBELLE INTO MYPAYS FROM PAYS WHERE PAYSID = MYNATIONALITEID AND ROWNUM = 1;

    IF UPPER(MYSEXE) = 'F' THEN
        MYCODECIVILITE := 2;
        MYCIVILITE := 'Mme';
        MYNOMJEUNEFILLE := MYNOM2;
        SELECT NOM INTO MYNOM2 FROM INTERLOCUTEUR WHERE INTERLOCUTEURID = MYINTERLOCUTEURID AND ROWNUM = 1;
    ELSE
        IF UPPER(MYSEXE) = 'M' THEN
            MYCODECIVILITE := 1;
            MYCIVILITE := 'M.';
        END IF;
    END IF;

    UPDATE INTERLOCUTEUR SET NOM = UPPER(MYNOM2), NOMJEUNEFILLE = MYNOMJEUNEFILLE, PRENOM = MYPRENOM, NOMPRENOM = UPPER(MYNOM2) || ' ' || MYPRENOM, DATENAISSANCE = MYDATENAISSANCE, NATIONALITEID = MYNATIONALITEID, PAYS = MYPAYS, CODECIVILITE = MYCODECIVILITE, CIVILITE = MYCIVILITE WHERE INTERLOCUTEURID = MYINTERLOCUTEURID;
    COMMIT;
END;
/
COMMIT;


CREATE OR REPLACE PROCEDURE PS_IDENTITE_NUM_PIECE
    (MYNPIECE IN VARCHAR2,
    MYINTERLOCUTEURID OUT VARCHAR2)
IS
    TMP INT;
BEGIN
    SELECT COUNT(*) INTO TMP FROM IDENTITES WHERE UPPER(NUMERO) = UPPER(MYNPIECE);
    IF TMP > 0 THEN
        SELECT INTERLOCUTEURID INTO MYINTERLOCUTEURID FROM IDENTITES WHERE UPPER(NUMERO) = UPPER(MYNPIECE) AND ROWNUM = 1 AND INTERLOCUTEURID IS NOT NULL;
    ELSE
        MYINTERLOCUTEURID := '-1';
    END IF;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_IDENTITE_CREATION_PIECE_UNQ
    (MYTYPEPIECE IN VARCHAR2, /* P pour passeport et ID pour carte identite */
    MYPAYSEMETTEUR IN VARCHAR2,
    MYNPIECE IN VARCHAR2,
    MYPREFEMETTRICE IN VARCHAR2,
    MYDATEEXPIRATION IN DATE,
    MYOPTIONS IN VARCHAR2,
    MYINTERLOCUTEURID IN VARCHAR2)
IS
    MYID VARCHAR2(14);
    MYTYPEIDENTITEID INT;
    MYFLAG VARCHAR2(14);
    MYIDENTITY VARCHAR2(14);
    MYOLD_INTERID VARCHAR2(14);
BEGIN

    PS_IDENTITE_NUM_PIECE(MYNPIECE,MYOLD_INTERID);
    UPDATE INTERLOCUTEUR SET IDENTITEID = '' WHERE INTERLOCUTEURID = MYOLD_INTERID;
    DELETE FROM IDENTITES WHERE UPPER(NUMERO) = MYNPIECE;

    SELECT SUBSTR(VERSION, 1, 3) INTO MYFLAG FROM VERSION_SFW WHERE ROWNUM = 1;
    SELECT SEQ_IDENTITY.NEXTVAL INTO MYIDENTITY FROM DUAL;
    MYID := MYFLAG || '' || MYIDENTITY;


    CASE MYTYPEPIECE
        WHEN 'P' THEN MYTYPEIDENTITEID :=-1;
        WHEN 'IR' THEN MYTYPEIDENTITEID :=-4;
        WHEN 'TS' THEN MYTYPEIDENTITEID :=-3;
        WHEN 'ID' THEN MYTYPEIDENTITEID :=-2;
        WHEN 'VD' THEN MYTYPEIDENTITEID :=-5;
        WHEN 'V' THEN MYTYPEIDENTITEID :=-5;
        ELSE MYTYPEIDENTITEID := 0;
    END CASE;

    INSERT INTO IDENTITES (IDENTITEID, TYPEIDENTITEID, FINVALIDITE, NUMERO, INTERLOCUTEURID, DATECREATION, DATEMAJ)
        VALUES (MYID, MYTYPEIDENTITEID, MYDATEEXPIRATION, MYNPIECE, MYINTERLOCUTEURID, SYSDATE, SYSDATE);

    UPDATE INTERLOCUTEUR SET IDENTITEID = MYID WHERE INTERLOCUTEURID = MYINTERLOCUTEURID;
    COMMIT;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_CVISITE_CREATION_SOCIETE
    (MYSOCIETE IN VARCHAR2,
    MYISRESIDANT IN VARCHAR2,
    MYADRESSE IN VARCHAR2,
    MYCODEPOSTAL IN VARCHAR2,
    MYVILLE IN VARCHAR2,

    MYID OUT VARCHAR2)
IS
    MYFLAG VARCHAR2(14);
    MYIDENTITY VARCHAR2(14);
    TMP INT;
BEGIN
    SELECT COUNT(*) INTO TMP FROM SOCIETE WHERE UPPER(NOM) = UPPER(MYSOCIETE) AND ISRESIDANT = MYISRESIDANT;
    IF TMP > 0 THEN
        SELECT SOCIETEID INTO MYID FROM SOCIETE WHERE UPPER(NOM) = UPPER(MYSOCIETE) AND ISRESIDANT = MYISRESIDANT AND ROWNUM = 1;
    ELSE
        SELECT SUBSTR(VERSION, 1, 3) INTO MYFLAG FROM VERSION_SFW WHERE ROWNUM = 1;
        SELECT SEQ_IDENTITY.NEXTVAL INTO MYIDENTITY FROM DUAL;
        MYID := MYFLAG || '' || MYIDENTITY;
        INSERT INTO SOCIETE(SOCIETEID, NOM, ISRESIDANT, ADRESSE, ADRESSE2, CP, VILLE, INTERDIT, DEBUTINTERDIT, FININTERDIT, DATECREATION, DATEMAJ)
            VALUES (MYID, UPPER(MYSOCIETE), MYISRESIDANT, MYADRESSE, MYADRESSE, MYCODEPOSTAL, MYVILLE, '0', TRUNC(SYSDATE), SYSDATE+(365*100), SYSDATE, SYSDATE);
        COMMIT;
    END IF;
END;
/
COMMIT;


CREATE OR REPLACE PROCEDURE PS_CVISITE_CREATION_FONCTION
    (MYLIBELLE IN VARCHAR2,
    MYID OUT INT)
IS
    MYFLAG VARCHAR2(14);
    MYIDENTITY VARCHAR2(14);
    TMP INT;
BEGIN
    SELECT COUNT(*) INTO TMP FROM FONCTION WHERE UPPER(LIBELLE) = UPPER(MYLIBELLE);
    IF TMP > 0 THEN
        SELECT CODEFONCTION INTO MYID FROM FONCTION WHERE UPPER(LIBELLE) = UPPER(MYLIBELLE) AND ROWNUM = 1;
    ELSE
        SELECT SUBSTR(VERSION, 1, 3) INTO MYFLAG FROM VERSION_SFW WHERE ROWNUM = 1;
        SELECT SEQ_IDENTITY.NEXTVAL INTO MYIDENTITY FROM DUAL;
        MYID := MYFLAG || '' || MYIDENTITY;
        INSERT INTO FONCTION(CODEFONCTION, LIBELLE, DATECREATION, DATEMAJ)
            VALUES (MYID, UPPER(MYLIBELLE), SYSDATE, SYSDATE);
        COMMIT;
    END IF;
END;
/
COMMIT;


CREATE OR REPLACE PROCEDURE PS_CVISITE_CREATION_VISITEUR
    (MYNOM IN VARCHAR2,
    MYPRENOM IN VARCHAR2,
    MYSOCIETE IN VARCHAR2,
    MYFONCTION IN VARCHAR2,
    MYADRESSE IN VARCHAR2,
    MYCODEPOSTAL IN VARCHAR2,
    MYVILLE IN VARCHAR2,
    MYTEL IN VARCHAR2,
    MYFAX IN VARCHAR2,
    MYEMAIL IN VARCHAR2,
    MYINTERDIT IN VARCHAR2,
    MYDEBUTINTERDIT IN DATE,
    MYFININTERDIT IN DATE,
    MYID OUT VARCHAR2)
IS
    MYCIVID INT;
    MYSOCID VARCHAR2(14);
    MYFCTID INT;
    MYNATUREID VARCHAR2(14);
    MYPAYSID VARCHAR2(14);
    MYFLAG VARCHAR2(14);
    MYIDENTITY VARCHAR2(14);
    TMP INT;
BEGIN
    MYNATUREID := 'VPARDEFAUT';
    MYPAYSID := 'VPARDEFAUT';
    PS_CVISITE_CREATION_SOCIETE (UPPER(MYSOCIETE), 0, MYADRESSE, MYCODEPOSTAL, MYVILLE, MYSOCID);
    PS_CVISITE_CREATION_FONCTION (MYFONCTION, MYFCTID);

    SELECT COUNT(*) INTO TMP FROM INTERLOCUTEUR WHERE UPPER(NOM) = UPPER(MYNOM) AND UPPER(PRENOM) = UPPER(MYPRENOM) AND UPPER(SOCIETE) = UPPER(MYSOCIETE) AND ROWNUM = 1;
    IF TMP > 0 THEN BEGIN
        SELECT INTERLOCUTEURID INTO MYID FROM INTERLOCUTEUR WHERE UPPER(NOM) = UPPER(MYNOM) AND UPPER(PRENOM) = UPPER(MYPRENOM) AND UPPER(SOCIETE) = UPPER(MYSOCIETE) AND ROWNUM = 1;
        UPDATE INTERLOCUTEUR SET CODEFONCTION = MYFCTID, FONCTION = UPPER(MYFONCTION), SOCIETEID = MYSOCID, TELEPHONE = MYTEL, FAX = MYFAX, EMAIL = MYEMAIL, NATUREID = MYNATUREID, NATIONALITEID = MYPAYSID, INTERDIT = MYINTERDIT, DEBUTINTERDIT = MYDEBUTINTERDIT, FININTERDIT = MYFININTERDIT, DATEMAJ = SYSDATE WHERE INTERLOCUTEURID = MYID;
    END;
    ELSE
        SELECT SUBSTR(VERSION, 1, 3) INTO MYFLAG FROM VERSION_SFW WHERE ROWNUM = 1;
        SELECT SEQ_IDENTITY.NEXTVAL INTO MYIDENTITY FROM DUAL;
        MYID := MYFLAG || '' || MYIDENTITY;

        INSERT INTO INTERLOCUTEUR (INTERLOCUTEURID, NOM, PRENOM, NOMPRENOM, CODEFONCTION, FONCTION, SOCIETEID, SOCIETE, TELEPHONE, FAX, EMAIL, NATUREID, NATIONALITEID, INTERDIT, DEBUTINTERDIT, FININTERDIT, DATECREATION, DATEMAJ)
            VALUES (MYID, UPPER(MYNOM), MYPRENOM, UPPER(MYNOM)||' '||MYPRENOM, MYFCTID, UPPER(MYFONCTION), MYSOCID, UPPER(MYSOCIETE), MYTEL, MYFAX, MYEMAIL, MYNATUREID, MYPAYSID, MYINTERDIT, TO_DATE(MYDEBUTINTERDIT,'DD/MM/YYYY'), TO_DATE(MYFININTERDIT,'DD/MM/YYYY'), SYSDATE, SYSDATE);
    END IF;
    COMMIT;
END;
/
COMMIT;

-------------------------------
-- PROCEDURES STOCKEES ZCL27 --
-------------------------------

--    PROCEDURE STOCKEE : ZCL27_ENREGBADGE
CREATE OR REPLACE PROCEDURE ZCL27_ENREGBADGE
    (Num IN VARCHAR2,
    Val IN INT,
    SiteID IN VARCHAR2)
IS
    TMP INT;
BEGIN
    SELECT COUNT(*) INTO TMP FROM ZCL27_BADGE WHERE B_CARD_NO = Num AND SITEID = SiteID;
    IF TMP > 0 THEN
        UPDATE ZCL27_BADGE SET B_ASSIGNED = Val, CARDQUALITY = 'Pool', DATEMAJ = SYSDATE
            WHERE B_CARD_NO = Num AND SITEID = SiteID;
    ELSE
        INSERT INTO ZCL27_BADGE (B_CARD_NO, B_ASSIGNED, SITEID, DATECREATION, DATEMAJ) VALUES (Num, Val, SiteID, SYSDATE, SYSDATE);
    END IF;
    COMMIT;
END;
/
COMMIT;

--    PROCEDURE STOCKEE : ZCL27_ENREGWORKGROUP
CREATE OR REPLACE PROCEDURE ZCL27_ENREGWORKGROUP
    (Name IN VARCHAR2,
    Id IN VARCHAR2,
    SiteID IN VARCHAR2)
IS
    TMP INT;
BEGIN
    SELECT COUNT(*) INTO TMP FROM ZCL27_WORKGROUP WHERE WG_ID = Id AND SITEID = SiteID;
    IF TMP > 0 THEN
        UPDATE ZCL27_WORKGROUP SET WG_NAME = Name, DATEMAJ = SYSDATE
            WHERE WG_ID = Id AND SITEID = SiteID;
    ELSE
        INSERT INTO ZCL27_WORKGROUP (WG_NAME, WG_ID, SITEID, DATECREATION, DATEMAJ) VALUES (Name, Id, SiteID, SYSDATE, SYSDATE);
    END IF;
    COMMIT;
END;
/
COMMIT;

--    PROCEDURE STOCKEE : ZCL27_ENREGEMPLOYEE
CREATE OR REPLACE PROCEDURE ZCL27_ENREGEMPLOYEE
    (InterlocuteurID IN VARCHAR2,
    SiteID IN VARCHAR2,
    ECard IN VARCHAR2,
    EFirst IN VARCHAR2,
    ELast IN VARCHAR2,
    EStartDate IN DATE,
    EStartDatet IN DATE,
    EEndDate IN DATE,
    EEndDatet IN DATE,
    StatutEntree IN INT,
    EWId IN VARCHAR2)
IS
    TMP INT;
BEGIN
    SELECT COUNT(*) INTO TMP FROM ZCL27_BADGE WHERE B_CARD_NO = ECard AND SITEID = SiteID;
    IF TMP = 0 THEN
        INSERT INTO ZCL27_BADGE (B_CARD_NO, B_ASSIGNED, CARDQUALITY, SITEID, DATECREATION, DATEMAJ)
            VALUES (ECard, 1, 'Creation', SiteID, SYSDATE, SYSDATE);
    END IF;
    INSERT INTO ZCL27_EMPLOYEE (INTERLOCUTEURID, SITEID, E_CARDASSIGNED, E_CARDNUMBER, E_FIRSTNAME, E_LASTNAME, E_STARTDATE, E_STARTDATETIME, E_ENDDATE, E_ENDDATETIME, E_WG_ID, STATUT_ENTREE, STATUT_SORTIE, DATECREATION, DATEMAJ)
        VALUES (InterlocuteurID, SiteID, 0, ECard, EFirst, ELast, EStartDate, EStartDatet, EEndDate, EEndDatet, EWId, StatutEntree, 0, SYSDATE, SYSDATE);
    COMMIT;
END;
/
COMMIT;

--    PROCEDURE STOCKEE : ZCL27_UPDATEEMPLOYEE
CREATE OR REPLACE PROCEDURE ZCL27_UPDATEEMPLOYEE
    (ID IN INT,
    ECard IN VARCHAR2,
    ECardAssigned IN INT,
    EID IN INT,
    ELastUpdatedTime IN VARCHAR2,
    EReference IN INT,
    EVisitor IN INT,
    StatutSortie IN INT,
    SiteID IN VARCHAR2)
IS
BEGIN
    IF StatutSortie = 1 THEN
        UPDATE ZCL27_BADGE SET B_ASSIGNED = ECardAssigned WHERE B_CARD_NO = ECard AND SITEID = SiteID;
    END IF;

    UPDATE ZCL27_EMPLOYEE SET
        E_CARDASSIGNED = ECardAssigned,
        E_EMPLOYEEID = EID,
        E_LASTUPDATEDTIME = SUBSTR(ELastUpdatedTime, 1, 18),
        E_REFERENCE = EReference,
        E_VISITOR = EVisitor,
        STATUT_SORTIE = StatutSortie,
        DATEMAJ = SYSDATE
        WHERE ID_EMPLOYEE = ID;
    COMMIT;
END;
/
COMMIT;

--    PROCEDURE STOCKEE : ZCL27_SORTIE
CREATE OR REPLACE PROCEDURE ZCL27_SORTIE
    (Id IN INTEGER,
    SiteID IN VARCHAR2,
    EndDate IN DATE,
    EndDateT IN DATE,
    CardNumber IN VARCHAR2)
IS
    TMP INT;
    InterlocuteurID VARCHAR2(14);
    VisiteID VARCHAR2(14);
BEGIN
    SELECT COUNT(*) INTO TMP FROM ZCL27_EMPLOYEE WHERE SITEID = SiteID AND E_EMPLOYEEID = Id;
    IF TMP > 0 THEN
        SELECT INTERLOCUTEURID INTO InterlocuteurID FROM ZCL27_EMPLOYEE WHERE SITEID = SiteID AND E_EMPLOYEEID = Id AND ROWNUM = 1;
        UPDATE VISITES SET STATUTID = 16, STATUTVISITE = 'Terminee ctrl', HFIN = EndDateT, FINVISITE = EndDate, DATEMAJ = SYSDATE WHERE INTERLOCUTEURID = InterlocuteurID AND SITEID = SiteID AND STATUTID = 8;
        UPDATE ZCL27_BADGE SET B_ASSIGNED = 0 WHERE B_CARD_NO = CardNumber AND SITEID = SiteID;
    END IF;
    COMMIT;
END;
/
COMMIT;

--    PROCEDURE STOCKEE : ZCL27_SUPPEMPLOYEE
CREATE OR REPLACE PROCEDURE ZCL27_SUPPEMPLOYEE
    (InterlocuteurID IN VARCHAR2,
    SiteID IN VARCHAR2,
    CardNO IN VARCHAR2)
IS
BEGIN
    INSERT INTO ZCL27_EMPLOYEE (SITEID, INTERLOCUTEURID, E_CARDNUMBER, E_CARDASSIGNED, E_FIRSTNAME, E_LASTNAME, E_EMPLOYEEID,
        E_STARTDATE, E_STARTDATETIME, E_ENDDATE, E_ENDDATETIME, E_WG_ID, E_LASTUPDATEDTIME, E_REFERENCE, E_VISITOR,
        STATUT_ENTREE, STATUT_SORTIE, DATECREATION, DATEMAJ)
        SELECT SITEID, INTERLOCUTEURID, E_CARDNUMBER, E_CARDASSIGNED, E_FIRSTNAME, E_LASTNAME, E_EMPLOYEEID,
            E_STARTDATE, E_STARTDATETIME, E_ENDDATE, E_ENDDATETIME, E_WG_ID, E_LASTUPDATEDTIME, E_REFERENCE, E_VISITOR,
            -1, 0, SYSDATE, SYSDATE
        FROM ZCL27_EMPLOYEE
        WHERE INTERLOCUTEURID = InterlocuteurID AND SITEID = SiteID AND E_CARDNUMBER = CardNO AND E_EMPLOYEEID IS NOT NULL;
    COMMIT;
END;
/
COMMIT;

--    PROCEDURE STOCKEE : ZCL27_ENREGPARAMT
CREATE OR REPLACE PROCEDURE ZCL27_ENREGPARAMT
    (Hliste IN DATE,
    freq IN INT,
    Hlog IN DATE,
    Hsort1 IN DATE,
    Hsort2 IN DATE)
IS
    TMP INT;
BEGIN
    SELECT COUNT(*) INTO TMP FROM ZCL27_PARAMETRE;
    IF TMP > 0 THEN
        UPDATE ZCL27_PARAMETRE
            SET H_LISTE    = Hliste, FREQ_EMPL = freq, H_LOG = Hlog,
            H_SORTIE1 = Hsort1, H_SORTIE2 = Hsort2, DATEMAJ = SYSDATE;
    ELSE
        INSERT INTO ZCL27_PARAMETRE (H_LISTE, FREQ_EMPL, H_LOG, H_SORTIE1, H_SORTIE2, DATECREATION, DATEMAJ)
            VALUES (Hliste, freq, Hlog, Hsort1, Hsort2, SYSDATE, SYSDATE);
    END IF;
    COMMIT;
END;
/
COMMIT;

--    PROCEDURE STOCKEE : ZCL27_ENREGSITE
CREATE OR REPLACE PROCEDURE ZCL27_ENREGSITE
    (SiteID IN VARCHAR2,
    ServiceUrl IN VARCHAR2)
IS
    TMP INT;
BEGIN
    SELECT COUNT(*) INTO TMP FROM ZCL27_SITE WHERE SITEID = SiteID;
    IF TMP > 0 THEN
        UPDATE ZCL27_SITE SET SERVICEURL = ServiceUrl, DATEMAJ = SYSDATE WHERE SITEID = SiteID;
    ELSE
        INSERT INTO ZCL27_SITE (SITEID, SERVICEURL, DATECREATION, DATEMAJ)
            VALUES (SiteID, ServiceUrl, SYSDATE, SYSDATE);
    END IF;
    IF ServiceUrl IS NULL THEN
        DELETE FROM ZCL27_SITE WHERE SITEID = SiteID;
    END IF;
    COMMIT;
END;
/
COMMIT;

--    PROCEDURE STOCKEE : ZCL27_PURGEEMPLOYEEI
CREATE OR REPLACE PROCEDURE ZCL27_PURGEEMPLOYEEI
IS
BEGIN
    INSERT INTO ZCL27_EMPLOYEE_LOG (ID_EMPLOYEE, SITEID, INTERLOCUTEURID, E_CARDNUMBER, E_CARDASSIGNED, E_FIRSTNAME, E_LASTNAME, E_EMPLOYEEID, E_STARTDATE, E_STARTDATETIME, E_ENDDATE, E_ENDDATETIME, E_WG_ID, E_LASTUPDATEDTIME, E_REFERENCE, E_VISITOR, STATUT_ENTREE, STATUT_SORTIE, DATECREATION, DATEMAJ, DATELOG)
        SELECT ID_EMPLOYEE, SITEID, INTERLOCUTEURID, E_CARDNUMBER, E_CARDASSIGNED, E_FIRSTNAME, E_LASTNAME, E_EMPLOYEEID, E_STARTDATE, E_STARTDATETIME, E_ENDDATE, E_ENDDATETIME, E_WG_ID, E_LASTUPDATEDTIME, E_REFERENCE, E_VISITOR, STATUT_ENTREE, STATUT_SORTIE, DATECREATION, DATEMAJ, SYSDATE FROM ZCL27_EMPLOYEE WHERE STATUT_SORTIE = 1;
    DELETE FROM ZCL27_EMPLOYEE WHERE ID_EMPLOYEE IN (SELECT ID_EMPLOYEE FROM ZCL27_EMPLOYEE_LOG);
    COMMIT;
END;
/
COMMIT;

-----------------------------------
-- PROCEDURES STOCKEES OMNIGARDE --
-----------------------------------
--    PROCEDURE STOCKEE : PS_OMNI_CORRIGE_AGENTS
CREATE OR REPLACE PROCEDURE PS_OMNI_CORRIGE_AGENTS IS
BEGIN
    -- Vérification des Agents et qualifications
    -- Verification des Qualifications
    INSERT INTO QPERSONNEL (PERSONNELID,QUALIFID) SELECT DISTINCT PERSONNELID,0 FROM PERSONNEL WHERE PERSONNELID NOT IN (SELECT PERSONNELID FROM QPERSONNEL);
    -- Modification des agents
    UPDATE AGENTPRESENT SET NOMPRENOM=(SELECT NOM ||' '||PRENOM AS AGENT FROM PERSONNEL WHERE PERSONNELID=AGENTPRESENT.PERSONNELID);
    UPDATE AGENTPRESENT SET FONCTION=(SELECT FONCTION.LIBELLE AS FONCTION FROM PERSONNEL, FONCTION WHERE FONCTION.CODEFONCTION(+)=PERSONNEL.CODEFONCTION AND PERSONNEL.PERSONNELID=AGENTPRESENT.PERSONNELID) WHERE SURSITE=0;
    UPDATE AGENTPRESENT SET SITEID=(SELECT SITEID FROM PERSONNEL WHERE PERSONNEL.PERSONNELID=AGENTPRESENT.PERSONNELID) WHERE SITEID IS NULL;
    -- Ajout des agents
    INSERT INTO AGENTPRESENT (PERSONNELID,NOMPRENOM,SURSITE,PARPRISE,FONCTION,SITEID) SELECT PERSONNELID,NOM ||' '||PRENOM AS AGENT,0 AS SURSITE,0 AS PARPRISE,FONCTION.LIBELLE AS FONCTION,SITEID FROM PERSONNEL, FONCTION WHERE FONCTION.CODEFONCTION(+)=PERSONNEL.CODEFONCTION AND PERSONNELID NOT IN (SELECT PERSONNELID FROM AGENTPRESENT);
    -- Suppression des agents
    DELETE FROM AGENTPRESENT WHERE PERSONNELID NOT IN (SELECT PERSONNELID FROM PERSONNEL);
    COMMIT;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_REORDER_SITE

IS
    siteid VARCHAR2(14);
    CURSOR CURSEUR IS
    SELECT SITEID FROM SITE WHERE (SORTORDER='' OR SORTORDER IS NULL);
BEGIN
    FOR site_rec IN CURSEUR
    LOOP
        UPDATE SITE SET SORTORDER=(SELECT (NVL(MAX(SORTORDER),0))+1 FROM SITE) WHERE SITEID=site_rec.SITEID;
    END LOOP;
END;
/
COMMIT;

-------------------------------------------
-- PROCEDURES STOCKEES TELEMAQUE ACCUEIL --
-------------------------------------------


CREATE OR REPLACE FUNCTION IsvisiteurRestreint ( IntelocuteurID in VARCHAR2 ) RETURN VARCHAR2
IS
  NatureID VARCHAR2(14);
  PaysID VARCHAR2(14);
  SocieteID VARCHAR2(14);
  IdInter VARCHAR2(14);
  IdNature VARCHAR2(14);
  IdPays VARCHAR2(14);
  IdSociete VARCHAR2(14);
  Retour VARCHAR2(50);
  TMP INT;
BEGIN
    Retour := '0';
    /* Interlocuteur */
    SELECT COUNT(*) INTO TMP FROM INTERLOCUTEUR WHERE INTERDIT='2' AND INTERLOCUTEURID=IntelocuteurID;
    IF TMP > 0 THEN
    SELECT INTERLOCUTEURID INTO IdInter FROM INTERLOCUTEUR WHERE ROWNUM = 1 AND INTERDIT='2' AND INTERLOCUTEURID=IntelocuteurID;
        /* NatureID*/
        SELECT NATUREID INTO IdNature FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=IntelocuteurID;
        /* PaysID*/
        SELECT NATIONALITEID INTO IdPays FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=IntelocuteurID;
        /* SocieteID*/
        SELECT SOCIETEID INTO IdSociete FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=IntelocuteurID;

        /*  Ctrl Nature*/
        SELECT COUNT(*) INTO TMP FROM NATURE WHERE INTERDIT='2' AND NATUREID=IDNature;
        IF TMP > 0 THEN
            SELECT NATUREID INTO IdNATURE FROM NATURE WHERE ROWNUM = 1 AND INTERDIT='2' AND NATUREID=IdNature;
            /*  Ctrl Pays*/
            SELECT COUNT(*) INTO TMP FROM PAYS WHERE INTERDIT=0 AND INTERDIT='2' AND PAYSID=IDPays;
            IF TMP > 0 THEN
                SELECT PAYSID INTO IdPays FROM PAYS WHERE ROWNUM = 1 AND INTERDIT='2' AND PAYSID=IDPays;
                /*  Ctrl Societe*/
                SELECT COUNT(*) INTO TMP FROM SOCIETE WHERE INTERDIT='2' AND SOCIETEID=IDSociete;
                IF TMP > 0 THEN
                    SELECT SOCIETEID INTO IdSociete FROM SOCIETE WHERE ROWNUM = 1 AND INTERDIT='2' AND SOCIETEID=IDSociete;
                    Retour :='1';
                ELSE
                   Retour := '-4';
                END IF;
            ELSE
                Retour := '-3';
            END IF;
        ELSE
            Retour := '-2';
        END IF;
    ELSE
        Retour := '-1';
    END IF;
    RETURN Retour;
END;
/
COMMIT;


CREATE OR REPLACE FUNCTION IsVisiteurInterdit ( IntelocuteurID in VARCHAR2, dt in date ) RETURN VARCHAR2 IS NatureID VARCHAR2(14);
      PaysID VARCHAR2(14);
      SocieteID VARCHAR2(14);
      IdInter VARCHAR2(14);
      IdNature VARCHAR2(14);
       IdPays VARCHAR2(14);
      IdSociete VARCHAR2(14);
      Retour VARCHAR2(50);
      TMP INT;
BEGIN
    Retour := '0';
    /* Interlocuteur */
    SELECT COUNT(*) INTO TMP FROM INTERLOCUTEUR WHERE INTERDIT=0 AND (SYSDATE BETWEEN DEBUTINTERDIT AND FININTERDIT) AND INTERLOCUTEURID=IntelocuteurID;
    IF TMP > 0 THEN
    SELECT INTERLOCUTEURID INTO IdInter FROM INTERLOCUTEUR WHERE ROWNUM = 1 AND INTERDIT=0 AND (SYSDATE BETWEEN DEBUTINTERDIT AND FININTERDIT) AND INTERLOCUTEURID=IntelocuteurID;
        /* NatureID*/
        SELECT NATUREID INTO IdNature FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=IntelocuteurID;
        /* PaysID*/
        SELECT NATIONALITEID INTO IdPays FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=IntelocuteurID;
        /* SocieteID*/
        SELECT SOCIETEID INTO IdSociete FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=IntelocuteurID;

        /*  Ctrl Nature*/
        SELECT COUNT(*) INTO TMP FROM NATURE WHERE INTERDIT=0 AND (SYSDATE BETWEEN DEBUTINTERDIT AND FININTERDIT) AND NATUREID=IDNature;
        IF TMP > 0 THEN
            SELECT NATUREID INTO IdNATURE FROM NATURE WHERE ROWNUM = 1 AND INTERDIT=0 AND (SYSDATE BETWEEN DEBUTINTERDIT AND FININTERDIT) AND NATUREID=IdNature;
            /*  Ctrl Pays*/
            SELECT COUNT(*) INTO TMP FROM PAYS WHERE INTERDIT=0 AND (SYSDATE BETWEEN DEBUTINTERDIT AND FININTERDIT) AND PAYSID=IDPays;
            IF TMP > 0 THEN
                SELECT PAYSID INTO IdPays FROM PAYS WHERE ROWNUM = 1 AND INTERDIT=0 AND (SYSDATE BETWEEN DEBUTINTERDIT AND FININTERDIT) AND PAYSID=IDPays;
                /*  Ctrl Societe*/
                SELECT COUNT(*) INTO TMP FROM SOCIETE WHERE INTERDIT=0 AND (SYSDATE BETWEEN DEBUTINTERDIT AND FININTERDIT) AND SOCIETEID=IDSociete;
                IF TMP > 0 THEN
                    SELECT SOCIETEID INTO IdSociete FROM SOCIETE WHERE ROWNUM = 1 AND INTERDIT=0 AND (SYSDATE BETWEEN DEBUTINTERDIT AND FININTERDIT) AND SOCIETEID=IDSociete;
                    Retour :='1';
                ELSE
                   Retour := '-4';
                END IF;
            ELSE
                Retour := '-3';
            END IF;
        ELSE
            Retour := '-2';
        END IF;
    ELSE
        Retour := '-1';
    END IF;
    RETURN Retour;
END;
/
COMMIT;

-------------------------------------------
-- PROCEDURES STOCKEES TELEMAQUE ACCUEIL --
-------------------------------------------

CREATE OR REPLACE PROCEDURE SORTIE
 (E_VISITEID IN VARCHAR2,
 E_FINVISITE IN VARCHAR2)
IS
  TMP INT;
  E_STATUTID VARCHAR2(14);
BEGIN
 SELECT COUNT(*) INTO TMP FROM VISITES WHERE VISITEID = E_VISITEID AND ROWNUM = 1;
 IF TMP > 0 THEN

  SELECT STATUTID INTO E_STATUTID FROM VISITES WHERE VISITEID = E_VISITEID;

  IF E_STATUTID = 1 OR E_STATUTID = 8 THEN
      E_STATUTID := 16;
  END IF;

  IF E_STATUTID = 33 OR E_STATUTID = 34 THEN
     E_STATUTID := 35;
  END IF;

  UPDATE VISITES SET STATUTID = E_STATUTID, STATUTVISITE = 'AUTO-END', FINVISITE = (to_date(E_FINVISITE,'DD/MM/YYYY HH24:MI')), HFIN =(to_date(E_FINVISITE, 'DD/MM/YYYY HH24:MI')), DATEMAJ = CURRENT_TIMESTAMP WHERE VISITEID = E_VISITEID;
  COMMIT;
 END IF;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PURGE_DELETE
IS
BEGIN
  DELETE VISITES WHERE STATUTID IN (-2,-1) AND FINPREVU<=SYSDATE-400;
  COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE PURGE
(E_SITEID IN VARCHAR2,
 E_FINVISITE IN DATE)
IS
BEGIN
  UPDATE VISITES SET STATUTID=-2,STATUTVISITE='AUTO-DELETE',DATEMAJ=SYSDATE
  WHERE SITEID = E_SITEID AND STATUTID IN (2, 4, 32 ) AND FINPREVU<SYSDATE AND ORIGINEVISITE NOT IN (SELECT DISTINCT ORIGINEVISITE FROM VISITES WHERE (STATUTID=16 OR STATUTID=8) AND ORIGINEVISITE IS NOT NULL);
  COMMIT;

  UPDATE VISITES SET STATUTID=-1,STATUTVISITE='AUTO-DELETE',DATEMAJ=SYSDATE
  WHERE SITEID = E_SITEID AND STATUTID IN (2, 4, 32 ) AND FINPREVU<SYSDATE;
  COMMIT;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE DERN_ACTION_SITE
 (E_SITEID IN VARCHAR2)
IS
  TMP INT;
  E_STATUTID VARCHAR2(14);
BEGIN
  UPDATE SITE SET TLMQ_DERN_EXEC = CURRENT_TIMESTAMP WHERE SITEID = E_SITEID;
  COMMIT;
END;
/
COMMIT;

----------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE STRING_FNC
IS

TYPE T_ARRAY IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;

FUNCTION SPLIT (p_in_string VARCHAR2, p_delim VARCHAR2) RETURN T_ARRAY;
END;
/

CREATE OR REPLACE PACKAGE BODY STRING_FNC
IS

   FUNCTION SPLIT (p_in_string VARCHAR2, p_delim VARCHAR2) RETURN T_ARRAY
   IS
      i       number :=0;
      pos     number :=0;
      lv_str  varchar2(4000) := p_in_string;

   strings T_ARRAY;

   BEGIN
        pos := instr(lv_str,p_delim,1,1);
        WHILE ( pos != 0) LOOP
            i := i + 1;
            strings(i) := substr(lv_str,1,pos-1);
            lv_str := substr(lv_str,pos+1,length(lv_str));
            pos := instr(lv_str,p_delim,1,1);
            IF pos = 0 THEN
                strings(i+1) := lv_str;
            END IF;
        END LOOP;
        RETURN strings;
   END SPLIT;
END;
/
COMMIT;


CREATE OR REPLACE FUNCTION F_REGLE_LIMITE_DATE(DATE1 DATE,DATE2 DATE, FLAG NUMBER) RETURN DATE IS DATE_LIMIT DATE;
BEGIN
 IF FLAG=0 THEN
  IF DATE1<=DATE2 THEN
   DATE_LIMIT:=DATE1;
  ELSE
   DATE_LIMIT:=DATE2;
  END IF;
 ELSE
  IF DATE1<=DATE2 THEN
   DATE_LIMIT:=DATE2;
  ELSE
   DATE_LIMIT:=DATE1;
  END IF;
 END IF;
 RETURN DATE_LIMIT;
END ;
/
COMMIT;

CREATE OR REPLACE FUNCTION GET_STATUTVISITE(MYACTION NUMBER) RETURN VARCHAR2 IS LOCSTATUTVISITE VARCHAR2(50);
BEGIN
    LOCSTATUTVISITE:='';
    CASE
        WHEN MYACTION=-2 THEN LOCSTATUTVISITE:='WEB INTERDIT';
        WHEN MYACTION=-3 THEN LOCSTATUTVISITE:='WEB EN ATTENTE';
        WHEN MYACTION=-4 THEN LOCSTATUTVISITE:='WEB ACCOMPAGNER';
        WHEN MYACTION=-5 THEN LOCSTATUTVISITE:='WEB OK';
        ELSE LOCSTATUTVISITE:='WEB OK' ;
    END CASE;
    RETURN  LOCSTATUTVISITE;
END;
/

COMMIT;

CREATE OR REPLACE FUNCTION GET_ACTION(MYSTATUTVISITE VARCHAR2) RETURN VARCHAR2 IS LOCACTION INT;
BEGIN
    LOCACTION:=-5;
    CASE
        WHEN MYSTATUTVISITE='WEB INTERDIT' THEN LOCACTION:=-2 ;
        WHEN MYSTATUTVISITE='WEB EN ATTENTE' THEN LOCACTION:=-3 ;
        WHEN MYSTATUTVISITE='WEB ACCOMPAGNER' THEN LOCACTION:=-4;
        WHEN MYSTATUTVISITE='WEB OK' THEN LOCACTION:=-5 ;
        ELSE LOCACTION:=-5 ;
    END CASE;
    RETURN  LOCACTION;
END;
/

COMMIT;

CREATE OR REPLACE FUNCTION GET_LOCALISATIONBYVISITE(MYVISITEID VARCHAR2) RETURN VARCHAR2
    IS

    TMP VARCHAR2(4000);
    TMP2 VARCHAR2(4000);

BEGIN
     SELECT COALESCE(TMP||',','')||NVL(L.LIBELLE,'') INTO TMP FROM LOCALISATION L,VISITES_LOCALISATION VL WHERE VL.LOCALISATIONID=L.LOCALISATIONID AND VL.VISITEID=MYVISITEID;
    SELECT SUBSTR(TMP,2,LENGTH(TMP)) INTO TMP2 FROM DUAL;
    RETURN TMP2;
END;
/
COMMIT;

CREATE OR REPLACE FUNCTION GET_REGION_PAYS(MYVISITEID VARCHAR2) RETURN NUMBER IS UE_HORS_UE NUMBER;
    MYNATION VARCHAR2(35);
BEGIN
    SELECT LIBELLEUS INTO MYNATION FROM PAYS WHERE PAYSID IN (SELECT I.NATIONALITEID FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=MYVISITEID);
    SELECT TREF.VALEUR INTO UE_HORS_UE FROM TABLEREFERENCE TREF WHERE TREF.ID=102 AND TREF.TEXTE=MYNATION;
      RETURN  NVL(UE_HORS_UE,1);
END;
/
COMMIT;

CREATE OR REPLACE FUNCTION GET_VISITE_TRAVAIL(MYVISITEID VARCHAR2) RETURN VARCHAR2
IS
WK VARCHAR2(1);
BEGIN
    SELECT  CASE WHEN NVL(NATUREVISITE,'-2')='VISITE' THEN '0' ELSE '1' END  INTO WK FROM VISITES WHERE VISITEID=MYVISITEID ;
    RETURN WK ;
END;
/
COMMIT;


CREATE OR REPLACE FUNCTION DETECT_AW_VALIDE(MYVISITEID IN VARCHAR2) RETURN NUMBER IS C_OK NUMBER;
MYDEBUT DATE;
MYFIN DATE;
MYSOCID VARCHAR2(14);
MYINTERID VARCHAR2(14);
DATEDUJOUR DATE;
TMP NUMBER;
BEGIN
 SELECT DEBUTPREVU INTO MYDEBUT FROM VISITES V WHERE V.VISITEID=MYVISITEID;
 SELECT FINPREVU INTO MYFIN FROM VISITES V WHERE V.VISITEID=MYVISITEID;
 SELECT INTERLOCUTEURID INTO MYINTERID FROM VISITES V WHERE V.VISITEID=MYVISITEID;
 SELECT SOCIETEID INTO MYSOCID FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=(SELECT INTERLOCUTEURID FROM VISITES V WHERE V.VISITEID=MYVISITEID);
 C_OK:=1;
 DATEDUJOUR:=MYDEBUT;
 LOOP
  EXIT WHEN DATEDUJOUR>MYFIN OR C_OK=0;
SELECT COUNT(*) INTO TMP FROM (SELECT X.XANNEXEID FROM XANNEXE X WHERE X.XANNEXE_TYPEID=-1 AND X.ORIGINE='VISITES' AND X.ORIGINEID=MYVISITEID AND X.INFORMATION_TYPEID=-2  AND DATEDUJOUR<=X.DATEFIN AND DATEDUJOUR>=X.FREEDATE01 AND NVL(X.ETAT,1) = 1 AND X.REFID IN (SELECT XX.XANNEXEID FROM XANNEXE XX WHERE XX.ORIGINE='SOCIETE' AND XX.ORIGINEID=MYSOCID)
 UNION SELECT X.XANNEXEID FROM XANNEXE X WHERE X.XANNEXE_TYPEID=-1 AND  X.ORIGINE='VISITES' AND X.ORIGINEID=MYVISITEID AND X.INFORMATION_TYPEID=-2  AND DATEDUJOUR<=X.DATEFIN AND DATEDUJOUR>=X.FREEDATE01 AND NVL(X.ETAT,1) = 1 AND X.REFID IN (SELECT XX.XANNEXEID FROM XANNEXE XX WHERE XX.ORIGINE='INTERLOCUTEUR' AND XX.ORIGINEID=MYINTERID ) ) ;
  IF TMP =0 THEN
   C_OK:=0;
  END IF ;
  DATEDUJOUR:=DATEDUJOUR+1;
 END LOOP;
 RETURN C_OK;
END;
/

COMMIT;

CREATE OR REPLACE PROCEDURE PS_REGLE_SOUMETTRE_ENQUETE
    (MYREGLEID IN NUMBER,
    MYVISITEID VARCHAR2,
    MYFORCE INT)
IS
    MYDATECREA DATE;
    MYDATEDEBUT DATE;
     MYDELAI INT;
     TMPCOUNT INT;
     MYNATIONALITE VARCHAR2(14);
    REF_DELAI INT;
    ETAT_ENQUETE INT;
     MYSITEID VARCHAR2(14);
    MYINTERLOCUTEURID VARCHAR2(14);
    DATEFIN_FICHE  DATE;
    MYDEBUTPREVU  DATE;
    MYFINPREVU DATE;
    MYTYPEVISITE VARCHAR2(50);
    DATESAISIE DATE;
    CENTRE VARCHAR2(35);
    MYNATUREVISITE VARCHAR2(50);
    MYPOLE VARCHAR2(100);
    TMPID INT;

BEGIN

   -- INSERT INTO ALARME (ALARMEID,LIBELLE,DATEMAJ,DATECREATION) VALUES ('1','VISITE'||TO_CHAR(MYVISITEID),SYSDATE,SYSDATE);
   -- COMMIT;
    SELECT TRUNC(V.DEBUTPREVU) INTO MYDEBUTPREVU FROM VISITES V WHERE V.VISITEID=MYVISITEID;
    SELECT TRUNC(V.FINPREVU) INTO MYFINPREVU FROM VISITES V WHERE V.VISITEID=MYVISITEID;
    SELECT TYPEVISITE INTO MYTYPEVISITE FROM TYPEVISITE TV WHERE TV.TYPEVISITEID=(SELECT V.TYPEVISITEID FROM VISITES V WHERE V.VISITEID=MYVISITEID);
    SELECT TRUNC(V.DATEMAJ) INTO DATESAISIE FROM VISITES V WHERE V.VISITEID=MYVISITEID;
    SELECT S.NOM INTO MYPOLE FROM VISITES V,RESIDANTS R,SOCIETE S WHERE V.RESIDANTID=R.RESIDANTID AND R.SOCIETEID=S.SOCIETEID AND V.VISITEID=MYVISITEID;
    SELECT TRUNC(I.DATECREATION) INTO MYDATECREA  FROM INTERLOCUTEUR I, VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=MYVISITEID;
    SELECT INTERLOCUTEURID INTO MYINTERLOCUTEURID FROM VISITES WHERE VISITEID=MYVISITEID;
    SELECT SITEID  INTO MYSITEID FROM VISITES WHERE VISITEID=MYVISITEID;
    SELECT LIBELLE INTO CENTRE FROM SITE WHERE SITEID=MYSITEID;
    SELECT TRUNC(V.DEBUTPREVU) INTO MYDATEDEBUT FROM VISITES V WHERE V.VISITEID=MYVISITEID;
    SELECT TO_NUMBER(NVL(FREE2,'0')) INTO MYDELAI FROM REGLES WHERE REGLEID=MYREGLEID;
    SELECT TO_NUMBER(NVL(FREE3,'0')) INTO REF_DELAI FROM REGLES WHERE REGLEID=MYREGLEID;
    SELECT NATUREVISITE INTO MYNATUREVISITE FROM VISITES WHERE VISITEID=MYVISITEID;
    IF REF_DELAI=1 THEN
            SELECT FININTERDIT INTO DATEFIN_FICHE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=MYINTERLOCUTEURID;
     END IF ;
    SELECT COUNT(ENQUETE) INTO TMPCOUNT FROM VALIDATION_ENQUETE WHERE EXTERNALID=MYINTERLOCUTEURID AND EXTERN_TYPE='INTERLOCUTEUR'  AND TYPEVISITE=MYNATUREVISITE AND ENQUETE='0';
    IF TMPCOUNT>0 THEN
      DELETE FROM VALIDATION_ENQUETE WHERE  EXTERNALID=MYINTERLOCUTEURID AND EXTERN_TYPE='INTERLOCUTEUR' AND TYPEVISITE=MYNATUREVISITE AND ENQUETE='0';
      INSERT INTO VALIDATION_ENQUETE (SITEID,EXTERNALID,EXTERN_TYPE,CIVILITE,NOM,PRENOM,NOMJEUNEFILLE,DATENAISSANCE,LIEUNAISSANCE,PAYSNAISSANCE, NATIONALITE, ADRESSE,VILLE,CP,FONCTION,SOCIETE,DATECREATION,CENTRE,VISITEID,CODEACTIVITE,TYPEVISITE,DEBUTPREVU,FINPREVU,DATESAISIE,POLE) SELECT MYSITEID,MYINTERLOCUTEURID,'INTERLOCUTEUR',CIVILITE,NOM,PRENOM,NOMJEUNEFILLE,DATENAISSANCE,LIEUNAISSANCE,PAYS_NAISSANCE,PAYS,ADRESSE,VILLE,CODEPOSTAL,FONCTION,SOCIETE,SYSDATE,CENTRE,MYVISITEID,MYTYPEVISITE,MYNATUREVISITE,MYDEBUTPREVU,MYFINPREVU,DATESAISIE,MYPOLE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=MYINTERLOCUTEURID;
    END    IF;
    IF MYFORCE=0 THEN
        SELECT I.NATIONALITEID INTO MYNATIONALITE FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=MYVISITEID;
        SELECT COUNT(*) INTO TMPCOUNT FROM REGLES TREG, VISITES V WHERE V.VISITEID=MYVISITEID AND TREG.REGLEID=MYREGLEID
        AND (TREG.TYPEVISITE=-2 OR TREG.TYPEVISITE=(SELECT TYPEVISITEID FROM VISITES WHERE VISITEID=MYVISITEID))
        AND ( (TREG.FREE1=TO_CHAR(GET_REGION_PAYS(MYVISITEID) )AND MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=MYNATIONALITE)
        AND (NVL(TREG.NATUREVISITE,'-2')='-2' OR NVL(TREG.NATUREVISITE,'-2')=(SELECT CASE WHEN NVL(MYNATUREVISITE,'-2')='VISITE' THEN '0' ELSE '1' END FROM DUAL));
        IF TMPCOUNT>0 THEN
            SELECT COUNT(*) INTO TMPCOUNT FROM VALIDATION_ENQUETE WHERE EXTERNALID=MYINTERLOCUTEURID AND EXTERN_TYPE='INTERLOCUTEUR' AND TYPEVISITE=MYNATUREVISITE;
            IF TMPCOUNT=0 THEN -- SI PAS ENQUETE ALORS INSERER ENQUETE
                INSERT INTO VALIDATION_ENQUETE (SITEID,EXTERNALID,EXTERN_TYPE,CIVILITE,NOM,PRENOM,NOMJEUNEFILLE,DATENAISSANCE,LIEUNAISSANCE,PAYSNAISSANCE, NATIONALITE, ADRESSE,VILLE,CP,FONCTION,SOCIETE,DATECREATION,CENTRE,VISITEID,CODEACTIVITE,TYPEVISITE,DEBUTPREVU,FINPREVU,DATESAISIE,POLE) SELECT MYSITEID,MYINTERLOCUTEURID,'INTERLOCUTEUR',CIVILITE,NOM,PRENOM,NOMJEUNEFILLE,DATENAISSANCE,LIEUNAISSANCE,PAYS_NAISSANCE,PAYS,ADRESSE,VILLE,CODEPOSTAL,FONCTION,SOCIETE,CURRENT_TIMESTAMP,CENTRE,MYVISITEID,MYTYPEVISITE,MYNATUREVISITE,MYDEBUTPREVU,MYFINPREVU,DATESAISIE,MYPOLE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=MYINTERLOCUTEURID;
            ELSE
                SELECT COUNT(ENQUETE) INTO TMPCOUNT FROM VALIDATION_ENQUETE WHERE EXTERNALID=MYINTERLOCUTEURID AND EXTERN_TYPE='INTERLOCUTEUR'  AND TYPEVISITE=MYNATUREVISITE AND ((REF_DELAI=0 AND DATECREATION+MYDELAI<=CURRENT_TIMESTAMP) OR (REF_DELAI=1 AND DATEFIN_FICHE<=CURRENT_TIMESTAMP));
                IF TMPCOUNT>0 THEN
                     SELECT ENQUETE INTO TMPCOUNT FROM (SELECT ENQUETE  FROM VALIDATION_ENQUETE WHERE  EXTERNALID=MYINTERLOCUTEURID AND EXTERN_TYPE='INTERLOCUTEUR' AND TYPEVISITE=MYNATUREVISITE AND ((REF_DELAI=0 AND DATECREATION+ MYDELAI<=CURRENT_TIMESTAMP) OR (REF_DELAI=1 AND DATEFIN_FICHE<=CURRENT_TIMESTAMP)) ORDER BY DATECREATION DESC) WHERE ROWNUM=1 ;
                    IF TMPCOUNT >0 THEN     -- SI FIN VALIDITE ENQUETE
                        SELECT ENQUETE INTO ETAT_ENQUETE FROM (SELECT ENQUETE FROM VALIDATION_ENQUETE WHERE  EXTERNALID=MYINTERLOCUTEURID AND EXTERN_TYPE='INTERLOCUTEUR' AND TYPEVISITE=MYNATUREVISITE AND ((REF_DELAI=0 AND DATECREATION+ MYDELAI<=CURRENT_TIMESTAMP) OR (REF_DELAI=1 AND DATEFIN_FICHE<=CURRENT_TIMESTAMP)) ORDER BY DATECREATION DESC) WHERE ROWNUM=1;
                        IF ETAT_ENQUETE=1 OR ETAT_ENQUETE=0 THEN
                            DELETE FROM VALIDATION_ENQUETE WHERE  EXTERNALID=MYINTERLOCUTEURID AND EXTERN_TYPE='INTERLOCUTEUR' AND TYPEVISITE=MYNATUREVISITE AND ((REF_DELAI=0 AND DATECREATION+MYDELAI<=CURRENT_TIMESTAMP) OR (REF_DELAI=1 AND DATEFIN_FICHE<=CURRENT_TIMESTAMP));
                            INSERT INTO VALIDATION_ENQUETE (SITEID,EXTERNALID,EXTERN_TYPE,CIVILITE,NOM,PRENOM,NOMJEUNEFILLE,DATENAISSANCE,LIEUNAISSANCE,PAYSNAISSANCE, NATIONALITE, ADRESSE,VILLE,CP,FONCTION,SOCIETE,DATECREATION,CENTRE,VISITEID,CODEACTIVITE,TYPEVISITE,DEBUTPREVU,FINPREVU,DATESAISIE,POLE) SELECT MYSITEID,MYINTERLOCUTEURID,'INTERLOCUTEUR',CIVILITE,NOM,PRENOM,NOMJEUNEFILLE,DATENAISSANCE,LIEUNAISSANCE,PAYS_NAISSANCE,PAYS,ADRESSE,VILLE,CODEPOSTAL,FONCTION,SOCIETE,CURRENT_TIMESTAMP,CENTRE,MYVISITEID,MYTYPEVISITE,MYNATUREVISITE,MYDEBUTPREVU,MYFINPREVU,DATESAISIE,MYPOLE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=MYINTERLOCUTEURID;
                        END  IF;
                    END IF;
                ELSE -- SI MODIF AVANT DEPART ENQUETE
                    SELECT COUNT(ENQUETE) INTO TMPCOUNT FROM VALIDATION_ENQUETE WHERE EXTERNALID=MYINTERLOCUTEURID AND EXTERN_TYPE='INTERLOCUTEUR'  AND TYPEVISITE=MYNATUREVISITE AND ENQUETE='0';
                    IF TMPCOUNT >0 THEN
                        DELETE FROM VALIDATION_ENQUETE WHERE  EXTERNALID=MYINTERLOCUTEURID AND EXTERN_TYPE='INTERLOCUTEUR' AND TYPEVISITE=MYNATUREVISITE AND ENQUETE='0';
                        INSERT INTO VALIDATION_ENQUETE (SITEID,EXTERNALID,EXTERN_TYPE,CIVILITE,NOM,PRENOM,NOMJEUNEFILLE,DATENAISSANCE,LIEUNAISSANCE,PAYSNAISSANCE, NATIONALITE, ADRESSE,VILLE,CP,FONCTION,SOCIETE,DATECREATION,CENTRE,VISITEID,CODEACTIVITE,TYPEVISITE,DEBUTPREVU,FINPREVU,DATESAISIE,POLE) SELECT MYSITEID,MYINTERLOCUTEURID,'INTERLOCUTEUR',CIVILITE,NOM,PRENOM,NOMJEUNEFILLE,DATENAISSANCE,LIEUNAISSANCE,PAYS_NAISSANCE,PAYS,ADRESSE,VILLE,CODEPOSTAL,FONCTION,SOCIETE,CURRENT_TIMESTAMP,CENTRE,MYVISITEID,MYTYPEVISITE,MYNATUREVISITE,MYDEBUTPREVU,MYFINPREVU,DATESAISIE,MYPOLE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=MYINTERLOCUTEURID;
                    END IF;
                END IF;
            END IF;
        END IF;
    ELSE
        SELECT COUNT(EXTERNALID) INTO TMPCOUNT FROM VALIDATION_ENQUETE WHERE EXTERNALID=MYINTERLOCUTEURID AND EXTERN_TYPE='INTERLOCUTEUR'  AND TYPEVISITE=MYNATUREVISITE ;
        IF TMPCOUNT>0 THEN
            DELETE FROM VALIDATION_ENQUETE WHERE  EXTERNALID=MYINTERLOCUTEURID AND EXTERN_TYPE='INTERLOCUTEUR' AND TYPEVISITE=MYNATUREVISITE ;
            INSERT INTO VALIDATION_ENQUETE (SITEID,EXTERNALID,EXTERN_TYPE,CIVILITE,NOM,PRENOM,NOMJEUNEFILLE,DATENAISSANCE,LIEUNAISSANCE,PAYSNAISSANCE, NATIONALITE, ADRESSE,VILLE,CP,FONCTION,SOCIETE,DATECREATION,CENTRE,VISITEID,CODEACTIVITE,TYPEVISITE,DEBUTPREVU,FINPREVU,DATESAISIE,POLE) SELECT MYSITEID,MYINTERLOCUTEURID,'INTERLOCUTEUR',CIVILITE,NOM,PRENOM,NOMJEUNEFILLE,DATENAISSANCE,LIEUNAISSANCE,PAYS_NAISSANCE,PAYS,ADRESSE,VILLE,CODEPOSTAL,FONCTION,SOCIETE,SYSDATE,CENTRE,MYVISITEID,MYTYPEVISITE,MYNATUREVISITE,MYDEBUTPREVU,MYFINPREVU,DATESAISIE,MYPOLE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=MYINTERLOCUTEURID;
        END    IF;
    END IF;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_REGLES_EXEC_ACTIONS(MYREGLEID NUMBER,MYVISITEID VARCHAR2)
IS
 CURSOR EMP_ACT IS SELECT RA.REGLEID,RA.ACTIONID,RR.TYPEACTION FROM REGLE_ACTION RA,REGLES RR WHERE RA.REGLEID=MYREGLEID AND RA.ACTIONID=RR.REGLEID ;
 LC$ID REGLE_ACTION.REGLEID%Type ;
 RA$ID REGLE_ACTION.ACTIONID%Type ;
 TA$ID REGLES.TYPEACTION%Type ;
 MYINTERLOCUTEURID VARCHAR2(14);
BEGIN
 SELECT INTERLOCUTEURID INTO MYINTERLOCUTEURID FROM VISITES WHERE VISITEID=MYVISITEID;
 Open EMP_ACT ; -- ouverture du curseur
 Loop -- boucle sur les lignes
  Fetch EMP_ACT Into LC$ID,RA$ID,TA$ID; -- Lecture d'une ligne
  Exit When EMP_ACT%NOTFOUND ; -- sortie lorsque le curseur ne ramène plus de ligne
  CASE
  WHEN TA$ID=-23 THEN   -- INVALIDER DOCUMENT
    UPDATE XANNEXE SET DATERETOUR=NULL, ETAT=0 WHERE ORIGINE='INTERLOCUTEUR' AND ORIGINEID=MYINTERLOCUTEURID AND INFORMATION_TYPEID=(SELECT FREE1 FROM REGLES WHERE REGLEID=RA$ID) AND XANNEXE_TYPEID=-1;
    UPDATE XANNEXE SET DATERETOUR=NULL, ETAT=0 WHERE ORIGINE='VISITES' AND ORIGINEID=MYVISITEID AND INFORMATION_TYPEID=(SELECT FREE1 FROM REGLES WHERE REGLEID=RA$ID) AND XANNEXE_TYPEID=-1;
  WHEN TA$ID=-22 THEN
    UPDATE VISITES SET FINPREVU=F_REGLE_LIMITE_DATE(FINPREVU,DEBUTPREVU+(SELECT FREE1 FROM REGLES WHERE REGLEID=RA$ID)-1,0) WHERE VISITEID=MYVISITEID;
  WHEN TA$ID=-24 THEN
     PS_REGLE_SOUMETTRE_ENQUETE(RA$ID,MYVISITEID,0);
    WHEN TA$ID=-25 THEN
     PS_REGLE_SOUMETTRE_ENQUETE(RA$ID,MYVISITEID,1);
  END CASE;
 end Loop;
 Close EMP_ACT;
END;
/
COMMIT;




CREATE OR REPLACE PROCEDURE PS_REGLE_ZONE_ACCES
(MYVISITEID IN VARCHAR2,
 MYREGLEID IN NUMBER,
 MYACTION OUT NUMBER,
 MYMESSAGE OUT VARCHAR2,
 MYACTIONBLOQUANTE IN OUT NUMBER)
 IS
  TMPCOUNT NUMBER ;
BEGIN
    MYACTION:=0;
    MYMESSAGE:='';
    SELECT COUNT(REGLEID) INTO TMPCOUNT FROM REGLES TREG WHERE TREG.REGLEID=MYREGLEID  AND TREG.FREE1=(SELECT BATIMENTID FROM (SELECT  BATIMENTID FROM BATIMENT WHERE LIBELLE =(SELECT LIEU FROM VISITES WHERE VISITEID=MYVISITEID)) WHERE ROWNUM=0) ;
   IF TMPCOUNT>0 THEN
    PS_REGLES_EXEC_ACTIONS(MYREGLEID,MYVISITEID);
       SELECT MESSAGE INTO MYMESSAGE FROM REGLES WHERE REGLEID=MYREGLEID; -- MYMESSAGE:=LOCMESSAGE;
       SELECT TYPEACTION INTO MYACTION FROM REGLES WHERE REGLEID=MYREGLEID ;
       SELECT ACTIONBLOQUANTE INTO MYACTIONBLOQUANTE FROM REGLES WHERE REGLEID=MYREGLEID;
    END IF;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_REGLE_PRECAUTION_ACCES
 (MYVISITEID IN VARCHAR2,
 MYREGLEID IN NUMBER,
 MYACTION OUT NUMBER,
 MYMESSAGE OUT VARCHAR2,
 MYACTIONBLOQUANTE IN OUT NUMBER)
IS
 --LOCMESSAGE VARCHAR2(100);
 MYDELAI NUMBER;
 TMPCOUNT NUMBER ;
 MYNATIONALITE VARCHAR2(14);
 FLAG_EXCEPTION NUMBER;
 JOUR_EXCEPTION VARCHAR2(2);
 DUREE_EXCEPTION VARCHAR2(10);
 PREMIERE_VISITE NUMBER;
 DERNIERE_VISITE NUMBER;
 TRAITER NUMBER;
 TMPID NUMBER;
BEGIN
 MYACTION:=0;
 MYMESSAGE:='';
 SELECT PERIODE INTO JOUR_EXCEPTION FROM REGLES WHERE REGLEID=MYREGLEID;
 SELECT TO_CHAR((60*TO_CHAR(TO_DATE(DUREE,'YYYY/MM/DD HH24:MI:SS'),'HH24')+TO_CHAR(TO_DATE(DUREE,'YYYY/MM/DD HH24:MI:SS'),'MI'))/1440,'9.9999999') INTO DUREE_EXCEPTION FROM REGLES WHERE REGLEID=MYREGLEID;
 SELECT CASE
  WHEN (JOUR_EXCEPTION IS NULL AND DUREE_EXCEPTION IS NULL) OR  (JOUR_EXCEPTION IS NULL AND TO_NUMBER(DUREE_EXCEPTION)<1) THEN 1
  WHEN (JOUR_EXCEPTION='0') AND ((SELECT COUNT(B.FINVIS) FROM (
   SELECT DISTINCT TRUNC(FINVISITE) FINVIS
   FROM VISITES WHERE ORIGINEVISITE =( SELECT ORIGINEVISITE FROM VISITES WHERE VISITEID=MYVISITEID)
   AND STATUTID<>2 AND STATUTID>0
   UNION SELECT TRUNC(SYSDATE) AS FINVIS FROM DUAL
   ) B  )<2) THEN 1
  WHEN JOUR_EXCEPTION='-1' AND ((SELECT COUNT(*) FROM VISITES WHERE VISITEID=MYVISITEID AND FINPREVU=SYSDATE)>0)  THEN 1
  WHEN JOUR_EXCEPTION IS NULL AND DUREE_EXCEPTION IS NOT NULL AND ((SELECT COUNT(*) FROM VISITES WHERE VISITEID=MYVISITEID AND SYSDATE<=DATECREATION+TO_NUMBER(DUREE_EXCEPTION,'9.9999999'))>0)  THEN 1
 ELSE 0 END INTO TRAITER FROM DUAL;
 SELECT I.NATIONALITEID INTO MYNATIONALITE FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=MYVISITEID;
 SELECT COUNT(*) INTO TMPCOUNT  FROM REGLES TREG WHERE  TREG.REGLEID=MYREGLEID AND ( (TREG.FREE1=TO_CHAR(GET_REGION_PAYS(MYVISITEID)) AND MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=MYNATIONALITE)
 AND TRAITER=1 ;
 IF TMPCOUNT>0 THEN
   PS_REGLES_EXEC_ACTIONS(MYREGLEID,MYVISITEID);
   SELECT MESSAGE INTO MYMESSAGE FROM REGLES WHERE REGLEID=MYREGLEID; -- MYMESSAGE:=LOCMESSAGE;
   SELECT TYPEACTION INTO MYACTION FROM REGLES WHERE REGLEID=MYREGLEID ;
   SELECT ACTIONBLOQUANTE INTO MYACTIONBLOQUANTE FROM REGLES WHERE REGLEID=MYREGLEID;
 END IF;
END;
/
COMMIT;




CREATE OR REPLACE PROCEDURE PS_REGLE_MCOMPENSATOIRES
(MYVISITEID IN VARCHAR2,
MYREGLEID IN NUMBER,
MYACTION OUT NUMBER,
MYMESSAGE OUT VARCHAR2,
MYACTIONBLOQUANTE IN OUT NUMBER)
IS
MYNOMCHAMP VARCHAR2(100);
MYDUREEMAX NUMBER;
MYDEBUTPREVU DATE;
TMPCOUNT NUMBER;
MYSITEID VARCHAR2(14);
MYNATIONALITE VARCHAR2(14);
MYINTERLOCUTEURID VARCHAR2(14);
LISTE_CHAMPS_CTRL VARCHAR2(4000);
LISTE_CHAMPS STRING_FNC.T_ARRAY;
FLAG_CTRL STRING_FNC.T_ARRAY;
TMP_STR1 VARCHAR2(4000);
TMP_STR2 VARCHAR2(4000);
BEGIN
SELECT SITEID INTO MYSITEID FROM VISITES WHERE VISITEID=MYVISITEID ;
SELECT  UPPER(VALEUR)  INTO TMP_STR1 FROM (SELECT NVL(VALEUR,'') VALEUR,'1' AS A FROM PARAMETRAGE WHERE LIBELLE='FORM_VISITEUR' AND SITEID=MYSITEID UNION SELECT VALEUR,'2' AS A FROM PARAMETRAGE WHERE LIBELLE='FORM_VISITEUR' AND SITEID='ALL' ORDER BY A) WHERE ROWNUM=1 ;
LISTE_CHAMPS:=STRING_FNC.SPLIT(TMP_STR1,',');
SELECT  UPPER(VALEUR)  INTO TMP_STR2 FROM (SELECT NVL(VALEUR,'') VALEUR,'1' AS A FROM PARAMETRAGE WHERE LIBELLE='FORM_VISITEUR_CONTROLE' AND SITEID=MYSITEID UNION SELECT VALEUR,'2' AS A FROM PARAMETRAGE WHERE LIBELLE='FORM_VISITEUR_CONTROLE' AND SITEID='ALL' ORDER BY A) WHERE ROWNUM=1 ;
FLAG_CTRL:=STRING_FNC.SPLIT(TMP_STR2,',');
FOR   I IN 1..LISTE_CHAMPS.COUNT LOOP
    IF FLAG_CTRL(i) IS NOT NULL THEN
        IF FLAG_CTRL(i)='1' THEN
            IF LENGTH(LISTE_CHAMPS_CTRL)>0 THEN
                LISTE_CHAMPS_CTRL:=LISTE_CHAMPS_CTRL||''''||LISTE_CHAMPS(i)||''',';
            ELSE
                LISTE_CHAMPS_CTRL:=''''||LISTE_CHAMPS(i)||''',';
            END IF;
        END IF;
    END IF;
END LOOP;
IF LENGTH(LISTE_CHAMPS_CTRL)>0 THEN
LISTE_CHAMPS_CTRL:=SUBSTR(LISTE_CHAMPS_CTRL,1,LENGTH(LISTE_CHAMPS_CTRL)-1);
END IF;
MYACTION:=0;
MYMESSAGE:='';
  SELECT I.NATIONALITEID INTO MYNATIONALITE FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=MYVISITEID;
SELECT COUNT(*) INTO TMPCOUNT FROM REGLES TREG WHERE TREG.REGLEID=MYREGLEID  AND ( (TREG.FREE1=to_char(GET_REGION_PAYS(MYVISITEID)) AND MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=MYNATIONALITE);
IF TMPCOUNT>0 THEN
  SELECT INTERLOCUTEURID INTO MYINTERLOCUTEURID FROM VISITES WHERE VISITEID=MYVISITEID ;
  SELECT FREE3 INTO MYNOMCHAMP FROM REGLES WHERE REGLEID=MYREGLEID;
  SELECT FREE2 INTO MYDUREEMAX FROM REGLES WHERE REGLEID=MYREGLEID;
  SELECT trunc(V.DEBUTPREVU) INTO MYDEBUTPREVU FROM VISITES V WHERE V.VISITEID=MYVISITEID ;
  SELECT COUNT(*) INTO TMPCOUNT FROM(
   SELECT  VISITEID,SOCIETEVISIT,INTERLOCUTEURID,NOMPRENOMVISIT,HFIN,DEBUTPREVU,HDEBUT,DATEFINVISITE
   FROM (SELECT  VISITEID,SOCIETEVISIT,V.INTERLOCUTEURID,NOMPRENOMVISIT,HFIN,DEBUTPREVU,HDEBUT,NVL(V.FINVISITE,TRUNC(SYSDATE)) DATEFINVISITE
   FROM VISITES V,INTERLOCUTEUR I
   WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID
   AND V.INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=MYVISITEID) AND STATUTID IN (8,16) AND HFIN IS NOT NULL ORDER BY FINVISITE DESC)
   WHERE ROWNUM=1) A WHERE
   CASE
    WHEN
     (MYNOMCHAMP='0')  AND (MYDEBUTPREVU-(SELECT MAX(ACTION_DATE) FROM INTER_ACTION WHERE INTERLOCUTEURID=MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='CIVILITE' AND ACTION_DATE>A.DATEFINVISITE)<=MYDUREEMAX) THEN 1
    WHEN
     (MYNOMCHAMP='-1')  AND (MYDEBUTPREVU-(SELECT MAX(ACTION_DATE) FROM INTER_ACTION WHERE INTERLOCUTEURID=MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='NOM'  AND ACTION_DATE>A.DATEFINVISITE)<=MYDUREEMAX) THEN 1
    WHEN
     (MYNOMCHAMP='-2')  AND (MYDEBUTPREVU-(SELECT MAX(ACTION_DATE) FROM INTER_ACTION WHERE INTERLOCUTEURID=MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='PRENOM' AND ACTION_DATE>A.DATEFINVISITE)<=MYDUREEMAX)  THEN 1
    WHEN
     (MYNOMCHAMP='-3')  AND (MYDEBUTPREVU-(SELECT MAX(ACTION_DATE) FROM INTER_ACTION WHERE INTERLOCUTEURID=MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='NOMFILLE' AND ACTION_DATE>A.DATEFINVISITE) <=MYDUREEMAX)  THEN 1
    WHEN
     (MYNOMCHAMP='-4')  AND (MYDEBUTPREVU-(SELECT MAX(ACTION_DATE) FROM INTER_ACTION WHERE INTERLOCUTEURID=MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='DATE_NAISS' AND ACTION_DATE>A.DATEFINVISITE) <=MYDUREEMAX) THEN 1
    WHEN
     (MYNOMCHAMP='-5')  AND (MYDEBUTPREVU-(SELECT MAX(ACTION_DATE) FROM INTER_ACTION WHERE INTERLOCUTEURID=MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='LIEU_NAISS' AND ACTION_DATE>A.DATEFINVISITE)<=MYDUREEMAX) THEN 1
    WHEN
     (MYNOMCHAMP='-6')  AND (MYDEBUTPREVU-(SELECT MAX(ACTION_DATE) FROM INTER_ACTION WHERE INTERLOCUTEURID=MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='NATIONALITE' AND ACTION_DATE>A.DATEFINVISITE ) <=MYDUREEMAX)  THEN 1
    WHEN
     (MYNOMCHAMP='-7')  AND (MYDEBUTPREVU-(SELECT MAX(ACTION_DATE) FROM INTER_ACTION WHERE INTERLOCUTEURID=MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='FONCTION' AND ACTION_DATE>A.DATEFINVISITE) <=MYDUREEMAX)  THEN 1
    WHEN
     (MYNOMCHAMP='-8')  AND (MYDEBUTPREVU-(SELECT MAX(ACTION_DATE) FROM INTER_ACTION WHERE INTERLOCUTEURID=MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='SOCIETE' AND ACTION_DATE>A.DATEFINVISITE) <=MYDUREEMAX)  THEN 1
    WHEN
     (MYNOMCHAMP='-9')  AND (MYDEBUTPREVU-(SELECT MAX(ACTION_DATE) FROM INTER_ACTION WHERE INTERLOCUTEURID=MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='PAYS_NAISS' AND ACTION_DATE>A.DATEFINVISITE) <=MYDUREEMAX)  THEN 1
    WHEN
     (MYNOMCHAMP='-10')  AND (MYDEBUTPREVU-(SELECT MAX(ACTION_DATE) FROM INTER_ACTION WHERE INTERLOCUTEURID=MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='NATIONALITE_ORIGINE' AND ACTION_DATE>A.DATEFINVISITE) <=MYDUREEMAX)  THEN 1
    WHEN
     (MYNOMCHAMP='-11')  AND (MYDEBUTPREVU-(SELECT MAX(ACTION_DATE) FROM INTER_ACTION WHERE INTERLOCUTEURID=MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='PAYS_ADRESSE' AND ACTION_DATE>A.DATEFINVISITE) <=MYDUREEMAX) THEN 1

    WHEN(MYNOMCHAMP='-12')  AND (MYDEBUTPREVU-(SELECT MAX(ACTION_DATE) FROM INTER_ACTION WHERE INTERLOCUTEURID=MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='ADRESSE' AND ACTION_DATE>A.DATEFINVISITE) <=MYDUREEMAX)  THEN 1
    WHEN
     (MYNOMCHAMP='-13')  AND (MYDEBUTPREVU-(SELECT MAX(ACTION_DATE) FROM INTER_ACTION WHERE INTERLOCUTEURID=MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='CODEPOSTAL' AND ACTION_DATE>A.DATEFINVISITE) <=MYDUREEMAX)  THEN 1
    WHEN
     (MYNOMCHAMP='-14')  AND (MYDEBUTPREVU-(SELECT MAX(ACTION_DATE) FROM INTER_ACTION WHERE INTERLOCUTEURID=MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='VILLE' AND ACTION_DATE>A.DATEFINVISITE)<=MYDUREEMAX)  THEN 1
    WHEN
     (MYNOMCHAMP='-15')  AND (MYDEBUTPREVU-(SELECT MAX(ACTION_DATE) FROM INTER_ACTION WHERE INTERLOCUTEURID=MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='STATUT' AND ACTION_DATE>A.DATEFINVISITE) <=MYDUREEMAX ) THEN 1
    WHEN
     (MYNOMCHAMP='-16')  AND (MYDEBUTPREVU-(SELECT MAX(ACTION_DATE) FROM INTER_ACTION WHERE INTERLOCUTEURID=MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='TELEPHONE' AND ACTION_DATE>A.DATEFINVISITE) <=MYDUREEMAX)  THEN 1
    WHEN
     (MYNOMCHAMP='-17')  AND (MYDEBUTPREVU-(SELECT MAX(ACTION_DATE) FROM INTER_ACTION WHERE INTERLOCUTEURID=MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='MOBILE' AND ACTION_DATE>A.DATEFINVISITE) <=MYDUREEMAX) THEN 1
    WHEN
     (MYNOMCHAMP='-18')  AND (MYDEBUTPREVU-(SELECT MAX(ACTION_DATE) FROM INTER_ACTION WHERE INTERLOCUTEURID=MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND NOM_CHAMP='EMAIL' AND ACTION_DATE>A.DATEFINVISITE)<=MYDUREEMAX) THEN 1
    WHEN
     (MYNOMCHAMP='-19')  AND (MYDEBUTPREVU-(SELECT MAX(ACTION_DATE) FROM INTER_ACTION WHERE INTERLOCUTEURID=MYINTERLOCUTEURID AND ACTION_NATURE='S:MODIF' AND INSTR(LISTE_CHAMPS_CTRL,''''||NOM_CHAMP||'''')>0  AND ACTION_DATE>A.DATEFINVISITE) <=MYDUREEMAX) THEN 1
    ELSE 0 END =1;
  IF TMPCOUNT>0 THEN
   PS_REGLES_EXEC_ACTIONS(MYREGLEID,MYVISITEID);
   SELECT MESSAGE INTO MYMESSAGE FROM REGLES WHERE REGLEID=MYREGLEID;
   SELECT TYPEACTION INTO MYACTION FROM REGLES WHERE REGLEID=MYREGLEID ;
   SELECT ACTIONBLOQUANTE INTO MYACTIONBLOQUANTE FROM REGLES WHERE REGLEID=MYREGLEID;
  END IF;
END IF;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_REGLE_ENQUETE_DEMANDEE
    (MYVISITEID IN VARCHAR2,
    MYREGLEID IN NUMBER,
    MYACTION OUT NUMBER,
    MYMESSAGE OUT VARCHAR2,
    MYACTIONBLOQUANTE IN OUT NUMBER)
IS
    MYDATECREA DATE;
    MYDATEDEBUT DATE;
    LOCMESSAGE VARCHAR2(100);
    MYDELAI NUMBER;
    TMPCOUNT NUMBER;
    MYNATIONALITE VARCHAR2(14);
BEGIN
    MYACTION:=0;
    MYMESSAGE:='';
    SELECT trunc(I.DATECREATION) INTO MYDATECREA FROM INTERLOCUTEUR I, VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=MYVISITEID ;
    SELECT trunc(V.DEBUTPREVU)  INTO MYDATEDEBUT FROM VISITES V WHERE V.VISITEID=MYVISITEID ;
    SELECT to_number(FREE2) INTO MYDELAI FROM REGLES WHERE REGLEID=MYREGLEID;
    SELECT I.NATIONALITEID INTO MYNATIONALITE FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=MYVISITEID;
    SELECT REGLES.MESSAGE INTO LOCMESSAGE FROM REGLES WHERE REGLES.REGLEID=MYREGLEID;
    SELECT COUNT(*) INTO TMPCOUNT FROM REGLES TREG, VISITES V,TYPEVISITE TV WHERE V.VISITEID=MYVISITEID AND TREG.REGLEID=MYREGLEID  AND V.TYPEVISITEID=TV.TYPEVISITEID AND (TREG.TYPEVISITE=-2 OR TREG.TYPEVISITE=(SELECT VISITES.TYPEVISITEID FROM TYPEVISITE,VISITES WHERE VISITES.TYPEVISITEID=TYPEVISITE.TYPEVISITEID AND VISITES.VISITEID=MYVISITEID)) AND ( (TREG.FREE1=to_char(GET_REGION_PAYS(MYVISITEID)) AND MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=MYNATIONALITE) AND (MYDATEDEBUT-MYDATECREA)-MYDELAI<0;
    IF TMPCOUNT>0 THEN
           PS_REGLES_EXEC_ACTIONS(MYREGLEID,MYVISITEID);
        SELECT TYPEACTION INTO MYACTION FROM REGLES WHERE REGLES.REGLEID=MYREGLEID ;
        SELECT MESSAGE INTO MYMESSAGE FROM REGLES WHERE REGLES.REGLEID=MYREGLEID;
        SELECT ACTIONBLOQUANTE INTO MYACTIONBLOQUANTE FROM REGLES WHERE REGLES.REGLEID=MYREGLEID;
    END IF;
END;
/
COMMIT;
CREATE OR REPLACE PROCEDURE PS_REGLE_SAISIE_RESIDANTS
    (MYVISITEID IN VARCHAR2,
    MYREGLEID IN NUMBER,
    MYACTION OUT NUMBER,
    MYMESSAGE OUT VARCHAR2,
    MYACTIONBLOQUANTE IN OUT NUMBER)
IS
    MYNATUREID VARCHAR2(14);
    TMPCOUNT NUMBER;
    MYNATIONALITE VARCHAR2(14);
    STAT_SOC_RESID VARCHAR2(14);
BEGIN
    MYACTION:=0;
    MYMESSAGE:='';
    SELECT FREE3 INTO STAT_SOC_RESID FROM REGLES WHERE REGLEID=MYREGLEID;
    SELECT I.NATIONALITEID INTO MYNATIONALITE FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=MYVISITEID;
    SELECT S.NATUREID INTO MYNATUREID FROM SOCIETE S WHERE SOCIETEID IN (SELECT SOCIETEID FROM RESIDANTS WHERE RESIDANTID IN (SELECT RESIDANTID FROM VISITES WHERE VISITEID=MYVISITEID));
    SELECT COUNT(*) INTO TMPCOUNT  FROM REGLES TREG WHERE TREG.REGLEID=MYREGLEID AND ( (TREG.FREE1=to_char(GET_REGION_PAYS(MYVISITEID)) AND MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=MYNATIONALITE) AND (STAT_SOC_RESID='-2' OR STAT_SOC_RESID=MYNATUREID);
    IF TMPCOUNT>0 THEN
        PS_REGLES_EXEC_ACTIONS(MYREGLEID,MYVISITEID);
        SELECT MESSAGE INTO MYMESSAGE FROM REGLES WHERE REGLEID=MYREGLEID;
        SELECT TYPEACTION INTO MYACTION FROM REGLES WHERE REGLEID=MYREGLEID ;
        SELECT ACTIONBLOQUANTE INTO MYACTIONBLOQUANTE FROM REGLES WHERE REGLEID=MYREGLEID;
    END IF;
END;
/
COMMIT;


CREATE OR REPLACE PROCEDURE PS_REGLE_VALIDITE_DOCUMENTS
(MYVISITEID IN VARCHAR2,
 MYREGLEID IN NUMBER,
 MYACTION OUT NUMBER,
 MYMESSAGE OUT VARCHAR2,
 MYACTIONBLOQUANTE IN OUT NUMBER)
IS
 MYFINPREVU DATE;
 LOC_DATEFIN DATE;
 TMP NUMBER;
 MYTYPEDOCUMENT NUMBER;
 MYTYPEVISITEID NUMBER;
 LOC_TYPEVISITEID NUMBER;
 MYGRPSITEID VARCHAR(14);
BEGIN
 MYACTION:=0;
 MYMESSAGE:='';

 SELECT FREE1 INTO MYTYPEDOCUMENT FROM REGLES WHERE REGLEID=MYREGLEID;
 SELECT TRUNC(FINPREVU) INTO MYFINPREVU FROM VISITES WHERE VISITEID=MYVISITEID;
 SELECT COUNT(*) INTO TMP FROM XANNEXE X WHERE X.XANNEXE_TYPEID=-1 AND X.ORIGINE='VISITES' AND X.ORIGINEID=MYVISITEID AND X.INFORMATION_TYPEID=MYTYPEDOCUMENT ;

 SELECT TYPEVISITE INTO MYTYPEVISITEID FROM REGLES WHERE REGLEID=MYREGLEID;
 SELECT TYPEVISITEID INTO LOC_TYPEVISITEID FROM VISITES WHERE VISITEID=MYVISITEID;
 SELECT SITEID INTO MYGRPSITEID FROM REGLES WHERE REGLES.REGLEID=MYREGLEID;

 IF MYTYPEVISITEID=LOC_TYPEVISITEID OR MYTYPEVISITEID=-2 THEN
   SELECT COUNT(*) INTO TMP FROM XANNEXE X WHERE X.XANNEXE_TYPEID=-1 AND X.ORIGINE='VISITES' AND X.ORIGINEID=MYVISITEID AND X.INFORMATION_TYPEID=MYTYPEDOCUMENT ;
   IF TMP>0 THEN
        CASE
            WHEN MYTYPEDOCUMENT=-2 THEN
                IF DETECT_AW_VALIDE(MYVISITEID)=0 THEN
                    PS_REGLES_EXEC_ACTIONS(MYREGLEID,MYVISITEID);
                    SELECT MESSAGE INTO MYMESSAGE FROM REGLES WHERE REGLEID=MYREGLEID;
                    SELECT TYPEACTION INTO MYACTION FROM REGLES WHERE REGLEID=MYREGLEID ;
                    SELECT ACTIONBLOQUANTE INTO MYACTIONBLOQUANTE FROM REGLES WHERE REGLEID=MYREGLEID;
                END IF;
            ELSE
                SELECT COUNT(*) INTO TMP FROM XANNEXE X,TYPEDOCUMENT TD WHERE X.XANNEXE_TYPEID=-1 AND TD.TYPEDOCUMENTID=MYTYPEDOCUMENT AND X.INFORMATION_TYPEID=MYTYPEDOCUMENT AND X.ORIGINE='VISITES' AND X.ORIGINEID=MYVISITEID AND NVL(X.ETAT,1)=1 AND (TD.ISMULTISITE='1' OR (TD.ISMULTISITE='2' AND X.SITEID IN (SELECT SITEID FROM V_LISTE_GRPSITE WHERE GRPSITEID=MYGRPSITEID)));

                IF TMP>0 THEN
                    SELECT NVL(DATEFIN,'01/01/1900') INTO LOC_DATEFIN FROM XANNEXE X,TYPEDOCUMENT TD WHERE X.XANNEXE_TYPEID=-1 AND TD.TYPEDOCUMENTID=MYTYPEDOCUMENT AND X.INFORMATION_TYPEID=MYTYPEDOCUMENT AND X.ORIGINE='VISITES' AND X.ORIGINEID=MYVISITEID AND NVL(X.ETAT,1)=1 AND (TD.ISMULTISITE='1' OR (TD.ISMULTISITE='2' AND X.SITEID IN (SELECT SITEID FROM V_LISTE_GRPSITE WHERE GRPSITEID=MYGRPSITEID)));
                       IF LOC_DATEFIN IS NULL OR LOC_DATEFIN<MYFINPREVU THEN
                        PS_REGLES_EXEC_ACTIONS(MYREGLEID,MYVISITEID);
                        SELECT MESSAGE INTO MYMESSAGE FROM REGLES WHERE REGLEID=MYREGLEID;
                        SELECT TYPEACTION INTO MYACTION FROM REGLES WHERE REGLEID=MYREGLEID ;
                        SELECT ACTIONBLOQUANTE INTO MYACTIONBLOQUANTE FROM REGLES WHERE REGLEID=MYREGLEID;
                    END IF;
                ELSE
                    PS_REGLES_EXEC_ACTIONS(MYREGLEID,MYVISITEID);
                    SELECT MESSAGE INTO MYMESSAGE FROM REGLES WHERE REGLEID=MYREGLEID;
                    SELECT TYPEACTION INTO MYACTION FROM REGLES WHERE REGLEID=MYREGLEID ;
                    SELECT ACTIONBLOQUANTE INTO MYACTIONBLOQUANTE FROM REGLES WHERE REGLEID=MYREGLEID;
                END IF;
        END CASE;
   END IF;
 END IF;
END;
/

COMMIT;

CREATE OR REPLACE PROCEDURE PS_REGLE_TRANSPORT_ADR
    (MYVISITEID IN VARCHAR2,
    MYREGLEID IN NUMBER,
    MYACTION OUT NUMBER,
    MYMESSAGE OUT VARCHAR2,
    MYACTIONBLOQUANTE IN OUT NUMBER)
IS
    MYDELAI NUMBER;
    TMPCOUNT NUMBER;
    MYNATIONALITE VARCHAR2(14);
    MYCLASS_ADR NUMBER;
BEGIN
    MYACTION:=0;
    MYMESSAGE:='';
    SELECT FREE3 INTO MYCLASS_ADR FROM REGLES WHERE REGLEID=MYREGLEID;
    SELECT I.NATIONALITEID INTO MYNATIONALITE FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=MYVISITEID;
    SELECT COUNT(*) INTO TMPCOUNT  FROM REGLES TREG WHERE  TREG.REGLEID=MYREGLEID  AND ( (TREG.FREE1=to_char(GET_REGION_PAYS(MYVISITEID)) AND MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=MYNATIONALITE);
    IF TMPCOUNT>0 THEN
        SELECT COUNT(*) INTO TMPCOUNT FROM XANNEXE WHERE XANNEXE_TYPEID=-2 AND ORIGINE='VISITES' AND ORIGINEID=MYVISITEID AND (INFORMATION_TYPEID=MYCLASS_ADR OR MYCLASS_ADR=-2);
        IF TMPCOUNT>0 THEN
            PS_REGLES_EXEC_ACTIONS(MYREGLEID,MYVISITEID);
              SELECT MESSAGE INTO MYMESSAGE FROM REGLES WHERE REGLEID=MYREGLEID;
            SELECT TYPEACTION INTO MYACTION FROM REGLES WHERE REGLEID=MYREGLEID ;
            SELECT ACTIONBLOQUANTE INTO MYACTIONBLOQUANTE FROM REGLES WHERE REGLEID=MYREGLEID;
        END IF;
    END IF;
 END;
/
COMMIT;




CREATE OR REPLACE FUNCTION REGLE_CALCUL_CUMUL(MODE_COMPTAGE VARCHAR2, PERIODE_GLISSANTE VARCHAR2, NBR_MAX NUMBER, DUREE_PERIODE NUMBER, MYVISITEID VARCHAR2) RETURN NUMBER IS JOURS NUMBER;
BEGIN
    IF MODE_COMPTAGE='0' THEN
        SELECT TO_NUMBER(SUM(TOTAL)) INTO JOURS FROM ( SELECT SUM(ABS(FINPREVU-F_REGLE_LIMITE_DATE(DEBUTPREVU+1,TRUNC(SYSDATE),1))) TOTAL FROM VISITES WHERE INTERLOCUTEURID=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=MYVISITEID) AND STATUTID=2 AND FINPREVU>=TRUNC(SYSDATE) AND DATECREATION<=(SELECT DATECREATION FROM VISITES WHERE VISITEID=MYVISITEID)
        AND
            (
                (PERIODE_GLISSANTE='1' AND TO_CHAR(SYSDATE,'YYYY')=TO_CHAR(DEBUTPREVU,'YYYY') )
              OR
                (PERIODE_GLISSANTE='2' AND TRUNC(SYSDATE)-TRUNC(DEBUTPREVU)<=DUREE_PERIODE)
             OR
                (PERIODE_GLISSANTE='0' )

        ) AND SITEID=(SELECT SITEID FROM VISITES WHERE VISITEID=MYVISITEID)
        AND STATUTID='2'
        UNION SELECT COUNT(*) TOTAL FROM ( SELECT TRUNC(FINVISITE) FROM VISITES WHERE INTERLOCUTEURID=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=MYVISITEID) AND STATUTID=16 AND SITEID=(SELECT SITEID FROM VISITES WHERE VISITEID=MYVISITEID) AND
        (
                (PERIODE_GLISSANTE='1' AND TO_CHAR(SYSDATE,'YYYY')=TO_CHAR(DEBUTVISITE,'YYYY') )
              OR
                (PERIODE_GLISSANTE='2' AND TRUNC(SYSDATE)-TRUNC(DEBUTVISITE)<=DUREE_PERIODE)
             OR
                (PERIODE_GLISSANTE='0' )

        )

        GROUP BY TRUNC(FINVISITE)));
    ELSE
        SELECT TO_NUMBER(SUM(TOTAL)) INTO JOURS FROM ( SELECT COUNT(VISITEID) TOTAL  FROM VISITES WHERE INTERLOCUTEURID=(SELECT INTERLOCUTEURID FROM VISITES WHERE VISITEID=MYVISITEID)
        AND STATUTID=16
        AND SITEID=(SELECT SITEID FROM VISITES WHERE VISITEID=MYVISITEID)
        AND
        (
                (PERIODE_GLISSANTE='1' AND TO_CHAR(SYSDATE,'YYYY')=TO_CHAR(DEBUTVISITE,'YYYY') )
              OR
                (PERIODE_GLISSANTE='2' AND TRUNC(SYSDATE)-TRUNC(DEBUTVISITE)<=DUREE_PERIODE)
             OR
                (PERIODE_GLISSANTE='0' )
        )
        );
    END IF;
    RETURN JOURS;
END;
/
COMMIT;



CREATE OR REPLACE PROCEDURE PS_REGLE_ZRR(
    MYVISITEID IN VARCHAR2,
    MYREGLEID IN NUMBER,
    MYACTION OUT NUMBER,
    MYMESSAGE OUT VARCHAR2,
    MYACTIONBLOQUANTE IN OUT NUMBER)
IS
MYNATIONALITE VARCHAR2(14);
MYZRR_LS VARCHAR2(1);
MYZRR_CODE VARCHAR2(25);
MYZRR_LIB VARCHAR2(255);
TMPCOUNT INT;
BEGIN
    MYACTION:=0;
    MYMESSAGE:='';
    SELECT ZRR_CODE INTO MYZRR_CODE FROM VISITES WHERE VISITEID=MYVISITEID;
    SELECT ZRR_LIB INTO MYZRR_LIB FROM VISITES WHERE VISITEID=MYVISITEID;
    SELECT ZRR_LS INTO MYZRR_LS FROM VISITES WHERE VISITEID=MYVISITEID;
    SELECT I.NATIONALITEID INTO MYNATIONALITE FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=MYVISITEID;
    SELECT COUNT(REGLEID) INTO TMPCOUNT FROM REGLES TREG WHERE TREG.REGLEID=MYREGLEID  AND ( (TREG.FREE1=TO_CHAR(GET_REGION_PAYS(MYVISITEID)) AND MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=MYNATIONALITE)
    AND (
            ( FREE2='-2' AND MYZRR_LIB IS NOT NULL)
            OR
            ( FREE2='-3' AND MYZRR_LIB IS NOT NULL AND MYZRR_LS='O')
            OR
            ( FREE2='-4' AND MYZRR_LIB IS NOT NULL AND MYZRR_LS='N')

        );
    IF TMPCOUNT>0 THEN
        PS_REGLES_EXEC_ACTIONS(MYREGLEID,MYVISITEID);
        SELECT MESSAGE INTO MYMESSAGE FROM REGLES WHERE REGLEID=MYREGLEID;
        SELECT TYPEACTION INTO MYACTION FROM REGLES WHERE REGLEID=MYREGLEID ;
        SELECT ACTIONBLOQUANTE INTO MYACTIONBLOQUANTE FROM REGLES WHERE REGLEID=MYREGLEID;
    END IF;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_REGLE_MINEUR(
MYVISITEID IN VARCHAR2,
    MYREGLEID IN NUMBER,
    MYACTION OUT NUMBER,
    MYMESSAGE OUT VARCHAR2,
    MYACTIONBLOQUANTE IN OUT NUMBER)
IS
MYNATIONALITE VARCHAR2(14);
TRAITER INT;
MYDATENAISSANCE DATE;
TMPCOUNT NUMBER;
BEGIN
    MYACTION:=0;
    MYMESSAGE:='';
    SELECT DATENAISSANCE INTO MYDATENAISSANCE FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=MYVISITEID ;
    SELECT I.NATIONALITEID INTO MYNATIONALITE FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=MYVISITEID ;
    SELECT COUNT(REGLEID) INTO TMPCOUNT FROM REGLES TREG WHERE TREG.REGLEID=MYREGLEID  AND ( (SYSDATE - MYDATENAISSANCE) / 365.242199 )<18 AND
    ((TREG.FREE1=TO_CHAR(GET_REGION_PAYS(MYVISITEID)) AND MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=MYNATIONALITE);
    IF TMPCOUNT>0 THEN
        PS_REGLES_EXEC_ACTIONS(MYREGLEID,MYVISITEID);
        SELECT MESSAGE INTO MYMESSAGE FROM REGLES WHERE REGLEID=MYREGLEID;
        SELECT TYPEACTION INTO MYACTION FROM REGLES WHERE REGLEID=MYREGLEID ;
        SELECT ACTIONBLOQUANTE INTO MYACTIONBLOQUANTE FROM REGLES WHERE REGLEID=MYREGLEID;
    END IF;
END;
/
COMMIT;


CREATE OR REPLACE PROCEDURE PS_REGLE_CPPA
 (MYVISITEID IN VARCHAR2,
 MYREGLEID IN NUMBER,
 MYACTION OUT NUMBER,
 MYMESSAGE OUT VARCHAR2,
 MYACTIONBLOQUANTE IN OUT NUMBER)
IS
 --LOCMESSAGE VARCHAR2(100);
    MYPOLEID VARCHAR2(14);
    MYNATIONALITEID VARCHAR2(14);
    MYSITEID VARCHAR2(14);
    MYCODEACTIVITEID VARCHAR2(14);
    TMPCOUNT NUMBER;
BEGIN
    MYACTION:=0;
    MYMESSAGE:='';
    SELECT R.SOCIETEID INTO MYPOLEID FROM RESIDANTS R,VISITES V WHERE R.RESIDANTID=V.RESIDANTID AND V.VISITEID=MYVISITEID;
    SELECT I.NATIONALITEID INTO MYNATIONALITEID FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=MYVISITEID ;
    SELECT V.SITEID INTO MYSITEID FROM VISITES V WHERE V.VISITEID=MYVISITEID;
    SELECT V.TYPEVISITEID INTO MYCODEACTIVITEID FROM VISITES V WHERE V.VISITEID=MYVISITEID;
    SELECT COUNT(*) INTO TMPCOUNT FROM ZCL15_CPPA WHERE REGLEID=MYREGLEID AND SOCIETEID=MYPOLEID AND PAYSID=MYNATIONALITEID AND TYPEVISITEID=MYCODEACTIVITEID AND SITEID IN (SELECT GRPSITEID FROM V_LISTE_GRPSITE WHERE SITEID=MYSITEID );
    IF TMPCOUNT>0 THEN
        PS_REGLES_EXEC_ACTIONS(MYREGLEID,MYVISITEID);
        SELECT MESSAGE INTO MYMESSAGE FROM REGLES WHERE REGLEID=MYREGLEID; -- MYMESSAGE:=LOCMESSAGE;
        SELECT TYPEACTION INTO MYACTION FROM REGLES WHERE REGLEID=MYREGLEID ;
        SELECT ACTIONBLOQUANTE INTO MYACTIONBLOQUANTE FROM REGLES WHERE REGLEID=MYREGLEID;
    END IF;
END;
/
COMMIT;



 CREATE OR REPLACE PROCEDURE PS_REGLE_CUMUL_VISITES
 (MYVISITEID IN VARCHAR2,
 MYREGLEID IN NUMBER,
 MYACTION OUT NUMBER,
 MYMESSAGE OUT VARCHAR2,
 MYACTIONBLOQUANTE IN OUT NUMBER)
IS
 TMPCOUNT NUMBER;
 MYNATIONALITE VARCHAR2(14);
 NBR_MAX NUMBER;
 ANNEE_GLISSANTE VARCHAR2(2);
 JOURS NUMBER;
 DUREE_PERIODE NUMBER;
 MODE_COMPTAGE VARCHAR2(1);
 TMPINT VARCHAR2(20);
BEGIN
 MYMESSAGE:='';
 MYACTION:=0;
 SELECT TO_NUMBER(FREE2) INTO NBR_MAX FROM REGLES WHERE REGLEID=MYREGLEID;
 SELECT FREE4 INTO ANNEE_GLISSANTE FROM REGLES WHERE REGLEID=MYREGLEID;
 SELECT FREE5 INTO MODE_COMPTAGE FROM REGLES WHERE REGLEID=MYREGLEID;
 SELECT FREE3 INTO DUREE_PERIODE FROM REGLES WHERE REGLEID=MYREGLEID;
 JOURS:=REGLE_CALCUL_CUMUL(MODE_COMPTAGE,ANNEE_GLISSANTE,NBR_MAX,DUREE_PERIODE,MYVISITEID);
 UPDATE VISITES SET FREE7=JOURS WHERE VISITEID=MYVISITEID ;
 SELECT I.NATIONALITEID INTO MYNATIONALITE FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=MYVISITEID;
 SELECT COUNT(*) INTO TMPCOUNT  FROM REGLES TREG WHERE TREG.REGLEID=MYREGLEID  AND ( (TREG.FREE1=to_char(GET_REGION_PAYS(MYVISITEID)) AND MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=MYNATIONALITE) ;
 IF TMPCOUNT>0 AND NBR_MAX<JOURS THEN
  PS_REGLES_EXEC_ACTIONS(MYREGLEID,MYVISITEID);
  SELECT MESSAGE INTO MYMESSAGE FROM REGLES WHERE REGLEID=MYREGLEID;
  TMPINT:=TO_CHAR(ABS(NBR_MAX-JOURS));
  MYMESSAGE:=SUBSTR(MYMESSAGE||'('||TMPINT||' Jours)',0,4000);
  SELECT TYPEACTION INTO MYACTION FROM REGLES WHERE REGLEID=MYREGLEID ;
  SELECT ACTIONBLOQUANTE INTO MYACTIONBLOQUANTE FROM REGLES WHERE REGLEID=MYREGLEID;
 END IF;
END;
/

COMMIT;

CREATE OR REPLACE PROCEDURE PS_REGLE_DELAI_ANTICIPATION
(MYVISITEID IN VARCHAR2,
 MYREGLEID IN NUMBER,
 MYACTION OUT NUMBER,
 MYMESSAGE OUT VARCHAR2,
 MYACTIONBLOQUANTE IN OUT NUMBER)
IS
MYDATECREA DATE;
MYDATEDEBUT DATE;
MYDELAI NUMBER;
TMPCOUNT NUMBER;
MYNATIONALITE VARCHAR2(14);
BEGIN
 MYACTION:=0;
 MYMESSAGE:='';
 SELECT trunc(V.DATECREATION) INTO MYDATECREA FROM VISITES V WHERE V.VISITEID=MYVISITEID ;
 SELECT trunc(V.DEBUTPREVU)  INTO MYDATEDEBUT FROM VISITES V WHERE V.VISITEID=MYVISITEID ;
 SELECT TO_NUMBER(FREE2) INTO MYDELAI FROM REGLES WHERE REGLEID=MYREGLEID;
 SELECT I.NATIONALITEID INTO MYNATIONALITE FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=MYVISITEID;
 SELECT COUNT(*) INTO TMPCOUNT FROM REGLES TREG WHERE TREG.REGLEID=MYREGLEID  AND ( (TREG.FREE1=to_char(GET_REGION_PAYS(MYVISITEID)) AND MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=MYNATIONALITE) AND (MYDATEDEBUT-MYDATECREA)-MYDELAI<0;
 IF TMPCOUNT>0 THEN
    PS_REGLES_EXEC_ACTIONS(MYREGLEID,MYVISITEID);
    SELECT MESSAGE INTO MYMESSAGE FROM REGLES WHERE REGLEID=MYREGLEID;
    SELECT TYPEACTION INTO MYACTION FROM REGLES WHERE REGLEID=MYREGLEID ;
    SELECT ACTIONBLOQUANTE INTO MYACTIONBLOQUANTE FROM REGLES WHERE REGLEID=MYREGLEID;
 END IF;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_REGLE_INTERDITS
    (MYVISITEID IN VARCHAR2,
    MYREGLEID IN NUMBER,
    MYACTION OUT NUMBER,
    MYMESSAGE OUT VARCHAR2,
    MYACTIONBLOQUANTE IN OUT NUMBER)
IS
    TMPCOUNT NUMBER;
    MYINTERLOCUTEURID VARCHAR2(14);
    MYNATUREID VARCHAR2(14);
    MYINTER NUMBER;
    MYNATION NUMBER;
    MYSTATUT NUMBER;
    MYSOC NUMBER;
    VISINT INT ;
    STATINT INT;
    NATIONINT INT;
    SOCINT INT ;
BEGIN
    VISINT :=0 ;
    STATINT:=0;
    NATIONINT:=0;
    SOCINT:=0 ;
    MYACTION:=0;
    MYMESSAGE:='';
    SELECT INTERLOCUTEURID INTO MYINTERLOCUTEURID FROM VISITES V WHERE V.VISITEID=MYVISITEID;
    MYNATUREID:=IsVisiteurInterdit(MYINTERLOCUTEURID,SYSDATE);
    SELECT FREE1 INTO MYINTER FROM REGLES WHERE REGLEID=MYREGLEID  ;
    SELECT FREE2 INTO MYSTATUT FROM REGLES WHERE REGLEID=MYREGLEID  ;
    SELECT FREE3 INTO MYNATION FROM REGLES WHERE REGLEID=MYREGLEID  ;
    SELECT FREE4 INTO MYSOC FROM REGLES  WHERE REGLEID=MYREGLEID  ;
    IF MYINTER=1 THEN
        IF MYNATUREID=-1 THEN
            VISINT:=1;
        END IF;
    END IF;
    IF MYSTATUT=1 THEN
        IF MYNATUREID=-2 THEN
            STATINT:=1;
        END IF;
    END IF;
    IF MYNATION=1 THEN
        IF MYNATUREID=-3 THEN
            NATIONINT:=1;
        END IF;
    END IF;
    IF MYSOC=1 THEN
        IF MYNATUREID=-4 THEN
            SOCINT:=1;
        END IF;
    END IF;

    IF (VISINT=1 OR STATINT=1 OR NATIONINT=1 OR SOCINT=1) THEN
        PS_REGLES_EXEC_ACTIONS(MYREGLEID,MYVISITEID);
        SELECT MESSAGE INTO MYMESSAGE FROM REGLES WHERE REGLEID=MYREGLEID;
        SELECT TYPEACTION INTO MYACTION FROM REGLES WHERE REGLEID=MYREGLEID ;
        SELECT ACTIONBLOQUANTE INTO MYACTIONBLOQUANTE FROM REGLES WHERE REGLEID=MYREGLEID;
    END IF;
END;
/


COMMIT;

CREATE OR REPLACE PROCEDURE PS_REGLE_RESTREINTS
    (MYVISITEID IN VARCHAR2,
    MYREGLEID IN NUMBER,
    MYACTION OUT NUMBER,
    MYMESSAGE OUT VARCHAR2,
    MYACTIONBLOQUANTE IN OUT NUMBER)
IS
    TMPCOUNT NUMBER;
    MYINTERLOCUTEURID VARCHAR2(14);
    MYNATUREID VARCHAR2(14);
    MYINTER NUMBER;
    MYNATION NUMBER;
    MYSTATUT NUMBER;
    MYSOC NUMBER;
    VISREST INT ;
    STATREST INT;
    NATIONREST INT;
    SOCREST INT ;
BEGIN
    VISREST :=0 ;
    STATREST:=0;
    NATIONREST:=0;
    SOCREST:=0 ;
    MYACTION:=0;
    MYMESSAGE:='';
    SELECT INTERLOCUTEURID INTO MYINTERLOCUTEURID FROM VISITES V WHERE V.VISITEID=MYVISITEID;
    MYNATUREID:=IsVisiteurRestreint(MYINTERLOCUTEURID);
    SELECT FREE1 INTO MYINTER FROM REGLES WHERE REGLEID=MYREGLEID  ;
    SELECT FREE2 INTO MYSTATUT FROM REGLES WHERE REGLEID=MYREGLEID  ;
    SELECT FREE3 INTO MYNATION FROM REGLES WHERE REGLEID=MYREGLEID  ;
    SELECT FREE4 INTO MYSOC FROM REGLES  WHERE REGLEID=MYREGLEID  ;
    IF MYINTER=1 THEN
        IF MYNATUREID=-1 THEN
            VISREST:=1;
        END IF;
    END IF;
    IF MYSTATUT=1 THEN
        IF MYNATUREID=-2 THEN
            STATREST:=1;
        END IF;
    END IF;
    IF MYNATION=1 THEN
        IF MYNATUREID=-3 THEN
            NATIONREST:=1;
        END IF;
    END IF;
    IF MYSOC=1 THEN
        IF MYNATUREID=-4 THEN
            SOCREST:=1;
        END IF;
    END IF;

    IF (VISREST=1 OR STATREST=1 OR NATIONREST=1 OR SOCREST=1) THEN
        PS_REGLES_EXEC_ACTIONS(MYREGLEID,MYVISITEID);
        SELECT MESSAGE INTO MYMESSAGE FROM REGLES WHERE REGLEID=MYREGLEID;
        SELECT TYPEACTION INTO MYACTION FROM REGLES WHERE REGLEID=MYREGLEID ;
        SELECT ACTIONBLOQUANTE INTO MYACTIONBLOQUANTE FROM REGLES WHERE REGLEID=MYREGLEID;
    END IF;
END;
/

COMMIT;

CREATE OR REPLACE PROCEDURE PS_REGLE_RESULTAT(
 MYVISITEID IN VARCHAR2,
 MYACTION OUT NUMBER,
 MYMESSAGE IN OUT VARCHAR2,
 MYMESSAGETORESID IN OUT VARCHAR2,
 MYMESSAGETOACC IN OUT VARCHAR2,
 MYCATEGORIE  IN OUT VARCHAR2)
IS
RES_FINAL NUMBER;
MYCAT VARCHAR2(30);
CURSOR EMP_RES IS SELECT REGLEID,ACTIONBLOQUANTE,ARBITRAGE,MES_RESI,MES_VALI,MES_ACC,NVL(CATEGORIE,'') FROM VISITE_REGLE WHERE VISITEID=MYVISITEID AND ARBITRAGE<>0 ORDER BY RANGREGLE ASC;
 REG$ID VISITE_REGLE.REGLEID%Type ;
 ACT$BL VISITE_REGLE.ACTIONBLOQUANTE%Type ;
 ARB$I VISITE_REGLE.ARBITRAGE%Type;
 MES$RES VISITE_REGLE.MES_RESI%Type;
 MES$VALI VISITE_REGLE.MES_VALI%Type;
 MES$ACC VISITE_REGLE.MES_ACC%Type;
 ACT$EG VISITE_REGLE.CATEGORIE%Type;
BEGIN
    MYMESSAGE:='';
    MYMESSAGETORESID:='';
    MYMESSAGETOACC:='';
    MYACTION:=-5; -- PAR DEFAUT, AUTORISER LA VISITE
    Open EMP_RES ; -- ouverture du curseur
    Loop -- boucle sur les lignes
        Fetch EMP_RES Into REG$ID, ACT$BL, ARB$I, MES$RES,MES$VALI,MES$ACC,ACT$EG ;
        Exit When EMP_RES%NOTFOUND ; -- sortie lorsque le curseur ne ramène plus de ligne
		IF INSTR(MYCATEGORIE,ACT$EG)=0 THEN
			MYCATEGORIE:=MYCATEGORIE||ACT$EG;
		END IF;
        IF MYACTION<ARB$I AND ARB$I<>-1 THEN
            MYACTION:=ARB$I ;
        END IF;
        IF LENGTH(MES$VALI)>0 THEN
            IF LENGTH(MYMESSAGE)>0 THEN
                MYMESSAGE:=MYMESSAGE||'|'||MES$VALI;
            ELSE
                MYMESSAGE:=MES$VALI;
            END IF;
        END IF;
        IF LENGTH(MES$RES)>0 THEN
            IF LENGTH(MYMESSAGETORESID)>0 THEN
                MYMESSAGETORESID:=MYMESSAGETORESID||'|'||MES$RES;
            ELSE
                MYMESSAGETORESID:=MES$RES;
            END IF;
        END IF;
        IF LENGTH(MES$ACC)>0 THEN
            IF LENGTH(MYMESSAGETOACC)>0 THEN
                MYMESSAGETOACC:=MYMESSAGETOACC||'|'||MES$ACC;
            ELSE
                MYMESSAGETOACC:=MES$ACC;
            END IF;
        END IF;
        IF ACT$BL<>0 THEN
            EXIT;
        END IF;
    End Loop;
    Close EMP_RES;
END;
/




CREATE OR REPLACE PROCEDURE PS_REGLE_ZRR(
    MYVISITEID IN VARCHAR2,
    MYREGLEID IN NUMBER,
    MYACTION OUT NUMBER,
    MYMESSAGE OUT VARCHAR2,
    MYACTIONBLOQUANTE IN OUT NUMBER)
IS
MYNATIONALITE VARCHAR2(14);
MYZRR_LS VARCHAR2(1);
MYZRR_CODE VARCHAR2(25);
MYZRR_LIB VARCHAR2(255);
TMPCOUNT INT;
BEGIN
    MYACTION:=0;
    MYMESSAGE:='';
    SELECT ZRR_CODE INTO MYZRR_CODE FROM VISITES WHERE VISITEID=MYVISITEID;
    SELECT ZRR_LIB INTO MYZRR_LIB FROM VISITES WHERE VISITEID=MYVISITEID;
    SELECT ZRR_LS INTO MYZRR_LS FROM VISITES WHERE VISITEID=MYVISITEID;
    SELECT I.NATIONALITEID INTO MYNATIONALITE FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=MYVISITEID;
    SELECT COUNT(REGLEID) INTO TMPCOUNT FROM REGLES TREG WHERE TREG.REGLEID=MYREGLEID  AND ( (TREG.FREE1=TO_CHAR(GET_REGION_PAYS(MYVISITEID)) AND MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=MYNATIONALITE)
    AND (
            ( FREE2='-2' AND MYZRR_LIB IS NOT NULL)
            OR
            ( FREE2='-3' AND MYZRR_LIB IS NOT NULL AND MYZRR_LS='O')
            OR
            ( FREE2='-4' AND MYZRR_LIB IS NOT NULL AND MYZRR_LS='N')

        );
    IF TMPCOUNT>0 THEN
        PS_REGLES_EXEC_ACTIONS(MYREGLEID,MYVISITEID);
        SELECT MESSAGE INTO MYMESSAGE FROM REGLES WHERE REGLEID=MYREGLEID;
        SELECT TYPEACTION INTO MYACTION FROM REGLES WHERE REGLEID=MYREGLEID ;
        SELECT ACTIONBLOQUANTE INTO MYACTIONBLOQUANTE FROM REGLES WHERE REGLEID=MYREGLEID;
    END IF;
END;
/
COMMIT;

 CREATE OR REPLACE PROCEDURE PS_REGLE_LOCALISATIONS
	(MYVISITEID VARCHAR2,
	MYREGLEID IN NUMBER,
	MYACTION  OUT NUMBER,
	MYMESSAGE  OUT VARCHAR2,
	MYACTIONBLOQUANTE  IN OUT NUMBER)
IS
MYNATIONALITE VARCHAR2(14);
TMPCOUNT INT;

BEGIN
	MYACTION:=0;
	MYMESSAGE:='';
	SELECT COUNT(LOCALISATIONID) INTO TMPCOUNT  FROM VISITES_LOCALISATION WHERE VISITEID=MYVISITEID;
	IF  TMPCOUNT>0 THEN
		SELECT I.NATIONALITEID INTO MYNATIONALITE FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=MYVISITEID ;
		SELECT COUNT(REGLEID) INTO TMPCOUNT FROM REGLES TREG WHERE TREG.REGLEID=MYREGLEID 
		AND ((TREG.FREE1=TO_CHAR(GET_REGION_PAYS(MYVISITEID)) AND MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=MYNATIONALITE)
		AND ((TREG.FREE2 IN (SELECT LOCALISATIONID FROM VISITES_LOCALISATION WHERE VISITEID=MYVISITEID) OR TREG.FREE2='-2'));
		  IF TMPCOUNT>0 THEN
			PS_REGLES_EXEC_ACTIONS(MYREGLEID,MYVISITEID);
			SELECT MESSAGE INTO MYMESSAGE FROM REGLES WHERE REGLEID=MYREGLEID;
			SELECT TYPEACTION INTO MYACTION FROM REGLES WHERE REGLEID=MYREGLEID ;
			SELECT ACTIONBLOQUANTE INTO MYACTIONBLOQUANTE FROM REGLES WHERE REGLEID=MYREGLEID;
		END IF;
	END IF;
END ;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_REGLE_DUREEVISITE(
	MYVISITEID IN VARCHAR2,
    MYREGLEID IN NUMBER,
    MYACTION OUT NUMBER,
    MYMESSAGE OUT VARCHAR2,
    MYACTIONBLOQUANTE IN OUT NUMBER)
IS
	MYNATIONALITE VARCHAR2(14);
	TMPCOUNT NUMBER;
	DAYSDIFF INT ;
BEGIN
	MYACTION:=0;
	MYMESSAGE:='';
	SELECT I.NATIONALITEID INTO MYNATIONALITE FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=MYVISITEID;

	SELECT COUNT(REGLEID) INTO TMPCOUNT FROM REGLES TREG WHERE TREG.REGLEID=MYREGLEID  AND ( (TREG.FREE1=TO_CHAR(GET_REGION_PAYS(MYVISITEID)) AND MYNATIONALITE<>'VPARDEFAUT') OR TREG.FREE1='-2' OR TREG.FREE1=MYNATIONALITE) ;

	SELECT TRUNC(FINPREVU)-TRUNC(DEBUTPREVU) INTO DAYSDIFF FROM VISITES WHERE VISITEID=MYVISITEID;

	SELECT count(*) INTO TMPCOUNT FROM  (SELECT CASE WHEN FREE3='superieur' AND TO_NUMBER(FREE2)<(DAYSDIFF) THEN 'OK'
		    WHEN FREE3='superieuregal' AND TO_NUMBER(FREE2)<=(DAYSDIFF) THEN 'OK'
		    WHEN FREE3='inferieur' AND TO_NUMBER(FREE2)>(DAYSDIFF) THEN 'OK'
		    WHEN FREE3='inferieuregal' AND TO_NUMBER(FREE2)>=(DAYSDIFF) THEN 'OK'
		    WHEN FREE3='egal' AND TO_NUMBER(FREE2)=(DAYSDIFF) THEN 'OK'
		    WHEN FREE3='different' AND TO_NUMBER(FREE2)<>(DAYSDIFF) THEN 'OK'
		   ELSE 'PASOK' END  MYRES FROM REGLES  WHERE REGLEID=MYREGLEID) A WHERE A.MYRES='OK';
    IF TMPCOUNT>0 
	THEN
		 PS_REGLES_EXEC_ACTIONS(MYREGLEID,MYVISITEID);
        SELECT MESSAGE INTO MYMESSAGE FROM REGLES WHERE REGLEID=MYREGLEID;
        SELECT TYPEACTION INTO MYACTION FROM REGLES WHERE REGLEID=MYREGLEID ;
        SELECT ACTIONBLOQUANTE INTO MYACTIONBLOQUANTE FROM REGLES WHERE REGLEID=MYREGLEID;
	END IF;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_REGLE_CPPA
 (MYVISITEID IN VARCHAR2,
 MYREGLEID IN NUMBER,
 MYACTION OUT NUMBER,
 MYMESSAGE OUT VARCHAR2,
 MYACTIONBLOQUANTE IN OUT NUMBER)
IS
 --LOCMESSAGE VARCHAR2(100);
    MYPOLEID VARCHAR2(14);
    MYNATIONALITEID VARCHAR2(14);
    MYSITEID VARCHAR2(14);
    MYCODEACTIVITEID VARCHAR2(14);
    TMPCOUNT NUMBER;
BEGIN
    MYACTION:=0;
    MYMESSAGE:='';
    SELECT R.SOCIETEID INTO MYPOLEID FROM RESIDANTS R,VISITES V WHERE R.RESIDANTID=V.RESIDANTID AND V.VISITEID=MYVISITEID;
    SELECT I.NATIONALITEID INTO MYNATIONALITEID FROM INTERLOCUTEUR I,VISITES V WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND V.VISITEID=MYVISITEID ;
    SELECT V.SITEID INTO MYSITEID FROM VISITES V WHERE V.VISITEID=MYVISITEID;
    SELECT V.TYPEVISITEID INTO MYCODEACTIVITEID FROM VISITES V WHERE V.VISITEID=MYVISITEID;
    SELECT COUNT(*) INTO TMPCOUNT FROM ZCL15_CPPA WHERE REGLEID=MYREGLEID AND SOCIETEID=MYPOLEID AND PAYSID=MYNATIONALITEID AND TYPEVISITEID=MYCODEACTIVITEID AND SITEID IN (SELECT GRPSITEID FROM V_LISTE_GRPSITE WHERE SITEID=MYSITEID );
    IF TMPCOUNT>0 THEN
        PS_REGLES_EXEC_ACTIONS(MYREGLEID,MYVISITEID);
        SELECT MESSAGE INTO MYMESSAGE FROM REGLES WHERE REGLEID=MYREGLEID; -- MYMESSAGE:=LOCMESSAGE;
        SELECT TYPEACTION INTO MYACTION FROM REGLES WHERE REGLEID=MYREGLEID ;
        SELECT ACTIONBLOQUANTE INTO MYACTIONBLOQUANTE FROM REGLES WHERE REGLEID=MYREGLEID;
    END IF;
END;
/
COMMIT;



CREATE OR REPLACE PROCEDURE PS_REGLES_TRT_EXT
 (MYVISITEID IN VARCHAR2,OSFIRST IN VARCHAR2, ALL_RULES NUMBER, MYBYPASS VARCHAR2)
IS
 CURSOR EMP IS SELECT REG.REGLEID,REG.TYPEREGLE,REG.FREE8,REG.SITEID,REG.RANGREGLE,REG.MESSAGEACC,REG.CATEGORIE FROM
 REGLES REG,VISITES V WHERE REG.RANGREGLE<>-1 AND ( (ALL_RULES=1 AND REG.FLAG_TIC=1 AND ((REG.PERIODE IS NOT NULL OR (REG.DUREE IS NOT NULL AND TO_CHAR(TO_DATE(REG.DUREE,'DD/MM/YYYY HH24:MI:SS'))<>'00:00'))) OR ALL_RULES=0 )
 AND (REG.TYPEVISITE=V.TYPEVISITEID OR REG.TYPEVISITE=-2) AND  (REG.NATUREVISITE='-2' OR  REG.NATUREVISITE IN (SELECT CASE WHEN NATUREVISITE='VISITE' THEN '0' ELSE '1' END FROM VISITES WHERE VISITEID=V.VISITEID)) AND (MYBYPASS='NOBYPASS' OR MYBYPASS='BYPASS' AND REG.BYPASS='0' ) AND V.VISITEID=MYVISITEID) AND REG.STATUT=1 ORDER BY REG.RANGREGLE ASC;
 LC$ID REGLES.REGLEID%Type ;
 TR$ID REGLES.TYPEREGLE%Type ;
 MS$ID REGLES.FREE8%Type;
 MACC$ID REGLES.MESSAGEACC%Type;
 SITE$ID REGLES.SITEID%Type;
 RAN$ID REGLES.RANGREGLE%Type;
 MYCAT$ID REGLES.CATEGORIE%Type;
 MYINDICE INT;
 MYDELAI NUMBER;
 MYCONDITION NUMBER;
 MYDATECREA DATE;
 MYDATEDEBUT DATE;
 MYSTATUTVISITE VARCHAR2(50);
 MYACTION NUMBER;
 MYMESSAGE VARCHAR2(4000);
 MYMESSAGETORESID VARCHAR2(4000);
 MYMESSAGETOACC VARCHAR2(4000);
 MYCATEGORIE VARCHAR2(30);
 LOCMESSAGE VARCHAR2(150);
 LOCACTION NUMBER;
 MYACTIONBLOQUANTE NUMBER;
 MYSITE VARCHAR2(14);
 TMP NUMBER;
 PREVSTATUT VARCHAR2(50);
 OSHASDONE VARCHAR2(50);
 VALIDEUR VARCHAR2(50);
 LASTCOLOR VARCHAR2(50);
BEGIN
    MYACTION:=0;
    MYMESSAGETORESID:='';
    MYMESSAGETOACC:='';
    MYSTATUTVISITE:='WEB OK';
    MYMESSAGE:='';
    MYINDICE:=0;
    TMP:=0;
	MYCATEGORIE:='';
    MYACTIONBLOQUANTE:=0 ; --action no bloquante par défaut;
        -- SUPPRIME LES ARBITRAGES RENDUS AVANT SI TYPEVISITEID EST MODIFIE CERTAINS SONT VALABLESPOUR TOUT TYPE DE VISITE (-2)
    DELETE FROM VISITE_REGLE WHERE VISITEID=MYVISITEID AND REGLEID IN (SELECT REG.REGLEID FROM REGLES REG,VISITES V WHERE REG.TYPEVISITE NOT IN(-2,V.TYPEVISITEID) OR REG.NATUREVISITE<>'-2' OR  REG.NATUREVISITE NOT IN (SELECT CASE WHEN NATUREVISITE='VISITE' THEN '0' ELSE '1' END FROM VISITES WHERE VISITEID=V.VISITEID) AND V.VISITEID=MYVISITEID);
    SELECT NVL(FREE6,'WEB') INTO VALIDEUR FROM VISITES WHERE VISITEID=MYVISITEID;
    SELECT NVL(RES_MOTEUR1,'WEB OK') INTO LASTCOLOR FROM VISITES WHERE VISITEID=MYVISITEID;
    Open EMP ; -- ouverture du curseur
    Loop -- boucle sur les lignes
        Fetch EMP Into LC$ID,TR$ID,MS$ID,SITE$ID,RAN$ID,MACC$ID,MYCAT$ID ; -- Lecture d'une ligne
        Exit When EMP%NOTFOUND ; -- sortie lorsque le curseur ne ramène plus de ligne
        SELECT COUNT(*) INTO TMP FROM VISITES WHERE VISITEID=MYVISITEID AND SITEID IN (SELECT SITEID FROM V_LISTE_GRPSITE WHERE GRPSITEID=SITE$ID);
        IF SITE$ID is null OR  TMP>0 THEN
            LOCACTION:=0;
            MYMESSAGETORESID:='';
            MYMESSAGETOACC:='';
            MYMESSAGE:='';
            CASE
                WHEN TR$ID=0 THEN   -- PRECAUTION D'ACCES
                    PS_REGLE_INTERDITS(MYVISITEID,LC$ID,LOCACTION,LOCMESSAGE,MYACTIONBLOQUANTE);
                WHEN TR$ID=-1 THEN   -- PRECAUTION D'ACCES
                    PS_REGLE_PRECAUTION_ACCES(MYVISITEID,LC$ID,LOCACTION,LOCMESSAGE,MYACTIONBLOQUANTE);
                WHEN TR$ID=-2 THEN --DELAI D'ANTICIPATION
                    PS_REGLE_DELAI_ANTICIPATION(MYVISITEID,LC$ID,LOCACTION,LOCMESSAGE,MYACTIONBLOQUANTE);
                 WHEN TR$ID=-3 THEN --CUMUL DE JOURS DE VISITES
                    PS_REGLE_CUMUL_VISITES(MYVISITEID,LC$ID,LOCACTION,LOCMESSAGE,MYACTIONBLOQUANTE);
                WHEN TR$ID=-4 THEN --ZONES ACCES RESTREINT
                    PS_REGLE_ZONE_ACCES(MYVISITEID,LC$ID,LOCACTION,LOCMESSAGE,MYACTIONBLOQUANTE);
                WHEN TR$ID=-7 THEN  --VALIDATION DE DOCUMENTS
                    PS_REGLE_VALIDITE_DOCUMENTS(MYVISITEID,LC$ID,LOCACTION,LOCMESSAGE,MYACTIONBLOQUANTE);
                WHEN TR$ID=-9 THEN --SAISIE RESIDANTS
                    PS_REGLE_SAISIE_RESIDANTS(MYVISITEID,LC$ID,LOCACTION,LOCMESSAGE,MYACTIONBLOQUANTE);
                WHEN TR$ID=-6 THEN --MESURES COMPENSATOIRES
                    PS_REGLE_MCOMPENSATOIRES(MYVISITEID,LC$ID,LOCACTION,LOCMESSAGE,MYACTIONBLOQUANTE);
                WHEN TR$ID=-10 THEN --TRANSPORT ADR
                    PS_REGLE_TRANSPORT_ADR(MYVISITEID,LC$ID,LOCACTION,LOCMESSAGE,MYACTIONBLOQUANTE);
                WHEN TR$ID=-12 THEN --TRANSPORT ADR
                    PS_REGLE_CPPA(MYVISITEID,LC$ID,LOCACTION,LOCMESSAGE,MYACTIONBLOQUANTE);
                   WHEN TR$ID=-13 THEN --TRANSPORT ADR
                    PS_REGLE_ZRR(MYVISITEID,LC$ID,LOCACTION,LOCMESSAGE,MYACTIONBLOQUANTE);
                WHEN TR$ID=-14 THEN --TRANSPORT ADR
                    PS_REGLE_MINEUR(MYVISITEID,LC$ID,LOCACTION,LOCMESSAGE,MYACTIONBLOQUANTE);
                WHEN TR$ID=-15 THEN --CUMUL DE JOURS DE VISITES
                    PS_REGLE_RESTREINTS(MYVISITEID,LC$ID,LOCACTION,LOCMESSAGE,MYACTIONBLOQUANTE);
				WHEN TR$ID=-16 THEN
					PS_REGLE_LOCALISATIONS(MYVISITEID,LC$ID,LOCACTION,LOCMESSAGE,MYACTIONBLOQUANTE);
			    WHEN TR$ID=-17 THEN
					PS_REGLE_DUREEVISITE(MYVISITEID,LC$ID,LOCACTION,LOCMESSAGE,MYACTIONBLOQUANTE);
                ELSE MYINDICE:=MYINDICE;
            END CASE;
            IF LOCACTION<>0 THEN
                MYMESSAGETORESID:=MS$ID;
                MYMESSAGETOACC:=MACC$ID;
                MYMESSAGE:=LOCMESSAGE;
				MYCATEGORIE:=MYCAT$ID;
            END IF;
            DELETE FROM VISITE_REGLE WHERE VISITEID=MYVISITEID AND REGLEID=LC$ID;
            COMMIT;
            IF LOCACTION<>0 THEN
                INSERT INTO VISITE_REGLE(VISITEID,REGLEID,ARBITRAGE,ACTIONBLOQUANTE,RANGREGLE,MES_RESI,MES_VALI,MES_ACC,CATEGORIE,DATECREATION,DATEMAJ) VALUES(MYVISITEID,LC$ID,LOCACTION,MYACTIONBLOQUANTE,RAN$ID,SUBSTR(MYMESSAGETORESID,0,4000),SUBSTR(MYMESSAGE,0,4000),SUBSTR(MYMESSAGETOACC,0,4000),SUBSTR(MYCATEGORIE,0,2),SYSDATE,SYSDATE) ;
                COMMIT;
            END IF;
        END IF;
        MYINDICE:=MYINDICE+1;
    End loop ;
    Close  EMP ; -- fermeture du curseur
    SELECT COUNT(*) INTO TMP FROM REGLES WHERE RANGREGLE<>-1 AND STATUT=1;
    IF TMP>0 THEN
        PS_REGLE_RESULTAT(MYVISITEID,MYACTION,MYMESSAGE,MYMESSAGETORESID,MYMESSAGETOACC,MYCATEGORIE);
        MYSTATUTVISITE:=GET_STATUTVISITE(MYACTION);
        IF VALIDEUR='WEB' THEN
            UPDATE VISITES SET STATUTVISITE=MYSTATUTVISITE, RES_MOTEUR1=MYSTATUTVISITE, FREE8=substr(MYMESSAGETORESID, 0, 250), FREE9=substr(MYMESSAGE, 0, 250), FREE2=substr(MYMESSAGETOACC, 0, 250), LAST_ACTION='WEB',FREE6='WEB', ALERTE=substr(MYMESSAGE,0,4000),CATEGORIE=SUBSTR(MYCATEGORIE,0,30) WHERE VISITEID=MYVISITEID;
        ELSE
            IF OSFIRST='0' THEN
                    UPDATE VISITES SET STATUTVISITE=MYSTATUTVISITE, RES_MOTEUR1=MYSTATUTVISITE, FREE8=substr(MYMESSAGETORESID, 0, 250), FREE9=substr(MYMESSAGE, 0, 250),FREE2=substr(MYMESSAGETOACC, 0, 250), LAST_ACTION='WEB', ALERTE=substr(MYMESSAGE,0,4000),CATEGORIE=SUBSTR(MYCATEGORIE,0,30)  WHERE VISITEID=MYVISITEID;
            ELSE
                    UPDATE VISITES SET RES_MOTEUR1=MYSTATUTVISITE, FREE8=substr(MYMESSAGETORESID, 0, 250), FREE9=substr(MYMESSAGE, 0, 250),FREE2=substr(MYMESSAGETOACC, 0, 250),LAST_ACTION='WEB',ALERTE=substr(MYMESSAGE,0,4000),CATEGORIE=SUBSTR(MYCATEGORIE,0,30)  WHERE VISITEID=MYVISITEID;
            END IF;
        END IF;
        UPDATE VISITES SET RES_MOTEUR2=LASTCOLOR,DATEMAJ=SYSDATE,DATESYNCHRO=NULL WHERE VISITEID=MYVISITEID;
    END IF;
END;
/
COMMIT;
CREATE OR REPLACE PROCEDURE PS_REGLES_BATCH
IS
 CURSOR PREENREG IS SELECT VISITEID,SITEID FROM VISITES WHERE STATUTID=2  AND (TRUNC(SYSDATE) <=FINPREVU) ORDER BY DATECREATION DESC;
 SIT$ID VISITES.SITEID%Type ;
 VIS$ID VISITES.VISITEID%Type ;
 MYINDICE INT;
 FLAG_EXCEPTION VARCHAR2(1);
 MYSITEID VARCHAR2(14);
 ALL_RULES NUMBER;
 TMP NUMBER;
BEGIN
    ALL_RULES:=1 ; -- SI 1 EXECUTER LES REGLES OU FLAG_TIC=1 SINON TOUTES LES REGLES
    MYINDICE:=0;
    SELECT COUNT(*) INTO TMP FROM REGLES WHERE PERIODE IS NOT NULL OR (DUREE IS NOT NULL AND TO_CHAR(TO_DATE(DUREE,'DD/MM/YYYY HH24:MI:SS'))<>'00:00') AND STATUT=1;
    IF TMP>0 THEN
        Open PREENREG ; -- ouverture du curseur
        Loop -- boucle sur les lignes
            Fetch PREENREG Into VIS$ID,SIT$ID ; -- Lecture d'une visite
            Exit When PREENREG%NOTFOUND ; -- sortie lorsque le curseur ne ramène plus de ligne
            BEGIN
                SELECT  UPPER(VALEUR)  INTO FLAG_EXCEPTION FROM (SELECT NVL(VALEUR,'0') VALEUR,'1' AS A FROM PARAMETRAGE WHERE LIBELLE='OSFIRST' AND SITEID=MYSITEID UNION SELECT VALEUR,'2' AS A FROM PARAMETRAGE WHERE LIBELLE='OSFIRST' AND SITEID='ALL' ORDER BY A) WHERE ROWNUM=1 ;
                PS_REGLES_TRT_EXT(VIS$ID,FLAG_EXCEPTION,ALL_RULES,'NOBYPASS');
            END;
            MYINDICE:=MYINDICE+1;
        End loop ;
        Close  PREENREG ; -- fermeture du curseur
    END IF;
 END;
/
COMMIT;



CREATE OR REPLACE PROCEDURE PS_REGLES_ORDER
IS
    CURSOR EMP IS SELECT REGLEID FROM REGLES WHERE RANGREGLE<>-1 ORDER BY RANGREGLE ASC;
    LC$ID REGLES.REGLEID%Type ;
    MYINDICE INT;
BEGIN
    MYINDICE:=0;
    Open EMP ;
    Loop
    Fetch EMP Into LC$ID ;
    Exit When EMP%NOTFOUND ;
    UPDATE REGLES SET RANGREGLE=MYINDICE WHERE REGLEID=LC$ID;
    MYINDICE:=MYINDICE+1;
    End loop ;
    Close  EMP ;
END;
/

COMMIT;

CREATE OR REPLACE PROCEDURE PS_REGLES_UPDOWN
    (UPDOWN_ID NUMBER,
    SENS VARCHAR2)
IS
    MYRG INT;
    MYRULECOUNT INT;
BEGIN
    SELECT COUNT(*) INTO MYRULECOUNT FROM REGLES WHERE RANGREGLE<>-1;
    SELECT RANGREGLE INTO MYRG FROM REGLES WHERE REGLEID=UPDOWN_ID;
    IF (SENS='UP') AND (MYRG>0)  THEN
        UPDATE REGLES SET RANGREGLE=MYRG WHERE RANGREGLE=MYRG-1;
        UPDATE REGLES SET RANGREGLE=MYRG-1 WHERE REGLEID=UPDOWN_ID;
    ELSE
        IF  (SENS='DOWN') AND (MYRG<MYRULECOUNT-1)  THEN
            UPDATE REGLES SET RANGREGLE=MYRG WHERE RANGREGLE=MYRG+1;
            UPDATE REGLES SET RANGREGLE=MYRG+1 WHERE REGLEID=UPDOWN_ID;
        END IF;
    END IF;
COMMIT;
END;
/
COMMIT;

-----------------------------------
-- PROCEDURES STOCKEES GESROOM   --
-----------------------------------

CREATE OR REPLACE PROCEDURE PS_MAJ_LGRESA

    (MYCODELGRESERVATION IN VARCHAR2,
    MYPORTE_CODE IN VARCHAR2)
IS
TMP INT;
BEGIN
    SELECT COUNT(*) INTO TMP FROM LGRESERVATION WHERE CODELGRESERVATION = MYCODELGRESERVATION;
    IF TMP>0 THEN
        UPDATE LGRESERVATION SET PORTE_CODE=MYPORTE_CODE WHERE CODELGRESERVATION = MYCODELGRESERVATION;
        DBMS_OUTPUT.PUT_LINE( TO_CHAR( SQL%ROWCOUNT ));
    ELSE
      DBMS_OUTPUT.PUT_LINE( TO_CHAR(-1));
    END IF;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_INSERT_IN_MAIL
 (
 MYMAILID IN VARCHAR2,
 MYCODELGRESERVATION IN VARCHAR2,
 MYPORTE_CODE IN VARCHAR2,
 MYSUJET_MAIL IN VARCHAR2,
 MYBODY_MAIL IN VARCHAR2 )
AS
 MYSITEID_TARGET VARCHAR2(14);
 MYSITE_TARGET VARCHAR2(35);
 MYTOADDRESS_TARGET VARCHAR2(1000);
 TMP INT;
BEGIN
  MYSITEID_TARGET:=NULL;
  MYSITE_TARGET:=NULL;

  SELECT COUNT(*) INTO TMP FROM USERS WHERE  USERID IN (SELECT USERID FROM RESERVATION WHERE CODERESERVATION IN (SELECT CODERESERVATION FROM LGRESERVATION WHERE CODELGRESERVATION=MYCODELGRESERVATION));
  IF TMP >0 THEN
    SELECT SITEID INTO MYSITEID_TARGET FROM USERS WHERE  USERID IN (SELECT USERID FROM RESERVATION WHERE CODERESERVATION IN (SELECT CODERESERVATION FROM LGRESERVATION WHERE CODELGRESERVATION=MYCODELGRESERVATION));

    SELECT SITE INTO MYSITE_TARGET FROM USERS WHERE  USERID IN (SELECT USERID FROM RESERVATION WHERE CODERESERVATION IN (SELECT CODERESERVATION FROM LGRESERVATION WHERE CODELGRESERVATION=MYCODELGRESERVATION));
    SELECT COUNT(*) INTO TMP FROM RESIDANTS WHERE RESIDANTID IN (SELECT CODEANIMATEUR FROM RESERVATION WHERE CODERESERVATION IN (SELECT CODERESERVATION FROM LGRESERVATION WHERE CODELGRESERVATION=MYCODELGRESERVATION));
    IF TMP >0 THEN
      SELECT EMAIL INTO MYTOADDRESS_TARGET FROM RESIDANTS WHERE RESIDANTID IN (SELECT CODEANIMATEUR FROM RESERVATION WHERE CODERESERVATION IN (SELECT CODERESERVATION FROM LGRESERVATION WHERE CODELGRESERVATION=MYCODELGRESERVATION)) ;
      INSERT INTO MAIL (MAILID,SITE,SITEID,USERID,TOADDRESS,SUJET,BODY,STATUT,DATECREATION,DATEMAJ) VALUES (MYMAILID,MYSITE_TARGET,MYSITEID_TARGET,'-1',MYTOADDRESS_TARGET,MYSUJET_MAIL,MYBODY_MAIL,'-1',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
      DBMS_OUTPUT.PUT_LINE( To_char( SQL%ROWCOUNT ));
    END IF;
  ELSE
    DBMS_OUTPUT.PUT_LINE( To_char(-1));
  END IF;
END;
/
COMMIT;
---------------------TAXI----------------------------


CREATE OR REPLACE PROCEDURE PS_TAXI_CREATIONIMPUTATION
    (LIBELLEp IN VARCHAR2,
    ID OUT VARCHAR2)
IS
    MYLIBELLE VARCHAR2(35);
    FLAG VARCHAR2(14);
    IDENTITY VARCHAR2(14);
    TMP INT;
BEGIN
    MYLIBELLE := UPPER(LIBELLEp);
    SELECT COUNT(*) INTO TMP FROM IMPUTATION WHERE UPPER(LIBELLE) = MYLIBELLE;
    IF TMP > 0 THEN
        SELECT IMPUTATIONID INTO ID FROM IMPUTATION WHERE UPPER(LIBELLE) = MYLIBELLE AND ROWNUM <= 1;
    ELSE
        SELECT SUBSTR(VERSION, 1, 3) INTO FLAG FROM VERSION_SFW;
        SELECT SEQ_IDENTITY.NEXTVAL INTO IDENTITY FROM DUAL;
        ID := FLAG || '' || IDENTITY;

        INSERT INTO IMPUTATION(IMPUTATIONID, LIBELLE, IMPUTATION_TYPEID, DATECREATION, DATEMAJ)
            VALUES (ID, MYLIBELLE, 'VPARDEFAUT', SYSDATE, SYSDATE);
    END IF;
END;

/
COMMIT;
CREATE OR REPLACE PROCEDURE PS_TAXI_CREATIONEVENEMENT
    (ID_COURSEp IN INT,
    LIBELLEp IN VARCHAR2,
    DATEHEUREp IN DATE,
    USERIDp IN VARCHAR2,
    ID OUT VARCHAR2)
IS
    MYLIBELLE VARCHAR2(200);
    NOW DATE;
    FLAG VARCHAR2(14);
    IDENTITY VARCHAR2(14);
BEGIN
    NOW := SYSDATE;
    MYLIBELLE := UPPER(LIBELLEp);
    SELECT SUBSTR(VERSION, 1, 3) INTO FLAG FROM VERSION_SFW;
    SELECT SEQ_IDENTITY.NEXTVAL INTO IDENTITY FROM DUAL;
    ID := FLAG || '' || IDENTITY;
    INSERT INTO EVENEMENTCOURSE(ID_EVENEMENTCOURSE, ID_COURSE, LIBELLE, DATEHEURE, USERID, DATECREATION, DATEMAJ)
        VALUES (ID, ID_COURSEp, MYLIBELLE, DATEHEUREp, USERIDp, NOW, NOW);
END;

/
COMMIT;
CREATE OR REPLACE PROCEDURE PS_TAXI_CREATIONCOURSE
    (USERIDp IN VARCHAR2,
    ENLEVEMENTPREVU IN DATE,
    LIEUDEPARTp IN VARCHAR2,
    OBJETp IN VARCHAR2,
    MOYENPAIEMENTp IN VARCHAR2,
    CODECLIENTp IN VARCHAR2,
    IMPUTATION IN VARCHAR2,
    ID_TYPEVEHICULEp INT,
    ID OUT INT)
IS
    NOW DATE;
    SITEID VARCHAR2(14);
    SITE VARCHAR2(35);
    EID VARCHAR2(14);
    IMPUTATIONID VARCHAR2(14);
    EVNMT VARCHAR2(200);
    FLAG VARCHAR2(14);
    IDENTITY VARCHAR2(14);
BEGIN
    PS_TAXI_CREATIONIMPUTATION(IMPUTATION, IMPUTATIONID);

    NOW := SYSDATE;

    SELECT SITEID INTO SITEID FROM USERS WHERE USERID = USERIDp AND ROWNUM <= 1;

    SELECT SUBSTR(VERSION, 1, 3) INTO FLAG FROM VERSION_SFW;
    SELECT SEQ_IDENTITY.NEXTVAL INTO IDENTITY FROM DUAL;
    ID := FLAG || '' || IDENTITY;

    INSERT INTO COURSE(ID_COURSE, SITEID, ID_STATUTCOURSE, DATEHEUREDEMANDE, LIEUDEPART, DATEHEUREDEPART, ID_TYPEVEHICULE, OBJET, MOYENPAIEMENT, IMPUTATIONID, CODECLIENT, DATECREATION, DATEMAJ)
        VALUES (ID, SITEID, -1, NOW, LIEUDEPARTp, ENLEVEMENTPREVU, ID_TYPEVEHICULEp, OBJETp, MOYENPAIEMENTp, IMPUTATIONID, CODECLIENTp, NOW, NOW);

    EVNMT := 'CREATION COURSE';
    PS_TAXI_CREATIONEVENEMENT(ID, EVNMT, NOW, USERIDp, EID);
END;

/
COMMIT;
CREATE OR REPLACE PROCEDURE PS_TAXI_CREATIONPASSAGER
    (ID_COURSEp IN INT,
    RESIDANTIDp IN VARCHAR2,
    INTERLOCUTEURIDp IN VARCHAR2,
    CONTACTp IN VARCHAR2,
    HANDICAPp IN VARCHAR2,
    ANIMALp IN VARCHAR2,
    ID OUT INT)
IS
    ORDRE INT;
    FLAG VARCHAR2(14);
    IDENTITY VARCHAR2(14);
BEGIN
    SELECT MAX(ORDRE) INTO ORDRE FROM PASSAGERTAXI WHERE ID_COURSE = ID_COURSEp;
    IF ORDRE IS NULL THEN
        ORDRE := 0;
    ELSE
        ORDRE := ORDRE + 1;
    END IF;

    SELECT SUBSTR(VERSION, 1, 3) INTO FLAG FROM VERSION_SFW;
    SELECT SEQ_IDENTITY.NEXTVAL INTO IDENTITY FROM DUAL;
    ID := FLAG || '' || IDENTITY;

    INSERT INTO PASSAGERTAXI(ID_PASSAGERTAXI, ID_COURSE, RESIDANTID, INTERLOCUTEURID, CONTACT, HANDICAP, ANIMAL, ORDRE, DATECREATION, DATEMAJ)
        VALUES (ID, ID_COURSEp, RESIDANTIDp, INTERLOCUTEURIDp, CONTACTp, HANDICAPp, ANIMALp, ORDRE, SYSDATE, SYSDATE);
END;

/
COMMIT;
CREATE OR REPLACE PROCEDURE PS_TAXI_CONFIRMATIONCOURSE
    (ID_COURSEp IN INT,
    USERID IN VARCHAR2,
    NUMCOURSEp IN VARCHAR2,
    REFERENCESTAXIp IN VARCHAR2,
    DELAIp IN INT,
    ADRESSEIDp IN VARCHAR2)
IS
    STATUTCOURSE VARCHAR2(35);
    COMPAGNIE VARCHAR2(80);
    NOW DATE;
    EID VARCHAR2(14);
    EVNMT VARCHAR2(200);
BEGIN
    NOW := SYSDATE;

    UPDATE COURSE SET ID_STATUTCOURSE = -2, DATEMAJ = NOW, NUMCOURSE = NUMCOURSEp, REFERENCESTAXI = REFERENCESTAXIp, DELAI = DELAIp, ADRESSEID = ADRESSEID WHERE ID_COURSE = ID_COURSEp;
    SELECT LIBELLE INTO STATUTCOURSE FROM STATUTCOURSE WHERE ID_STATUTCOURSE = -2 AND ROWNUM <= 1;
    SELECT SOCIETE INTO COMPAGNIE FROM ADRESSE WHERE ADRESSEID = ADRESSEIDp;
    EVNMT := 'COURSE CONFIRMEE PAR LA COMPAGNIE '||COMPAGNIE;
    PS_TAXI_CREATIONEVENEMENT(ID_COURSEp, EVNMT, NOW, USERID, EID);
END;

/
COMMIT;
CREATE OR REPLACE PROCEDURE PS_TAXI_MODIFCOURSE
    (ID_COURSEp IN INT,
    USERID IN VARCHAR2,
    NUMCOURSEp IN VARCHAR2,
    REFERENCESTAXIp IN VARCHAR2)
IS
    COMPAGNIE VARCHAR2(80);
    NOW DATE;
    EID VARCHAR2(14);
    EVNMT VARCHAR2(200);
BEGIN
    NOW := SYSDATE;

    UPDATE COURSE SET DATEMAJ = NOW, NUMCOURSE = NUMCOURSEp, REFERENCESTAXI = REFERENCESTAXIp WHERE ID_COURSE = ID_COURSEp;
    EVNMT := 'COURSE MODIFIEE';
    PS_TAXI_CREATIONEVENEMENT(ID_COURSEp, EVNMT, NOW, USERID, EID);
END;

/

CREATE OR REPLACE PROCEDURE PS_TAXI_REFUSCOURSE
    (ID_COURSE IN INT,
    USERID IN VARCHAR2,
    ADRESSEIDp IN VARCHAR2)
IS
    COMPAGNIE VARCHAR2(80);
    NOW DATE;
    EID VARCHAR2(14);
    EVNMT VARCHAR2(200);
BEGIN
    NOW := SYSDATE;
    SELECT SOCIETE INTO COMPAGNIE FROM ADRESSE WHERE ADRESSEID = ADRESSEIDp AND ROWNUM <= 1;
    EVNMT := 'COURSE REFUSEE PAR LA COMPAGNIE '||COMPAGNIE;
    PS_TAXI_CREATIONEVENEMENT(ID_COURSE, EVNMT, NOW, USERID, EID);
END;

/

CREATE OR REPLACE PROCEDURE PS_TAXI_ARRIVEETAXI
    (ID_COURSEp IN INT,
    USERID IN VARCHAR2)
IS
    NOW DATE;
    EID VARCHAR2(14);
    EVNMT VARCHAR2(200);
BEGIN
    NOW := SYSDATE;
    EVNMT := 'ARRIVEE DU TAXI';
    PS_TAXI_CREATIONEVENEMENT(ID_COURSEp, EVNMT, NOW, USERID, EID);

    UPDATE COURSE SET ID_STATUTCOURSE = -3, DATEMAJ = NOW, DATEHEUREFIN = NOW WHERE ID_COURSE = ID_COURSEp;
END;

/

CREATE OR REPLACE PROCEDURE PS_TAXI_ANNULATIONCOURSE
    (ID_COURSEp IN INT,
    USERID IN VARCHAR2)
IS
    NOW DATE;
    EID VARCHAR2(14);
    EVNMT VARCHAR2(200);
BEGIN
    NOW := SYSDATE;
    EVNMT := 'ANNULATION';
    PS_TAXI_CREATIONEVENEMENT(ID_COURSEp, EVNMT, NOW, USERID, EID);

    UPDATE COURSE SET ID_STATUTCOURSE = -4, DATEMAJ = NOW, DATEHEUREFIN = NOW WHERE ID_COURSE = ID_COURSEp;
END;

/

CREATE OR REPLACE PROCEDURE PS_TAXI_CHANGEMENTSTATUTCOURSE
    (ID_COURSEp IN INT,
    ID_STATUTCOURSEp IN INT,
    USERID IN VARCHAR2)
IS
    STATUTCOURSE VARCHAR2(35);
    NOW DATE;
    EID VARCHAR2(14);
    EVNMT VARCHAR2(200);
BEGIN
    NOW := SYSDATE;

    UPDATE COURSE SET ID_STATUTCOURSE = ID_STATUTCOURSEp, DATEMAJ = NOW WHERE ID_COURSE = ID_COURSEp;
    SELECT LIBELLE INTO STATUTCOURSE FROM STATUTCOURSE WHERE ID_STATUTCOURSE = ID_STATUTCOURSEp AND ROWNUM <= 1;
    EVNMT := 'CHANGEMENT STATUT COURSE A '||STATUTCOURSE;
    PS_TAXI_CREATIONEVENEMENT(ID_COURSEp, EVNMT, NOW, USERID, EID);
END;

/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_CHECK_KEY
(SITEIDp VARCHAR2,
NBR OUT INT)
IS
OJOURNALIDp INT;
BEGIN

    SELECT SEQ_OJOURNAL.NEXTVAL INTO OJOURNALIDp FROM DUAL;
    INSERT INTO OJOURNAL (OJOURNALID,EVENEMENTID,PERSONNELDEBUTID,DEBUT_EFF,DEBUT_REEL,AGENDA_JOURID,MISSIONTEMPID,AGENDA_JOUR2ID,OBSERVATION,DATECREATION,DATEMAJ,SITEID,POSTEID,LIEUID) SELECT OJOURNALIDp,-19,-1,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,0,0,0,'',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,SITEIDp,-1,-1 FROM CLEFS C WHERE ETAT=2 AND DUREEAUTO=1 AND SYSDATE>(SELECT JOUR_DEPART FROM INDCLE I WHERE I.CLEID=C.CLEID AND JOUR_RETOUR IS NULL) + INTERVAL '2' HOUR;
    INSERT INTO OJOURNALLOG (OJOURNALID,ACTION,PERSONNELID,SITEID,POSTEID,OBSERVATION,DATEMAJ) SELECT OJOURNALIDp,1,-1,SITEIDp,-1,'',CURRENT_TIMESTAMP FROM CLEFS C WHERE ETAT=2 AND DUREEAUTO=1 AND SYSDATE>(SELECT JOUR_DEPART FROM INDCLE I WHERE I.CLEID=C.CLEID AND JOUR_RETOUR IS NULL) + INTERVAL '2' HOUR;

    SELECT SEQ_OJOURNAL.NEXTVAL INTO OJOURNALIDp FROM DUAL;
    INSERT INTO OJOURNAL (OJOURNALID,EVENEMENTID,PERSONNELDEBUTID,DEBUT_EFF,DEBUT_REEL,AGENDA_JOURID,MISSIONTEMPID,AGENDA_JOUR2ID,OBSERVATION,DATECREATION,DATEMAJ,SITEID,POSTEID,LIEUID) SELECT OJOURNALIDp,-19,-1,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,0,0,0,'',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,SITEIDp,-1,-1 FROM CLEFS C WHERE ETAT=2 AND DUREEAUTO=2 AND TO_DATE((SELECT JOUR_DEPART FROM INDCLE I WHERE I.CLEID=C.CLEID AND JOUR_RETOUR IS NULL),'HH24:MI')>(SELECT TO_DATE(VALEUR,'HH24:MI') FROM PARAMETRAGE WHERE LIBELLE='CLE_HEURE_FIN' AND SITEID='ALL');
    INSERT INTO OJOURNALLOG (OJOURNALID,ACTION,PERSONNELID,SITEID,POSTEID,OBSERVATION,DATEMAJ) SELECT OJOURNALIDp,1,-1,SITEIDp,-1,'',CURRENT_TIMESTAMP FROM CLEFS C WHERE ETAT=2 AND DUREEAUTO=2 AND TO_DATE((SELECT JOUR_DEPART FROM INDCLE I WHERE I.CLEID=C.CLEID AND JOUR_RETOUR IS NULL),'HH24:MI')>(SELECT TO_DATE(VALEUR,'HH24:MI') FROM PARAMETRAGE WHERE LIBELLE='CLE_HEURE_FIN' AND SITEID='ALL');

    SELECT SEQ_OJOURNAL.NEXTVAL INTO OJOURNALIDp FROM DUAL;
    INSERT INTO OJOURNAL (OJOURNALID,EVENEMENTID,PERSONNELDEBUTID,DEBUT_EFF,DEBUT_REEL,AGENDA_JOURID,MISSIONTEMPID,AGENDA_JOUR2ID,OBSERVATION,DATECREATION,DATEMAJ,SITEID,POSTEID,LIEUID) SELECT OJOURNALIDp,-19,-1,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,0,0,0,'',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,SITEIDp,-1,-1 FROM CLEFS C WHERE ETAT=2 AND DUREEAUTO=3 AND SYSDATE>(SELECT JOUR_DEPART FROM INDCLE I WHERE I.CLEID=C.CLEID AND JOUR_RETOUR IS NULL) + INTERVAL '24' HOUR;
    INSERT INTO OJOURNALLOG (OJOURNALID,ACTION,PERSONNELID,SITEID,POSTEID,OBSERVATION,DATEMAJ) SELECT OJOURNALIDp,1,-1,SITEIDp,-1,'',CURRENT_TIMESTAMP FROM CLEFS C WHERE ETAT=2 AND DUREEAUTO=3 AND SYSDATE>(SELECT JOUR_DEPART FROM INDCLE I WHERE I.CLEID=C.CLEID AND JOUR_RETOUR IS NULL) + INTERVAL '24' HOUR;

    UPDATE CLEFS C SET ETAT=3 WHERE ETAT=2 AND DUREEAUTO=1 AND SYSDATE>(SELECT JOUR_DEPART FROM INDCLE I WHERE I.CLEID=C.CLEID AND JOUR_RETOUR IS NULL) + INTERVAL '2' HOUR;
    UPDATE CLEFS C SET ETAT=3 WHERE ETAT=2 AND DUREEAUTO=2 AND TO_DATE((SELECT JOUR_DEPART FROM INDCLE I WHERE I.CLEID=C.CLEID AND JOUR_RETOUR IS NULL),'HH24:MI')>(SELECT TO_DATE(VALEUR,'HH24:MI') FROM PARAMETRAGE WHERE LIBELLE='CLE_HEURE_FIN' AND SITEID='ALL');
    UPDATE CLEFS C SET ETAT=3 WHERE ETAT=2 AND DUREEAUTO=3 AND SYSDATE>(SELECT JOUR_DEPART FROM INDCLE I WHERE I.CLEID=C.CLEID AND JOUR_RETOUR IS NULL) + INTERVAL '24' HOUR;
    NBR:=0;

    SELECT COUNT(*) INTO NBR FROM CLEFS WHERE ETAT=3;
END;
/

COMMIT;

CREATE OR REPLACE function split(input_list varchar2, ret_this_one number, delimiter varchar2)
return varchar2
is
 v_list varchar2(32767) := delimiter || input_list;
 start_position number;
 end_position number;
begin
 start_position := instr(v_list, delimiter, 1, ret_this_one);
 if start_position > 0 then
  end_position := instr( v_list, delimiter, 1, ret_this_one + 1);
  if end_position = 0 then
   end_position := length(v_list) + 1;
  end if;
  return(substr(v_list, start_position + 1, end_position - start_position - 1));
 else
  return NULL;
 end if;
end split;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_SITE(
 E_flagin IN INT,
 E_siteid IN VARCHAR2,
 E_ID OUT VARCHAR2
)

IS
TMP INT;
BEGIN
    E_ID:=null;
    SELECT COUNT(*) INTO TMP FROM SITE  WHERE SITEID = E_siteid;
    IF TMP>0 THEN
        SELECT siteid INTO E_ID FROM SITE  WHERE SITEID = E_siteid;
    ELSE
        SELECT COUNT(*) INTO TMP FROM SITE  WHERE UPPER(LIBELLE) = UPPER(E_siteid);
        IF TMP>0 THEN
         SELECT *  INTO E_ID  FROM(SELECT siteid FROM SITE  WHERE UPPER(LIBELLE) = UPPER(E_siteid)) WHERE ROWNUM=1;
        ELSE
            IF E_flagin=0 THEN
                E_ID := 'VPARDEFAUT';
            ELSE
                E_ID := NULL;
            END IF;
        END IF;
    END IF;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_NATURE(
E_flagin INT,
E_champctrl IN varchar2,
 E_nature IN VARCHAR2,
 E_abrege IN VARCHAR2,
 E_tvisite VARCHAR2,
 E_interdit VARCHAR2,
 E_ID out VARCHAR2
)
IS
 flag VARCHAR2(14);
 myid VARCHAR2(14);
 interd VARCHAR2(1);
 TMP INT;
BEGIN
    E_ID:= null;
    SELECT COUNT(*) INTO TMP FROM NATURE WHERE NATUREID= E_nature;
    IF TMP>0 THEN
        SELECT NATUREID INTO E_ID FROM nature WHERE natureid = E_nature and rownum=1;
    END IF;
    IF E_ID IS NOT NULL THEN
        E_ID := E_nature + ',0,0';
    ELSE
        IF (E_nature IS NULL) OR LTRIM(E_nature) is null THEN
            E_ID := 'VPARDEFAUT,0,0';
        ELSE
            --nature1 := UPPER(nature1);
            SELECT COUNT(*) INTO TMP FROM NATURE WHERE UPPER(libelle) =  UPPER(E_nature);
            IF TMP>0 THEN
                SELECT NATUREID INTO E_ID FROM nature WHERE UPPER(libelle) =  UPPER(E_nature) and rownum=1;
            END IF;
            IF E_ID IS NOT NULL THEN
                SELECT natureid INTO E_ID FROM nature WHERE libelle = UPPER(E_nature) AND ROWNUM = 1;
                E_ID := E_ID || ',0,0';
            ELSE
            --INSERT INTO SEQ_myid(libelle) VALUES ('OK');
                SELECT SEQ_IDENTITY.nextval INTO myid FROM DUAL ;
                SELECT SUBSTR(VERSION, 1, 3) INTO FLAG FROM VERSION_SFW WHERE ROWNUM = 1;
                E_ID := flag || myid;
                interd := E_interdit;
                IF (interd IS NULL) OR (LTRIM(interd) IS NULL) THEN
                    interd := '0';
                END IF;
                INSERT INTO nature(natureid, libelle,abrege,tvisite, interdit, debutinterdit, fininterdit, datecreation, datemaj) VALUES(E_ID, UPPER(E_nature),E_abrege,E_tvisite,interd, TRUNC(SYSDATE), SYSDATE + 36525, SYSDATE, SYSDATE);
                COMMIT;
                E_ID := E_ID || ',1,0';
            END IF;
        END IF;
    END IF;
END;
/

COMMIT;

CREATE OR REPLACE PROCEDURE PS_PAYS(
   E_flagin INT,
    E_champctrl IN varchar2,
    E_libelle VARCHAR2,
    E_libellegr VARCHAR2,
    E_libelleus VARCHAR2,
    E_nationalite VARCHAR2,
    E_codeiso1 VARCHAR2,
    E_codeiso2 VARCHAR2,
    E_codeiso3 VARCHAR2,
    E_indicatif VARCHAR2,
    E_shortlib VARCHAR2,
    E_devise VARCHAR2,
    E_deviselibelle VARCHAR2,
    E_interdit VARCHAR2,
    E_debutinterdit DATE,
    E_fininterdit DATE,
    E_enquete1 VARCHAR2,
    E_statut1 VARCHAR2,
    E_enquete2 VARCHAR2,
    E_statut2 VARCHAR2,
    E_enquete3 VARCHAR2,
    E_statut3 VARCHAR2,
    E_ID OUT VARCHAR2
)
IS
 flag VARCHAR2(14);
 myid VARCHAR2(14);
 TMP INT;
BEGIN
    SELECT COUNT(*) INTO TMP FROM PAYS WHERE PAYSID = E_libelle;
    IF TMP>0 THEN
        SELECT PAYSID INTO E_ID FROM PAYS WHERE PAYSID = E_libelle  and rownum=1;
        E_ID := E_libelle ||',0,0';
    ELSE
        IF (E_libelle IS NULL) OR LTRIM(E_libelle) IS NULL THEN
            E_ID := 'VPARDEFAUT,0,0';
        ELSE
            SELECT COUNT(*) INTO TMP FROM PAYS WHERE UPPER(libelle) = UPPER(E_libelle);
            IF TMP>0 THEN
                SELECT PAYSID INTO E_ID FROM pays WHERE UPPER(libelle) = UPPER(E_libelle) AND ROWNUM=1;
                UPDATE pays SET libelle = UPPER(E_libelle), libellegr = E_libellegr, libelleus = E_libelleus, nationalite = E_nationalite, codeiso2 = E_codeiso2, codeiso3 = E_codeiso3, indicatif = E_indicatif, deviselibelle = E_deviselibelle, datemaj = SYSDATE WHERE paysid = E_ID;
                COMMIT;
                E_ID := E_ID || ',0,1';
            ELSE
                SELECT COUNT(*) INTO TMP FROM PAYS  WHERE UPPER(NATIONALITE) = UPPER(E_nationalite);
                IF TMP>0 THEN
                    SELECT PAYSID INTO E_ID FROM pays  WHERE UPPER(nationalite) = UPPER(E_nationalite) AND ROWNUM = 1;
                    E_ID := E_ID || ',0,0';
                ELSE
                    SELECT COUNT(*) INTO TMP  FROM PAYS  WHERE UPPER(libelle) ='INCONNU';
                    IF TMP>0 THEN
                        SELECT PAYSID INTO E_ID FROM pays WHERE UPPER(libelle) ='INCONNU' AND ROWNUM = 1;
                        E_ID := E_ID || ',0,0';
                    ELSE
                        IF E_flagin=1  THEN
                        --INSERT INTO SEQ_IDENTITY(libelle) VALUES ('OK');
                            SELECT SEQ_IDENTITY.nextval INTO myid FROM DUAL ;
                            SELECT SUBSTR(VERSION, 1, 3) INTO FLAG FROM VERSION_SFW WHERE ROWNUM = 1;
                            E_ID := flag || myid;
                            INSERT INTO pays (paysid, libelle, libellegr, libelleus, nationalite, codeiso1,codeiso2, codeiso3, indicatif, shortlib,devise,deviselibelle,interdit, debutinterdit, fininterdit, enquete1,statut1,enquete2,statut2,enquete3,statut3,datecreation, datemaj)
                            VALUES(E_ID, E_libelle, E_libellegr,E_libelleus, E_nationalite, E_codeiso1,E_codeiso2, E_codeiso3,E_indicatif,E_shortlib,E_devise,E_deviselibelle,0, E_debutinterdit, E_fininterdit, E_enquete1,E_statut1,E_enquete2,E_statut2,E_enquete3,E_statut3,SYSDATE,SYSDATE);

                            COMMIT;
                            E_ID := E_ID || ',1,0';
                        ELSE
                            E_ID:='VPARDEFAUT,0,0';
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;
    END IF;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_VILLE(
    E_flagin INT,
    E_champctrl VARCHAR2,
    E_codepostal VARCHAR2,
    E_phonkey IN VARCHAR2,
    E_ville IN VARCHAR2,
    E_paysid IN VARCHAR2,
    E_ID OUT VARCHAR2
    )
IS
    idpays VARCHAR2(14);
    flag VARCHAR2(14);
    myid VARCHAR2(14);
    TMP INT;
    nbinsert INT;
    nbupdate INT;
    datejour DATE;

BEGIN
    datejour:=SYSDATE;
    nbinsert:=0;
    nbupdate:=0;
    SELECT COUNT(*) INTO TMP FROM VILLE WHERE CODEVILLE=E_ville;
    IF TMP>0 THEN
        E_ID := E_ville || ',0,0';
    ELSE
        IF (E_ville IS NULL) OR (LTRIM(E_ville) IS NULL) THEN
            E_ID := '0,0,0';
        ELSE
            SELECT COUNT(*) INTO TMP FROM ville WHERE UPPER(ville) = UPPER(E_ville) AND codepostal = E_codepostal ;
            IF TMP>0 THEN
                SELECT * INTO E_ID FROM (SELECT codeville FROM ville WHERE UPPER(ville) = UPPER(E_ville) AND codepostal = E_codepostal) WHERE ROWNUM=1;

                   PS_PAYS(0,'',E_paysid, E_paysid,'',E_paysid, E_paysid,'','','','','','','',datejour,datejour,'','','','','','',idpays);

                nbinsert:=nbinsert+CAST(split(idpays,2,',') AS int) ;
                nbupdate:=nbupdate+CAST(split(idpays,3,',') AS int) ;
                idpays := Split(idpays,1,',') ;

                UPDATE ville SET paysid = idpays, datemaj = SYSDATE WHERE codeville = E_ID;
                COMMIT;
                E_ID := E_ID || ',' || TO_CHAR(nbinsert) || ',' || TO_CHAR(nbupdate + 1) ;
            ELSE
                PS_PAYS(0,'',E_paysid, E_paysid,'',E_paysid, E_paysid,'','','','','','','',datejour,datejour,'','','','','','',idpays);
                --PS_PAYS(0,paysE_ID, paysE_ID, '', paysE_ID, '', '', '', idpays);

                nbinsert:=nbinsert+CAST(split(idpays,2,',') AS int) ;
                nbupdate:=nbupdate+CAST(split(idpays,3,',') AS int) ;
                idpays := Split(idpays,1,',') ;

                SELECT SEQ_IDENTITY.nextval INTO myid FROM DUAL ;
                SELECT SUBSTR(VERSION, 1, 3) INTO FLAG FROM VERSION_SFW WHERE ROWNUM = 1;
                E_ID := flag || myid;

                INSERT INTO ville(codeville, ville, codepostal, paysid,phonkey, datecreation, datemaj) VALUES(E_ID, UPPER(E_ville), E_codepostal, idpays,E_phonkey, SYSDATE, SYSDATE);
                COMMIT;
                 E_ID := E_ID || ',' || TO_CHAR(nbinsert + 1) || ',' || TO_CHAR(nbupdate);
            END IF;
        END IF;
    END    IF;
END;
/

COMMIT;


CREATE OR REPLACE PROCEDURE PS_SOCIETE(
 E_flagin INT,
 E_champctrl VARCHAR2,
 E_natureid IN  varchar2,
 E_nom IN OUT VARCHAR2,
 E_siret IN VARCHAR2,
 E_departement IN VARCHAR2,
 E_adresse2 IN VARCHAR2,
 E_cp IN VARCHAR2,
 E_ville IN VARCHAR2,
 E_pays IN VARCHAR2,
 E_province IN varchar2,
 E_telephone IN varchar2,
 E_fax IN varchar2,
 E_email IN varchar2,
 E_web IN varchar2,
 E_isresidant IN varchar2,

 E_ID OUT varchar2)
IS
 nbupdate int;
 nbinsert int;
 flag VARCHAR2(14);
 myid VARCHAR2(14);
 TMP  int;
 locid VARCHAR2(40);
 interdit NUMBER;
 externalid VARCHAR2(24);
BEGIN
    interdit:= 0;
    externalid:= 'VPARDEFAUT';
   nbupdate :=0;
    nbinsert :=0;
    SELECT count(*) INTO TMP FROM societe WHERE societeid = E_nom AND ISRESIDANT=E_isresidant;
    IF TMP>0 THEN
        SELECT SOCIETEID INTO E_ID FROM SOCIETE WHERE SOCIETEID=E_nom AND ISRESIDANT=E_isresidant AND ROWNUM=1;
        E_ID:= E_ID ||',0,0';
    ELSE
        IF (E_nom IS NULL) OR LTRIM(E_nom) IS NULL THEN
            E_ID := 'VPARDEFAUT,0,0';
        ELSE
            --E_nom := UPPER(E_nom);
            PS_NATURE (0,'',E_natureid,'','','',locid);

            nbupdate := nbupdate + CAST( Split(locid,3,',')  as int);
            nbinsert := nbinsert + CAST( Split(locid,2,',')  as int);
            locid := Split(locid,1,',') ;

            SELECT count(*) INTO TMP FROM societe WHERE UPPER(nom) = UPPER(E_nom) AND ISRESIDANT=E_isresidant ;
            IF TMP>0 THEN
                SELECT * INTO E_ID FROM( SELECT societeid FROM societe WHERE UPPER(nom) = UPPER(E_nom) AND ISRESIDANT=E_isresidant) WHERE ROWNUM=1;
                UPDATE societe SET siret = E_siret, departement = E_departement, adresse = E_adresse2, cp = E_cp, ville = E_ville, pays = E_pays, natureid = locid, telephone = E_telephone, fax = E_fax, email = E_email, web = E_web,province = E_province,isresidant = E_isresidant
                WHERE societeid = E_ID;

                E_ID := E_ID || ',' || TO_CHAR(nbinsert) || ',' || TO_CHAR(nbupdate+1);
                COMMIT;
            ELSE
                    SELECT SEQ_IDENTITY.nextval INTO myid FROM DUAL ;
                    SELECT SUBSTR(VERSION, 1, 3) INTO FLAG FROM VERSION_SFW WHERE ROWNUM = 1;
                    E_ID := flag || myid;
                    INSERT INTO societe(societeid, nom, interdit, isresidant,externalid,debutinterdit, fininterdit, datecreation, datemaj,fax,email,web,natureid,adresse2,cp,ville,pays,province,telephone)
                    VALUES(E_ID, E_nom, interdit,E_isresidant,'VPARDEFAUT', TRUNC(SYSDATE), SYSDATE + 36525, SYSDATE, SYSDATE,E_fax,E_email,E_web,locid,E_adresse2,E_cp,E_ville,E_pays,E_province,E_telephone);
                    nbinsert:=nbinsert+1;
                    E_ID := E_ID || ',' || TO_CHAR(nbinsert) || ',' || TO_CHAR(nbupdate);
                    COMMIT;
            END IF;
        END IF;
    END IF;
END ;
/
COMMIT;



CREATE OR REPLACE PROCEDURE PS_DEPARTEMENT(
E_flagin INT,
E_champctrl VARCHAR2,
E_societeid IN VARCHAR2,
E_libelle IN VARCHAR2,
E_ID OUT VARCHAR2
)
IS
nbupdate int;
nbinsert int;
 flag VARCHAR2(14);
 myid VARCHAR2(14);
idsociete VARCHAR2(35);
libel VARCHAR2(40);
TMP INT;
BEGIN
    nbupdate := 0;
    nbinsert := 0;
    SELECT COUNT(*) INTO TMP FROM DEPARTEMENT    WHERE  DEPTID = E_libelle ;
    IF TMP>0 THEN
        SELECT DEPTID INTO E_ID    FROM DEPARTEMENT WHERE DEPTID = E_libelle and rownum=1;
        E_ID := E_ID||',1,0';
    ELSE
        idsociete := E_societeid;
        PS_SOCIETE(0,'','',idsociete,'','','','','','','','','','','','',idsociete);
        nbupdate := nbupdate + CAST( Split(idsociete,3,',') as int);
        nbinsert := nbinsert + CAST( Split(idsociete,2,',') as int);
        idsociete := Split(idsociete,1,',');
        libel:=E_libelle;
        --idsociete:='VPARDEFAUT';
        SELECT COUNT(*) INTO TMP FROM DEPARTEMENT WHERE UPPER(LIBELLE) = UPPER(E_libelle) AND SOCIETEID=idsociete;
        IF TMP>0 THEN
            SELECT * INTO E_ID FROM (SELECT DEPTID FROM DEPARTEMENT WHERE UPPER(LIBELLE) = UPPER(E_libelle) AND SOCIETEID=idsociete ) WHERE ROWNUM=1;
            E_ID := E_ID || ',' || TO_CHAR(nbinsert) || ',' || TO_CHAR(nbupdate);
        ELSE
             IF (libel IS NOT NULL) OR ((E_libelle IS NOT NULL) AND LTRIM(E_libelle) IS NOT NULL) THEN
                SELECT SEQ_IDENTITY.nextval INTO myid FROM DUAL ;
                SELECT SUBSTR(VERSION, 1, 3) INTO FLAG FROM VERSION_SFW WHERE ROWNUM = 1;
                E_ID := flag || myid;
                INSERT INTO DEPARTEMENT (DEPTID,LIBELLE,SOCIETEID,DATECREATION,DATEMAJ) VALUES (E_ID,libel,idsociete,SYSDATE,SYSDATE);
                COMMIT;
                nbinsert:=nbinsert+1;
                E_ID := E_ID || ',' || TO_CHAR(nbinsert) || ',' || TO_CHAR(nbupdate);
            ELSE
                E_ID:='VPARDEFAUT';
                E_ID := E_ID || ',' || TO_CHAR(nbinsert) || ',' || TO_CHAR(nbupdate);
            END IF;
        END IF;
    END IF;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_SERVICE(
E_flagin INT,
E_champctrl VARCHAR2,
E_deptid IN VARCHAR2,
E_libelle IN VARCHAR2,
E_ID OUT VARCHAR2
)
IS
nbupdate int;
nbinsert int;
flag VARCHAR2(14);
myid VARCHAR2(14);
iddepartement VARCHAR2(40);
TMP INT;
BEGIN
    nbinsert:=0;
    nbupdate:=0;
    SELECT COUNT(*) INTO TMP FROM SERVICE S,DEPARTEMENT D WHERE S.DEPTID = D.DEPTID AND SERVICEID = E_libelle AND (S.DEPTID = E_deptid or D.LIBELLE = E_deptid);
    IF TMP>0 THEN
        E_ID := E_libelle || ',0,0';
    ELSE

        PS_DEPARTEMENT(0,'','',E_deptid,iddepartement);
        nbupdate := nbupdate + CAST( Split(iddepartement,3,',') as int);
        nbinsert := nbinsert + CAST( Split(iddepartement,2,',') as int);
        iddepartement := Split(iddepartement,1,',');

        SELECT COUNT(*) INTO TMP FROM SERVICE WHERE UPPER(LIBELLE) = UPPER(E_libelle) AND DEPTID=iddepartement;
        IF TMP>0 THEN
            SELECT SERVICEID INTO E_ID    FROM SERVICE WHERE UPPER(LIBELLE) = UPPER(E_libelle) AND DEPTID=iddepartement AND ROWNUM=1;
            E_ID := E_ID ||',' || TO_CHAR(nbinsert) || ',' || TO_CHAR(nbupdate);
        ELSE
             IF (E_libelle IS NOT NULL) AND LTRIM(E_libelle) IS NOT NULL THEN
                SELECT SEQ_IDENTITY.nextval INTO myid FROM DUAL ;
                SELECT SUBSTR(VERSION, 1, 3) INTO FLAG FROM VERSION_SFW WHERE ROWNUM = 1;
                E_ID := flag || myid;
                INSERT INTO SERVICE (SERVICEID,LIBELLE,DEPTID,DATECREATION,DATEMAJ) VALUES (E_ID,E_libelle,iddepartement,SYSDATE,SYSDATE);
                COMMIT;
                nbinsert:=nbinsert+1;
                E_ID := E_ID || ',' || TO_CHAR(nbinsert) || ',' || TO_CHAR(nbupdate);
            ELSE
                E_ID := 'VPARDEFAUT'||',' || TO_CHAR(nbinsert) || ',' || TO_CHAR(nbupdate);
            END IF;
        END IF;
    END IF;

END;
/

COMMIT;

CREATE OR REPLACE PROCEDURE PS_BATIMENT(
E_flagin INT,
E_champctrl VARCHAR2,
E_siteid IN VARCHAR2,
E_LIBELLE IN VARCHAR2,
E_ADRESSE varchar2,
E_ID OUT VARCHAR2
)
as
flag VARCHAR2(14);
myid VARCHAR2(14);
idsite VARCHAR2(18);
TMP INT;
nbupdate int;
nbinsert int;
E_blobADRESSE blob;
BEGIN
SELECT COUNT(*) INTO TMP FROM BATIMENT     WHERE BATIMENTID = E_LIBELLE ;
    IF TMP>0 THEN
        SELECT BATIMENTID INTO E_ID    FROM BATIMENT WHERE BATIMENTID = E_LIBELLE and rownum=1;
        E_ID := E_ID ||',0,0';
    ELSE
        idsite := E_siteid;

        PS_SITE(0,E_siteid,idsite);

        SELECT COUNT(*) INTO TMP FROM BATIMENT WHERE UPPER(LIBELLE) = UPPER(E_LIBELLE) AND SITEID=idsite;
        IF TMP>0 THEN
            SELECT * INTO E_ID FROM (SELECT BATIMENTID FROM BATIMENT WHERE UPPER(LIBELLE )= UPPER(E_LIBELLE) AND SITEID=idsite) WHERE ROWNUM=1;
            E_ID := E_ID || ',0,0';
        ELSE
             IF (E_LIBELLE IS NOT NULL) AND (LTRIM(E_LIBELLE) IS NOT NULL) THEN
                SELECT SEQ_IDENTITY.nextval INTO myid FROM DUAL ;
                SELECT SUBSTR(VERSION, 1, 3) INTO FLAG FROM VERSION_SFW WHERE ROWNUM = 1;
                E_ID := flag || myid;

                --E_blobADRESSE := TO_BLOB(E_ADRESSE);

                INSERT INTO BATIMENT (BATIMENTID,LIBELLE,SITEID,DATECREATION,DATEMAJ,ADRESSE) VALUES (E_ID,E_LIBELLE,idsite,SYSDATE,SYSDATE,E_ADRESSE);
                COMMIT;
                E_ID := E_ID || ',1,0';
            ELSE
                E_ID := 'VPARDEFAUT,0,0';
            END IF;
        END IF;
    END IF;

END;
/

COMMIT;

CREATE OR REPLACE PROCEDURE PS_ETAGE(
E_flagin INT,
E_champctrl VARCHAR2,
E_batimentid IN VARCHAR2,
E_libelle IN VARCHAR2,
E_ID OUT VARCHAR2
)
IS
nbupdate int;
nbinsert int;
flag VARCHAR2(14);
myid VARCHAR2(14);

TMP INT;
BEGIN
    nbinsert:=0;
    nbupdate:=0;
    SELECT COUNT(*) INTO TMP FROM ETAGES WHERE ETAGEID = E_libelle ;
    IF TMP>0 THEN
        E_ID := E_libelle || ',0,0';
    ELSE
        SELECT COUNT(*) INTO TMP FROM ETAGES WHERE UPPER(ETAGE) = UPPER(E_libelle) AND BATIMENTID=E_batimentid;
        IF TMP>0 THEN
            SELECT * INTO E_ID FROM (SELECT ETAGEID FROM ETAGES WHERE UPPER(ETAGE) = UPPER(E_libelle) AND BATIMENTID=E_batimentid) WHERE ROWNUM=1;
            E_ID := E_ID ||',' || TO_CHAR(nbinsert) || ',' || TO_CHAR(nbupdate);
        ELSE
             IF (E_libelle IS NOT NULL) AND LTRIM(E_libelle) IS NOT NULL  THEN
                SELECT SEQ_IDENTITY.nextval INTO myid FROM DUAL ;
                SELECT SUBSTR(VERSION, 1, 3) INTO FLAG FROM VERSION_SFW WHERE ROWNUM = 1;
                E_ID := flag || myid;
                INSERT INTO ETAGES (ETAGEID,ETAGE,BATIMENTID,DATECREATION,DATEMAJ) VALUES (E_ID,E_libelle,E_batimentid,SYSDATE,SYSDATE);
                COMMIT;
                nbinsert:=nbinsert+1;
                E_ID := E_ID || ',' || TO_CHAR(nbinsert) || ',' || TO_CHAR(nbupdate);
            ELSE
                E_ID := 'VPARDEFAUT'||',' || TO_CHAR(nbinsert) || ',' || TO_CHAR(nbupdate);
            END IF;
        END IF;
    END IF;

END;
/

COMMIT;

CREATE OR REPLACE PROCEDURE PS_SALLE(
E_flagin INT,
E_champctrl VARCHAR2,
E_siteid IN VARCHAR2,
E_batimentid IN VARCHAR2,
E_nosalle IN VARCHAR2,
E_Telephone IN VARCHAR2,
E_porte_cle IN VARCHAR2,
E_Porte_option IN VARCHAR2,
E_LIBELLE IN VARCHAR2,
E_ID OUT VARCHAR2
)
as
flag VARCHAR2(14);
myid VARCHAR2(14);
idsite VARCHAR2(18);
idbatiment VARCHAR2(20);
libbatiment VARCHAR2(35);
libsite VARCHAR2(35);
mysortorder NUMBER;
mynosalle VARCHAR2(15);
TMP INT;
nbupdate int;
nbinsert int;
BEGIN
    SELECT COUNT(*) INTO TMP FROM SALLE WHERE CODESALLE = E_LIBELLE ;
    IF TMP>0 THEN
        SELECT CODESALLE INTO E_ID    FROM SALLE WHERE CODESALLE = E_LIBELLE and rownum=1;
        E_ID := E_ID ||',0,0';
    ELSE
        idsite := E_siteid;
        PS_SITE(0,E_siteid,idsite);
        IF idsite='VPARDEFAUT' THEN
            SELECT LIBELLE INTO libsite FROM SITE WHERE SITEID='VPARDEFAUT' and rownum=1;
        END IF;
        PS_BATIMENT(0,'',idsite,E_batimentid,'',idbatiment);
        nbupdate := nbupdate + CAST( Split(idbatiment,3,',') as int);
        nbinsert := nbinsert + CAST( Split(idbatiment,2,',') as int);
        idbatiment := SUBSTR(Split(idbatiment,1,','),1,14);
        IF idbatiment='VPARDEFAUT' THEN
            SELECT LIBELLE INTO libbatiment FROM BATIMENT WHERE BATIMENTID='VPARDEFAUT' and rownum=1;
        END IF;
        SELECT COUNT(*) INTO TMP FROM SALLE WHERE UPPER(LIBELLE) = UPPER(E_LIBELLE) AND BATIMENTID=idbatiment AND SITEID=idsite;
        IF TMP>0 THEN
            SELECT * INTO E_ID FROM (SELECT CODESALLE FROM SALLE WHERE UPPER(LIBELLE )= UPPER(E_LIBELLE) AND BATIMENTID=idbatiment AND SITEID=idsite) WHERE ROWNUM=1;
            E_ID := E_ID || ',0,0';
        ELSE
            IF (E_LIBELLE IS NOT NULL) AND (LTRIM(E_LIBELLE) IS NOT NULL) THEN
                SELECT SEQ_IDENTITY.nextval INTO myid FROM DUAL ;
                SELECT SUBSTR(VERSION, 1, 3) INTO FLAG FROM VERSION_SFW WHERE ROWNUM = 1;
                E_ID := flag || myid;
                SELECT NVL(MAX(SORTORDER),0)+1 INTO mysortorder FROM SALLE ;
                IF E_nosalle IS NULL THEN
                    SELECT NVL(MAX(SORTORDER),0)+1 INTO mynosalle FROM SALLE ;
                ELSE
                   mynosalle:=E_nosalle ;
                END IF;
                INSERT INTO SALLE (CODESALLE,LIBELLE,SITEID,BATIMENTID,SORTORDER,NOSALLE,TELEPHONE,PORTE_CLE,PORTE_OPTION,DATECREATION,DATEMAJ) VALUES (E_ID,E_LIBELLE,idsite,idbatiment,mysortorder,mynosalle,E_telephone,E_porte_cle,E_porte_option,SYSDATE,SYSDATE);
                COMMIT;
                INSERT INTO AMENAGSALLE (CODESALLE,CODEAMENAGEMENT,DATEMAJ,DATECREATION) VALUES(E_ID,'VPARDEFAUT',SYSDATE,SYSDATE);
                COMMIT;
                    E_ID := E_ID || ',1,0';
            ELSE
                    E_ID := 'VPARDEFAUT,0,0';
            END IF;
        END IF;
    END IF;

END;
/

COMMIT;

CREATE OR REPLACE PROCEDURE PS_BUREAUX(
E_flagin INT,
E_champctrl VARCHAR2,
E_etageid IN VARCHAR2,
E_bureau IN VARCHAR2,
E_ID OUT VARCHAR2
)
IS
nbupdate int;
nbinsert int;
flag VARCHAR2(14);
myid VARCHAR2(14);

TMP INT;
BEGIN
 nbinsert:=0;
 nbupdate:=0;
 SELECT COUNT(*) INTO TMP FROM BUREAUX WHERE BUREAUID = E_bureau ;
 IF TMP>0 THEN
  E_ID := E_bureau || ',0,0';
 ELSE
  SELECT COUNT(*) INTO TMP FROM BUREAUX WHERE UPPER(BUREAU) = UPPER(E_bureau) AND ETAGEID=E_etageid;
  IF TMP>0 THEN
   SELECT * INTO E_ID FROM (SELECT BUREAUID FROM BUREAUX WHERE UPPER(BUREAU) = UPPER(E_bureau) AND ETAGEID=E_etageid) WHERE ROWNUM=1;
   E_ID := E_ID ||',' || TO_CHAR(nbinsert) || ',' || TO_CHAR(nbupdate);
  ELSE
    IF ((E_bureau IS NOT NULL)) AND (LTRIM(E_bureau) IS NOT NULL) THEN
       SELECT SEQ_IDENTITY.nextval INTO myid FROM DUAL ;
       SELECT SUBSTR(VERSION, 1, 3) INTO FLAG FROM VERSION_SFW WHERE ROWNUM = 1;
       E_ID := flag || myid;
       INSERT INTO BUREAUX (BUREAUID,BUREAU,ETAGEID,DATECREATION,DATEMAJ) VALUES (E_ID,E_bureau,E_etageid,SYSDATE,SYSDATE);
       COMMIT;
       nbinsert:=nbinsert+1;
       E_ID := E_ID || ',' || TO_CHAR(nbinsert) || ',' || TO_CHAR(nbupdate);
    ELSE
       E_ID := 'VPARDEFAUT'||',' || TO_CHAR(nbinsert) || ',' || TO_CHAR(nbupdate);
    END IF;
  END IF;
 END IF;

END;
/

COMMIT ;

create or replace PROCEDURE PS_CIVILITE(
 E_flagin INT,
 E_champctrl IN varchar2,
 E_civilite IN  VARCHAR2,
 E_libellecourt IN VARCHAR2,
 E_ID OUT varchar2
)

IS
 flag VARCHAR2(14);
 myid VARCHAR2(14);
 TMP INT;
BEGIN
    E_ID:=null;
    if(not(E_civilite is null and E_libellecourt is null)) then
        --LENGTH(TRIM(TRANSLATE(civilite, ' +-.0123456789', ' '))) retourn null si civilite est numéric
        IF LENGTH(TRIM(TRANSLATE(E_civilite, ' +-.0123456789', ' '))) is null THEN
            SELECT COUNT(*)  INTO TMP FROM civilite WHERE CODECIVILITE = TO_NUMBER(E_civilite);
            IF TMP>0 THEN
                SELECT TO_CHAR(CODECIVILITE) INTO E_ID FROM civilite WHERE CODECIVILITE = To_NUMBER(E_civilite) and rownum=1;
                E_ID := E_civilite || ',0,0';
            END IF;
        ELSE
            IF ((E_civilite IS NULL) OR LTRIM(E_civilite) is null) AND ((E_libellecourt IS NULL) OR LTRIM(E_libellecourt) is null) THEN
                E_ID := '0,0,0';
            ELSE
                SELECT COUNT(*) INTO TMP FROM civilite  WHERE UPPER(civilite) =UPPER(E_civilite)  AND UPPER(libellecourt) = UPPER(E_libellecourt);
                IF TMP>0 THEN
                    SELECT TO_CHAR(CODECIVILITE) INTO E_ID FROM civilite  WHERE UPPER(civilite) =UPPER(E_civilite)  AND UPPER(libellecourt) = UPPER(E_libellecourt) and rownum=1;
                END IF;
                IF E_ID IS NOT NULL THEN
                    SELECT TO_CHAR(CODECIVILITE) INTO E_ID FROM civilite WHERE (UPPER(libellecourt) = UPPER(E_civilite) OR UPPER(libellecourt) = UPPER(E_libellecourt)) AND ROWNUM = 1;
                    E_ID := E_ID || ',0,0';
                ELSE
                    SELECT COUNT(*) INTO TMP FROM civilite WHERE UPPER(civilite) = UPPER(E_civilite);
                    IF TMP>0 THEN
                        SELECT TO_CHAR(CODECIVILITE) INTO E_ID FROM civilite WHERE UPPER(civilite) = UPPER(E_civilite) and rownum=1;
                    END IF;
                    IF E_ID IS NOT NULL THEN
                        SELECT TO_CHAR(codecivilite) INTO E_ID FROM civilite WHERE UPPER(civilite) = UPPER(E_civilite) AND ROWNUM = 1;
                        UPDATE civilite SET libellecourt = UPPER(E_libellecourt), datemaj = SYSDATE WHERE TO_CHAR(CODECIVILITE) = E_ID;
                        COMMIT;
                        E_ID:=E_ID || ',0,1';
                    ELSE
                        SELECT COUNT(*) INTO TMP FROM civilite WHERE UPPER(libellecourt) = UPPER(E_libellecourt);
                        IF TMP>0 THEN
                            SELECT TO_CHAR(CODECIVILITE) INTO E_ID FROM civilite WHERE UPPER(libellecourt) = UPPER(E_libellecourt) AND ROWNUM = 1;
                            UPDATE civilite SET civilite = UPPER(E_civilite), datemaj = SYSDATE WHERE TO_CHAR(CODECIVILITE) = E_ID;
                            COMMIT;
                            E_ID:=E_ID || ',0,1';
                        ELSE
                            SELECT TO_CHAR((NVL(MAX(CODECIVILITE),0))+1) INTO E_ID FROM CIVILITE;
                            INSERT INTO civilite(codecivilite, civilite, libellecourt, datecreation, datemaj) VALUES(E_ID, UPPER(E_civilite), UPPER(E_libellecourt), SYSDATE, SYSDATE);
                            COMMIT;
                            E_ID:=E_ID || ',1,0';
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;
    ELSE
        E_ID:='0,0,0';
    END IF;
END;
/

COMMIT;


CREATE OR REPLACE PROCEDURE PS_FONCTION(
 E_flagin INT,
 E_champctrl IN varchar2,
 E_fonction IN VARCHAR2,
 E_ID out varchar2
)
IS
 flag VARCHAR2(14);
 myid VARCHAR2(14);
 TMP INT;
BEGIN
     E_ID:=null;

       SELECT COUNT(*) INTO TMP FROM fonction WHERE TO_CHAR(codefonction) = E_fonction  and (E_FONCTION IS NOT NULL AND LTRIM(E_FONCTION) IS NOT NULL) ;

        IF TMP>0 THEN
            E_ID := E_fonction || '0,0';
        ELSE
            IF (E_fonction IS NULL) OR LTRIM(E_fonction) IS NULL THEN
                E_ID := '0,0,0';
            ELSE
                SELECT COUNT(*) INTO TMP FROM FONCTION  WHERE UPPER(libelle) = UPPER(E_fonction);
                IF TMP>0 THEN
                    SELECT TO_CHAR(codefonction) INTO E_ID   FROM fonction   WHERE UPPER(libelle) = UPPER(E_fonction) and rownum=1;
                    E_ID:=E_ID||',0,0';
                ELSE
                    SELECT SEQ_IDENTITY.nextval INTO myid FROM DUAL ;
                    SELECT SUBSTR(VERSION, 1, 3) INTO FLAG FROM VERSION_SFW WHERE ROWNUM = 1;
                    E_ID := flag || myid;
                    INSERT INTO FONCTION(codefonction, libelle, datecreation, datemaj)    VALUES(TO_NUMBER(E_ID), E_fonction, SYSDATE, SYSDATE);
                    COMMIT;
                    E_ID := E_ID || ',1,0';
                END IF;
            END IF;
        END IF;

END;
/

COMMIT;


CREATE OR REPLACE PROCEDURE PS_SECRETARIAT(

    E_IDRES VARCHAR2,
    E_IDRESAJOINDRE VARCHAR2,
    E_insertion IN OUT INT
)
IS

    resid VARCHAR2(14);
    TMP INT;
BEGIN
    resid:=null;
    SELECT COUNT(*) INTO TMP FROM (SELECT residantid FROM SECRETARIAT WHERE RESIDANTID = E_IDRES AND RESIDANTID2 = E_IDRESAJOINDRE) WHERE ROWNUM = 1;
    IF TMP=0 THEN
        INSERT INTO SECRETARIAT(RESIDANTID,RESIDANTID2,RELATION,DATECREATION,DATEMAJ) VALUES(E_IDRES,E_IDRESAJOINDRE,'A JOINDRE',SYSDATE,SYSDATE);
        COMMIT;
        E_insertion := E_insertion + 1;
    END IF;

END;
/

COMMIT;


CREATE OR REPLACE PROCEDURE PS_RESIDANTS
(   E_flagin IN INT,
    E_champctrl IN VARCHAR2,
    E_societe IN VARCHAR2,
    E_civilite IN VARCHAR2,
    E_nomjeunefille IN VARCHAR2,
    E_nom IN VARCHAR2,
    E_prenom IN VARCHAR2,
    E_fonction IN VARCHAR2,
    E_telephone IN VARCHAR2,
    E_email IN VARCHAR2,

    E_gsm IN VARCHAR2,
    E_fax IN VARCHAR2,
    E_matricule IN VARCHAR2,
    --E_photo IN VARCHAR2,
    E_persoadresse IN VARCHAR2,
    E_persocp IN VARCHAR2,
    E_persoville IN VARCHAR2,
    E_persoprovince IN VARCHAR2,
    E_persopays IN VARCHAR2,
    E_persotelephone IN VARCHAR2,

    E_thepassword IN VARCHAR2,
    E_thelogin IN VARCHAR2,
    E_site IN VARCHAR2,
    E_service IN VARCHAR2,
    E_departement IN VARCHAR2,
    E_batiment IN VARCHAR2,
    E_etage IN VARCHAR2,
    E_bureau IN VARCHAR2,
    E_codeacces IN VARCHAR2,
    E_boitepostale IN VARCHAR2,
    E_candidatmailing IN VARCHAR2,
    
    E_vip IN int,
    --Secrétariat
    E_matriculeAJ IN VARCHAR2,
    E_prenomAJ IN VARCHAR2,
    E_nomAJ IN VARCHAR2,
    E_telephoneAJ IN VARCHAR2,
    
    E_direction IN VARCHAR2,
    E_contrat IN VARCHAR2,    
    E_DEBUTINTERDIT VARCHAR2,
    E_FININTERDIT VARCHAR2,
    --Flag
    --E_flagsuppression VARCHAR2(1),
    E_refimportation IN VARCHAR2,
    E_usertype int,
    E_ID OUT VARCHAR2
)
IS

    flag VARCHAR2(14);
    myid VARCHAR2(14);
    E_societeid VARCHAR2(40);
    fonctionid VARCHAR2(50);
    departementid VARCHAR2(40);
    serviceid1 VARCHAR2(40);
    civiliteid VARCHAR2(18);
    natureid VARCHAR2(14);
    libcodeacces VARCHAR2(30);
    nationaliteid VARCHAR2(14);
    siteid1 VARCHAR2(14);
    vehiculeid VARCHAR2(14);
    ResIdAj VARCHAR2(14);
    locid VARCHAR2(14);
    nbupdate int;
    nbinsert int;
    TMP int;
    loc_thelogin VARCHAR2(50);
    loc_thepassword VARCHAR2(250);
    interdit VARCHAR2(1);
    habilitationvisite VARCHAR2(1);
    externalid VARCHAR2(24);
    listerouge VARCHAR2(1);
    isextern VARCHAR2(1);
    isresident VARCHAR2(1);
    planid VARCHAR2(14);
    batimentid1 VARCHAR2(20);
    etageid1 VARCHAR2(18);
    bureauid1 VARCHAR2(18);
    libnom VARCHAR2(35);
    libprenom VARCHAR2(35);
    libnomprenom VARCHAR2(70);
    libetage VARCHAR2(7);
    libbatiment VARCHAR2(60);
    libservice varchar(60);
    libsite varchar(35);
    libdepartement varchar2(40);
    libsociete varchar2(35);
    libfonction varchar2(50);
    libbureau varchar2(15);
    libcivilite varchar2(30);
    isactif varchar2(1);
    libmatricule varchar2(15);
    libnomjeunefille varchar2(35);
    libtelephone varchar2(20);
    libemail varchar2(150);
    libgsm varchar2(20);
    libfax varchar2(20);
    libphoto varchar2(150);
    libpersoadresse varchar2(150);
    libpersocp varchar2(9);
    libpersoville varchar2(50);
    libpersoprovince varchar2(50);
    libpersopays varchar2(35);
    libpersotelephone varchar2(20);
    libboitepostale varchar2(10);
    libcandidatmailing varchar2(2);
    libdirection varchar2(35);
	libcontrat varchar2(35);
    libusertype int;
    datedebutinterdit DATE;
    datefininterdit DATE;
    libvip int;
    TMP2 int;

BEGIN
    nbupdate := 0;
    nbinsert := 0;
        -- valeurs par défaut des champs dans residant
    isactif:='1';
    interdit:='0';
    habilitationvisite:='1';
    externalid:='VPARDEFAUT';
    listerouge:='0';
    isextern:='0';
    isresident:='1';
    planid:='VPARDEFAUT';

    -- Initiallisation
    libnom:=UPPER(E_nom);
    libprenom:=E_prenom;
    libnomprenom:=libnom||' '||libprenom;
    loc_thelogin:=E_thelogin;
    loc_thepassword:=E_thepassword;
    libmatricule:=E_matricule;
    libcivilite:=E_civilite;
    libfonction:=E_fonction;
    libsite:=E_site;
    libsociete:=E_societe;
    libdepartement:=E_departement;
    libservice:=E_service;
    libbatiment:=E_batiment;
    libetage:=E_etage;
    libbureau:=E_bureau;
    libpersopays:=E_persopays;
    libcodeacces:=E_codeacces;
    libnomjeunefille:=E_nomjeunefille;
    libtelephone:= E_telephone;
    libemail:=E_email;
    libgsm:=E_gsm;
    libfax:=E_fax;
    libpersoadresse:=E_persoadresse;
    libpersocp:=E_persocp;
    libpersoville:=E_persoville;
    libpersoprovince:=E_persoprovince;
    libpersopays:=E_persopays;
    libpersotelephone:=E_persotelephone;
    libboitepostale:=E_boitepostale;
    libcandidatmailing:=E_candidatmailing;
    libusertype:=E_usertype;
    libvip:=E_vip;
    libdirection:=E_direction;
	libcontrat:=E_contrat;
    IF loc_thelogin='##' THEN
        loc_thelogin:='';
    END IF;
    IF loc_thepassword='##' THEN
        loc_thepassword:='';
    END IF;
    IF libmatricule='##' THEN
        libmatricule:='';
    END IF;
    IF libcivilite='##' THEN
        libcivilite:='';
    END IF;
    IF libfonction='##' THEN
        libfonction:='';
    END IF;
    IF libsite='##' THEN
        libsite:='';
    END IF;
    IF libsociete='##' THEN
        libsociete:='';
    END IF;
    IF libdepartement='##' THEN
        libdepartement:='';
    END IF;
    IF libservice='##' THEN
        libservice:='';
    END IF;
    IF libbatiment='##' THEN
        libbatiment:='';
    END IF;
    IF libetage='##' THEN
        libetage:='';
    END IF;
    IF libbureau='##' THEN
        libbureau:='';
    END IF;
    IF libpersopays='##' THEN
        libpersopays:='';
    END IF;
    IF libemail='##' THEN
        libemail:='';
    END IF;
    IF libcodeacces='##' THEN
        libcodeacces:='';
    END IF;
    IF libdirection='##' THEN
        libdirection:='';
    END IF;
    IF E_DEBUTINTERDIT='##' THEN
        datedebutinterdit:=TO_DATE(TRUNC(SYSDATE),'DD/MM/YYYY');
    END IF;
    IF E_FININTERDIT='##' THEN
        datefininterdit:=TO_DATE(TRUNC(SYSDATE+36500),'DD/MM/YYYY');	
	END IF;
	IF libcontrat='##' THEN
        libcontrat:='';
    END IF;
    IF libpersopays IS NULL or LTRIM(libpersopays) IS NULL THEN
        SELECT LIBELLE INTO libpersopays FROM PAYS WHERE PAYSID='VPARDEFAUT';
    END IF;

    --
    IF loc_thelogin IS NULL THEN
        loc_thelogin:=libmatricule;
    END IF;
    IF loc_thepassword IS NULL THEN
        loc_thepassword:=libmatricule;
    END IF;
    IF loc_thelogin IS NULL THEN
        loc_thelogin:=UPPER(E_nom);
    END IF;
    IF loc_thepassword IS NULL THEN
        loc_thepassword:=E_prenom;
    END IF;
    IF loc_thelogin IS NULL THEN
        loc_thelogin:='XXX';
    END IF;
    IF loc_thepassword IS NULL THEN
        loc_thepassword:='XXX';
    END IF;
    IF libcandidatmailing='##' THEN
        libcandidatmailing:='';
    END IF;

    -- Civilite
    PS_CIVILITE (0,'',libcivilite,libcivilite, civiliteid);
    nbupdate := nbupdate + CAST( Split(civiliteid,3,',') as int);
    nbinsert := nbinsert + CAST( Split(civiliteid,2,',') as int);
    civiliteid := Split(civiliteid,1,',');

    IF civiliteid>-1 THEN
        SELECT CIVILITE INTO libcivilite FROM CIVILITE WHERE CODECIVILITE=civiliteid;
    END IF;
    -- Fonction

    PS_FONCTION (0,'',libfonction, fonctionid);
    nbupdate := nbupdate + CAST( Split(fonctionid,3,',') as int);
    nbinsert := nbinsert + CAST( Split(fonctionid,2,',') as int);
    fonctionid := Split(fonctionid,1,',');
    IF fonctionid='0' THEN
        SELECT LIBELLE INTO libfonction FROM FONCTION WHERE CODEFONCTION=0;
    END IF;
    -- Site
    PS_SITE (0,libsite,siteid1);

    SELECT LIBELLE INTO libsite FROM SITE WHERE SITEID=siteid1;

    -- Societe
    PS_SOCIETE (0,'','',libsociete,'','','','','','','1','','','','','1',E_societeid);
    nbupdate := nbupdate + CAST( Split(E_societeid,3,',') as int);
    nbinsert := nbinsert + CAST( Split(E_societeid,2,',') as int);

    E_societeid := Split(E_societeid,1,',');

    IF E_societeid='VPARDEFAUT' THEN
        SELECT NOM INTO libsociete FROM SOCIETE WHERE SOCIETEID='VPARDEFAUT';
    END IF;
    -- Departement
    PS_DEPARTEMENT(0,'',E_societeid,libdepartement,departementid);
    nbupdate := nbupdate + CAST( Split(departementid,3,',') as int);
    nbinsert := nbinsert + CAST( Split(departementid,2,',') as int);

    departementid := Split(departementid,1,',');

    IF departementid='VPARDEFAUT' THEN
       SELECT LIBELLE INTO libdepartement FROM DEPARTEMENT WHERE DEPTID='VPARDEFAUT';
    END IF;

    -- Service
    PS_SERVICE(0,'',departementid,libservice,serviceid1);
    nbupdate := nbupdate + CAST( Split(serviceid1,3,',') as int);
    nbinsert := nbinsert + CAST( Split(serviceid1,2,',') as int);

    serviceid1 := Split(serviceid1,1,',');

    IF serviceid1='VPARDEFAUT' THEN
        SELECT LIBELLE INTO libservice FROM SERVICE WHERE SERVICEID='VPARDEFAUT';
    END IF;
    -- Batiment
    PS_BATIMENT(0,'',siteid1,libbatiment,'',batimentid1);
    nbupdate := nbupdate + CAST( Split(batimentid1,3,',') as int);
    nbinsert := nbinsert + CAST( Split(batimentid1,2,',') as int);

    batimentid1 :=SUBSTR(Split(batimentid1,1,','),1,14);

    IF batimentid1='VPARDEFAUT' THEN
        SELECT LIBELLE INTO libbatiment FROM BATIMENT WHERE BATIMENTID='VPARDEFAUT';
    END IF;
    -- Etage
    PS_ETAGE(0,'',batimentid1,libetage,etageid1);
    nbupdate := nbupdate + CAST( Split(etageid1,3,',') as int);
    nbinsert := nbinsert + CAST( Split(etageid1,2,',') as int);

    etageid1 := Split(etageid1,1,',');
    IF etageid1='VPARDEFAUT' THEN
        SELECT ETAGE INTO libetage FROM ETAGES WHERE ETAGEID='VPARDEFAUT';
    END IF;
    -- bureau
    PS_BUREAUX(0,'',etageid1,libbureau,bureauid1);
    nbupdate := nbupdate + CAST( Split(bureauid1,3,',') as int);
    nbinsert := nbinsert + CAST( Split(bureauid1,2,',') as int);

    bureauid1 := Split(bureauid1,1,',');

    IF bureauid1='VPARDEFAUT' THEN
        SELECT BUREAU INTO libbureau FROM BUREAUX WHERE BUREAUID='VPARDEFAUT';
    END IF;

    IF (libnom IS NOT NULL) AND LTRIM(libnom) IS NOT NULL THEN

        SELECT COUNT(*) INTO TMP FROM RESIDANTS R WHERE
              CASE
                        WHEN  E_champctrl is null AND UPPER(NOMPRENOM)=UPPER(libnomprenom) THEN 1
                    WHEN  E_champctrl='NOMPRENOM' AND UPPER(NOMPRENOM)=UPPER(libnomprenom) THEN 1
                    WHEN  E_champctrl='MATRICULE' AND (MATRICULE=libmatricule or (UPPER(NOMPRENOM)=UPPER(libnomprenom) AND libmatricule is null )) THEN 1
                    WHEN  E_champctrl='BADGE' AND (CODEACCES=libcodeacces  or (UPPER(NOMPRENOM)=UPPER(libnomprenom) AND libcodeacces is null)) THEN 1
                    WHEN  E_champctrl='EMAIL' AND (UPPER(EMAIL)=UPPER(libemail) or (UPPER(NOMPRENOM)=UPPER(libnomprenom) AND libemail is null )) THEN 1
                    ELSE 0
              END=1 ;

        IF TMP>0 THEN
             SELECT RESIDANTID INTO E_ID FROM  (SELECT RESIDANTID FROM RESIDANTS R WHERE
              CASE
                        WHEN  E_champctrl is null AND UPPER(NOMPRENOM)=UPPER(libnomprenom) THEN 1
                    WHEN  E_champctrl='NOMPRENOM' AND UPPER(NOMPRENOM)=UPPER(libnomprenom) THEN 1
                    WHEN  E_champctrl='MATRICULE' AND (MATRICULE=libmatricule or (UPPER(NOMPRENOM)=UPPER(libnomprenom) AND libmatricule is null )) THEN 1
                    WHEN  E_champctrl='BADGE' AND  (CODEACCES=libcodeacces  or (UPPER(NOMPRENOM)=UPPER(libnomprenom) AND libcodeacces is null))  THEN 1
                    WHEN  E_champctrl='EMAIL' AND (UPPER(EMAIL)=UPPER(libemail) or (UPPER(NOMPRENOM)=UPPER(libnomprenom) AND libemail is null )) THEN 1
                    ELSE 0
              END=1) WHERE ROWNUM=1;

                IF E_matricule<>'##' OR E_matricule IS NULL    THEN
                    UPDATE RESIDANTS SET MATRICULE=libmatricule,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_civilite<>'##' OR E_civilite IS NULL    THEN
                    UPDATE RESIDANTS SET CIVILITE = libcivilite,CODECIVILITE=civiliteid,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_fonction<>'##' OR E_fonction IS NULL   THEN
                    UPDATE RESIDANTS SET FONCTION = libfonction,CODEFONCTION=fonctionid,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_site<>'##' OR E_site IS NULL   THEN
                    UPDATE RESIDANTS SET site = libsite,SITEID=siteid1,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_societe<>'##' OR E_societe IS NULL   THEN
                    UPDATE RESIDANTS SET SOCIETE = libsociete,SOCIETEID=E_societeid,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_departement<>'##' OR E_departement IS NULL   THEN
                    UPDATE RESIDANTS SET DEPARTEMENT = libdepartement,DEPTID=departementid,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;

                IF E_service<>'##'  OR E_service IS NULL THEN
                    UPDATE RESIDANTS SET  SERVICE = libservice,SERVICEID=serviceid1,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_batiment<>'##' OR E_batiment IS NULL   THEN
                    UPDATE RESIDANTS SET BATIMENT = libbatiment,BATIMENTID=batimentid1,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_etage<>'##' OR E_etage IS NULL THEN
                    UPDATE RESIDANTS SET  ETAGE = libetage,ETAGEID=etageid1,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_bureau<>'##'  OR E_bureau IS NULL  THEN
                    UPDATE RESIDANTS SET BUREAU= libbureau,BUREAUID=bureauid1,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_codeacces<>'##'  OR E_codeacces IS NULL THEN
                    UPDATE RESIDANTS SET   CODEACCES = libcodeacces,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_nomjeunefille<>'##' OR E_nomjeunefille IS NULL  THEN
                   UPDATE RESIDANTS SET NOMJEUNEFILLE = libnomjeunefille,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF ;
                IF E_nom<>'##'  OR E_nom IS NULL  THEN
                   UPDATE RESIDANTS SET NOM = libnom,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF ;
                IF E_prenom<>'##'  OR E_prenom IS NULL THEN
                   UPDATE RESIDANTS SET PRENOM = libprenom,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF ;
                IF E_nom<>'##' AND E_prenom<>'##' OR E_nom IS NULL OR E_prenom IS NULL THEN
                   UPDATE RESIDANTS SET NOMPRENOM = libnomprenom,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF ;
                IF E_telephone<>'##' OR E_telephone IS NULL THEN
                  UPDATE RESIDANTS SET TELEPHONE = libtelephone,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_email<>'##' OR E_email IS NULL THEN
                   UPDATE RESIDANTS SET EMAIL = libemail,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_gsm<>'##' OR E_gsm IS NULL THEN
                   UPDATE RESIDANTS SET GSM = libgsm,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_fax<>'##' OR E_fax IS NULL  THEN
                   UPDATE RESIDANTS SET FAX = libfax,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_persoadresse<>'##'  OR E_persoadresse IS NULL THEN
                   UPDATE RESIDANTS SET persoadresse = RAWTOHEX(libpersoadresse),DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;

                IF E_persocp<>'##'   OR E_persocp IS NULL THEN
                  UPDATE RESIDANTS SET persocp = libpersocp,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF  E_persoville<>'##' OR E_persoville IS NULL  THEN
                 UPDATE RESIDANTS SET persoville = libpersoville,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_persoprovince<>'##' OR E_persoprovince IS NULL THEN
                  UPDATE RESIDANTS SET persoprovince = libpersoprovince,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_persopays<>'##' OR E_persopays IS NULL  THEN
                  UPDATE RESIDANTS SET persopays = libpersopays,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_direction<>'##'  OR E_direction IS NOT NULL THEN
                  UPDATE RESIDANTS SET direction = libdirection,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;

                IF E_persotelephone<>'##' OR E_persotelephone IS NULL  THEN
                  UPDATE RESIDANTS SET persotelephone = libpersotelephone,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_boitepostale<>'##' OR E_boitepostale IS NULL  THEN
                 UPDATE RESIDANTS SET boitepostale = libboitepostale,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_candidatmailing<>'##' AND  E_candidatmailing IS NOT NULL AND (E_candidatmailing='0' OR E_candidatmailing='1')  THEN
                  UPDATE RESIDANTS SET candidatmailing= E_candidatmailing,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_usertype IS NOT NULL THEN
                    UPDATE RESIDANTS SET USERTYPE=E_usertype, DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_vip IS NOT NULL THEN
                    UPDATE RESIDANTS SET VIP=E_vip, DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_DEBUTINTERDIT<>'##' AND E_DEBUTINTERDIT IS NOT NULL THEN
                    UPDATE RESIDANTS SET DEBUTINTERDIT=datedebutinterdit, DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_FININTERDIT<>'##' AND E_FININTERDIT IS NOT NULL THEN
                    UPDATE RESIDANTS SET FININTERDIT=datefininterdit, DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
				IF E_contrat<>'##' AND E_contrat IS NOT NULL THEN
                    UPDATE RESIDANTS SET CONTRAT=libcontrat, DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                IF E_vip IS NOT NULL THEN
                    UPDATE RESIDANTS SET VIP=E_vip, DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                END IF;
                
                UPDATE RESIDANTS SET isactif = '1',refimportation = E_refimportation,DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;


                nbupdate := nbupdate+1;
                COMMIT;
        ELSE
            SELECT SEQ_IDENTITY.nextval INTO myid FROM DUAL ;
            SELECT SUBSTR(VERSION, 1, 3) INTO FLAG FROM VERSION_SFW WHERE ROWNUM = 1;
            E_ID := flag || myid;


                IF E_codeacces='##' THEN
                    libcodeacces:='';
                END IF;
                IF E_nomjeunefille='##' THEN
                   libnomjeunefille:='';
                END IF ;
                IF E_telephone='##' THEN
                  libtelephone:='';
                END IF;
                IF E_email='##' THEN
                   libemail:='';
                END IF;
                IF E_gsm='##' THEN
                   libgsm:='';
                END IF;
                IF E_fax='##' THEN
                   libfax:='';
                END IF;
                IF E_persoadresse='##' THEN
                   libpersoadresse:='';
                END IF;
                IF E_persocp='##'THEN
                  libpersocp:='';
                END IF;
                IF  E_persoville='##' THEN
                   libpersoville:='';
                END IF;
                IF E_persoprovince='##' THEN
                  libpersoprovince:='';
                END IF;
                IF E_persopays='##' THEN
                  libpersopays:='';
                END IF;
                IF E_persotelephone='##' THEN
                  libpersotelephone:='';
                END IF;
                IF E_boitepostale='##'  THEN
                    libboitepostale:='';
                END IF;
                IF libusertype is null  THEN
                    libusertype:=0 ;
                END IF;
                IF libvip is null THEN
                    libvip:=0 ;
                END IF;
            
                INSERT INTO RESIDANTS (RESIDANTID,SOCIETE,CIVILITE,NOMJEUNEFILLE,NOM ,PRENOM ,NOMPRENOM,FONCTION,TELEPHONE,EMAIL,GSM ,FAX ,MATRICULE,PERSOADRESSE,PERSOCP,PERSOVILLE,PERSOPROVINCE,PERSOPAYS,PERSOTELEPHONE ,THEPASSWORD ,THELOGIN ,SITE,SERVICE,DEPARTEMENT,BATIMENTID,BATIMENT,ETAGEID,ETAGE,BUREAUID,BUREAU,CODEACCES,BOITEPOSTALE,DATECREATION,DATEMAJ,SOCIETEID,CODEFONCTION,CODECIVILITE,SITEID,INTERDIT,HABILITATIONVISITE,EXTERNALID,LISTEROUGE,ISEXTERN,PLANID,DEPTID,SERVICEID,DEBUTINTERDIT,FININTERDIT,ISACTIF,refimportation,USERTYPE,CANDIDATMAILING,VIP,DIRECTION,CONTRAT)
                VALUES(E_ID,libsociete,libcivilite,libnomjeunefille,libnom ,libprenom ,libnomprenom,libfonction,libtelephone,libemail,libgsm ,libfax ,libmatricule,    RAWTOHEX(libpersoadresse),libpersocp,libpersoville,libpersoprovince,libpersopays,libpersotelephone ,loc_thepassword ,loc_thelogin ,libsite,libservice,libdepartement,batimentid1,libbatiment,etageid1,libetage,bureauid1,libbureau,libcodeacces,libboitepostale,SYSDATE,SYSDATE,E_societeid,fonctionid,civiliteid,siteid1,interdit,habilitationvisite,externalid,listerouge,isextern,planid,departementid,serviceid1,To_date(TRUNC(datedebutinterdit),'DD/MM/YYYY'),To_DATE(TRUNC(datefininterdit),'DD/MM/YYYY'),isactif,E_refimportation,libusertype,'1',libvip,libdirection,libcontrat);

                IF (libcandidatmailing IS NOT NULL) AND (libcandidatmailing='0' OR libcandidatmailing='1') THEN
                    UPDATE RESIDANTS SET CANDIDATMAILING=E_candidatmailing WHERE RESIDANTID=E_ID;
                END IF;

                nbinsert := nbinsert + 1;
                COMMIT;
        END IF;
        if E_nomAJ is not null and E_nomAJ<>'##' and TRIM(E_nomAJ) is not null THEN
            SELECT COUNT(*) INTO TMP FROM RESIDANTS WHERE (nom= E_nomAJ AND prenom = E_prenomAJ AND matricule = E_matriculeAJ AND (telephone = E_telephoneAJ or gsm = E_telephoneAJ)) or (nom= E_nomAJ AND prenom = E_prenomAJ) or (matricule = E_matriculeAJ);
            IF TMP>0 THEN
                SELECT * INTO ResIdAj FROM (SELECT RESIDANTID FROM RESIDANTS WHERE (nom= E_nomAJ AND prenom = E_prenomAJ AND matricule = E_matriculeAJ AND (telephone = E_telephoneAJ or gsm = E_telephoneAJ)) or (nom= E_nomAJ AND prenom = E_prenomAJ) or (matricule = E_matriculeAJ)) WHERE ROWNUM=1;
                PS_SECRETARIAT (E_ID    ,ResIdAj,nbinsert );
            ELSE
                UPDATE RESIDANTS
                SET CPNOM = TRIM(REPLACE(E_matriculeAJ|| ' ' || E_nomAJ|| ' ' || E_prenomAJ|| ' ' || E_telephoneAJ,'#',''))
                WHERE residantid = E_ID;
            END IF;
        END IF;
        E_ID := E_ID || ',' || TO_CHAR(nbinsert) || ',' || TO_CHAR(nbupdate);
    ELSE
        E_ID := '-1' || ',' || TO_CHAR(nbinsert) || ',' || TO_CHAR(nbupdate);

    END IF;

END;

/

COMMIT;

CREATE OR REPLACE PROCEDURE PS_IDENTITES(
    E_flagin INT,
    E_champctrl varchar2,

    E_typeidentite varchar2,
    E_delivrepar varchar2,
    E_finvalidite date,
    E_numero varchar2,
    E_interlocuteurid varchar2,

    E_ID out VARCHAR2
)
IS
    E_flag VARCHAR2(14);
    E_identity VARCHAR2(14);
    E_typeidentiteid int;
    E_nbupdate int;
    E_nbinsert int;
    E_tmp int;



BEGIN
    E_nbupdate := 0;
    E_nbinsert := 0;
  IF (E_interlocuteurid IS NOT NULL) AND LTRIM(E_interlocuteurid) IS NOT NULL AND LTRIM(E_interlocuteurid)<>''     AND  LTRIM(E_numero) IS NOT NULL THEN
    if(E_typeidentite is not null) then
        select typeidentiteid into E_typeidentiteid from typeidentite where upper(libelle) = upper(E_typeidentite) and rownum=1;
    END IF;


    if(E_typeidentiteid is not null and LENGTH(TRIM(TRANSLATE(E_typeidentite, ' +-.0123456789', ' '))) is null)THEN
        select typeidentiteid into E_typeidentiteid from typeidentite where typeidentiteid = CAST(E_typeidentite as int) AND rownum=1;
    END IF;

    IF(E_typeidentiteid IS NULL)THEN
        select min(typeidentiteid) into E_typeidentiteid from typeidentite;
        E_typeidentiteid := E_typeidentiteid - 1;
        INSERT INTO typeidentite(typeidentiteid,libelle,datemaj,datecreation)
            VALUES(E_typeidentiteid,E_typeidentite,current_timestamp,current_timestamp);
        E_nbinsert := E_nbinsert + 1;
    END IF;



        select count(*) into E_tmp from identites where typeidentiteid = E_typeidentiteid and interlocuteurid=E_interlocuteurid;

        if(E_tmp>0)THEN

            select count(*) into E_tmp from identites where typeidentiteid = E_typeidentiteid and interlocuteurid=E_interlocuteurid and numero = E_numero;

            if(E_tmp>0)THEN

                select IDENTITEID into E_ID from identites where typeidentiteid = E_typeidentiteid and interlocuteurid=E_interlocuteurid and numero = E_numero and rownum=1;

                E_ID := E_ID || ',' || TO_CHAR(E_nbinsert) || ',' || TO_CHAR(E_nbupdate);
            ELSE
                update identites
                set delivrepar = E_delivrepar,finvalidite = E_finvalidite,numero = E_numero
                where typeidentiteid = E_typeidentiteid
                and interlocuteurid=E_interlocuteurid;

                select IDENTITEID into E_ID from identites where typeidentiteid = E_typeidentiteid and interlocuteurid=E_interlocuteurid and rownum=1;

                E_nbupdate := E_nbupdate + 1;
                E_ID := E_ID || ',' || TO_CHAR(E_nbinsert) || ',' || TO_CHAR(E_nbupdate);
            END IF;
        ELSE
            IF(E_flagin=1)THEN

                SELECT SEQ_IDENTITY.nextval INTO E_ID FROM DUAL ;
                SELECT SUBSTR(VERSION, 1, 3) INTO E_flag FROM VERSION_SFW WHERE ROWNUM = 1;
                E_ID := E_flag || E_ID;

                INSERT INTO IDENTITES(typeidentiteid,delivrepar,finvalidite,numero,interlocuteurid,identiteid,datecreation,datemaj)
                    VALUES(E_typeidentiteid ,E_delivrepar,E_finvalidite,E_numero,E_interlocuteurid,E_ID,sysdate,sysdate);
                E_nbinsert := E_nbinsert + 1;
                E_ID := E_ID || ',' || TO_CHAR(E_nbinsert) || ',' || TO_CHAR(E_nbupdate);
            ELSE
                E_ID := '0,' || TO_CHAR(E_nbinsert) || ',' || TO_CHAR(E_nbupdate);
            END IF;
        END IF;
    ELSE
        E_ID := '0,' || TO_CHAR(E_nbinsert) || ',' || TO_CHAR(E_nbupdate);
    END IF;
END;
/
commit;

create or replace Procedure PS_INTERLOCUTEUR(
    E_flagin IN INT,
    E_champctrl IN varchar2,
    E_civilite IN VARCHAR2,
    E_nom IN VARCHAR2,
    E_prenom IN VARCHAR2,
    E_nomjeunefille IN VARCHAR2,
    E_datenaissance IN DATE,
    E_lieunaissance IN VARCHAR2,
    E_pays_naissance IN VARCHAR2,
    E_pays IN VARCHAR2,
    E_societe IN VARCHAR2,
    E_fonction IN VARCHAR2,
    E_nature IN VARCHAR2,
    E_adresse IN VARCHAR2,
    E_codepostal IN VARCHAR2,
    E_ville IN VARCHAR2,
    E_refimportation IN VARCHAR2,

    E_immatriculation IN varchar2,
    E_telephone IN varchar2,
    E_email IN varchar2,
    E_gsm IN varchar2,
    E_fax IN varchar2,
    E_finvaliditeauto IN date,
    E_datedernvisite IN date,

    E_societe_adresse IN VARCHAR2,
    E_societe_siret IN VARCHAR2,
    E_societe_cp IN VARCHAR2,
    E_societe_ville IN VARCHAR2,
    E_societe_pays IN VARCHAR2,

    E_typeidentiteid IN varchar2,
    E_delivrepar IN varchar2,
    E_numero IN varchar2,
    E_finvalidite IN date,
    E_nationalite IN varchar2,

    E_interdit IN varchar2,
    E_debutinterdit IN date,
    E_fininterdit IN date,

    E_ID IN OUT VARCHAR2
)
IS
    flag VARCHAR2(14);
    myid VARCHAR2(14);
    --<champctrl>NOMPRENOM,EMAIL,IMMATRICULATION</champctrl>

    E_libnomprenom varchar2(70);
    nbupdate int;
    nbinsert int;
    E_libidentitieid varchar2(18);

    tmp int;

    E_libsocieteid varchar2(18);
    E_libfonctionid varchar2(18);
    E_libciviliteid varchar2(18);
    E_libnatureid varchar2(18);
    E_libnationaliteid varchar2(18);

    E_libcivilite VARCHAR2(30);
    E_libnom VARCHAR2(35);
    E_libprenom VARCHAR2(34);
    E_libnomjeunefille VARCHAR2(35);
    E_liblieunaissance VARCHAR2(70);
    E_libpays VARCHAR2(35);
    E_libsociete VARCHAR2(35);
    E_libfonction VARCHAR2(35);
    E_libnature VARCHAR2(35);
    E_libadresse VARCHAR2(150);
    E_libcodepostal VARCHAR2(10);
    E_libville VARCHAR2(35);
    E_librefimportation VARCHAR2(48);
    E_libimmatriculation varchar2(15);
    E_libtelephone varchar2(20);
    E_libemail varchar2(150);
    E_libgsm varchar2(20);
    E_libfax varchar2(20);
    E_libsociete_adresse VARCHAR2(150);
    E_libsociete_siret VARCHAR2(20);
    E_libsociete_cp VARCHAR2(10);
    E_libsociete_ville VARCHAR2(35);
    E_libsociete_pays VARCHAR2(35);
    E_libtypeidentiteid varchar2(35);
    E_libdelivrepar varchar2(80);
    E_libnumero varchar2(20);
    E_libnationalite varchar2(50);
    E_libinterdit varchar2(1);
    E_libpays_naissance varchar2(50);
    E_libnaissnationaliteid varchar2(18);

BEGIN


    E_libcivilite := E_civilite;
    if(E_libcivilite ='##')then
        E_libcivilite:=null;
    end if;
    E_libnom := E_nom;
    if(E_libnom='##')then
        E_libnom:=null;
    end if;
    E_libprenom :=E_prenom;
    if(E_libprenom='##')then
        E_libprenom:=null;
    end if;
    E_libnomjeunefille :=E_nomjeunefille;
    if(E_libnomjeunefille='##')then
        E_libnomjeunefille:=null;
    end if;
    E_liblieunaissance :=E_lieunaissance;
    if(E_liblieunaissance='##')then
        E_liblieunaissance:=null;
    end if;
    E_libpays :=E_pays;
    if(E_libpays='##')then
        E_libpays:=null;
    end if;
    E_libsociete :=E_societe;
    if(E_libsociete='##')then
        E_libsociete:=null;
    end if;
    E_libfonction:=E_fonction;
    if(E_libfonction='##')then
        E_libfonction:=null;
    end if;
    E_libnature :=E_nature;
    if(E_libnature='##')then
        E_libnature:=null;
    end if;
    E_libadresse :=E_adresse;
    if(E_libadresse='##')then
        E_libadresse:='##';
    end if;
    E_libcodepostal :=E_codepostal;
    if(E_libcodepostal='##')then
        E_libcodepostal:=null;
    end if;
    E_libville :=E_ville;
    if(E_libville='##')then
        E_libville:=null;
    end if;
    E_librefimportation :=E_refimportation;
    if(E_librefimportation='##')then
        E_librefimportation:=null;
    end if;
    E_libimmatriculation :=E_immatriculation;
    if(E_libimmatriculation='##')then
        E_libimmatriculation:=null;
    end if;
    E_libtelephone :=E_telephone;
    if(E_libtelephone='##')then
        E_libtelephone:=null;
    end if;
    E_libemail :=E_email;
    if(E_libemail='##')then
        E_libemail:=null;
    end if;
    E_libgsm :=E_gsm;
    if(E_libgsm='##')then
        E_libgsm:=null;
    end if;
    E_libfax :=E_fax;
    if(E_libfax='##')then
        E_libfax:=null;
    end if;
    E_libsociete_adresse :=E_societe_adresse;
    if(E_libsociete_adresse='##')then
        E_libsociete_adresse:=null;
    end if;
    E_libsociete_siret :=E_societe_siret;
    if(E_libsociete_siret='##')then
        E_libsociete_siret:=null;
    end if;
    E_libsociete_cp :=E_societe_cp;
    if(E_libsociete_cp='##')then
        E_libsociete_cp:=null;
    end if;
    E_libsociete_ville :=E_societe_ville;
    if(E_libsociete_ville='##')then
        E_libsociete_ville:=null;
    end if;
    E_libsociete_pays :=E_societe_pays;
    if(E_libsociete_pays='##')then
        E_libsociete_pays:=null;
    end if;
    E_libtypeidentiteid :=E_typeidentiteid;
    if(E_libtypeidentiteid='##')then
        E_libtypeidentiteid:=null;
    end if;
    E_libdelivrepar :=E_delivrepar;
    if(E_libdelivrepar='##')then
        E_libdelivrepar:=null;
    end if;
    E_libnumero :=E_numero;
    if(E_libnumero='##')then
        E_libnumero:=null;
    end if;
    E_libnationalite :=E_nationalite;
    if(E_libnationalite='##')then
        E_libnationalite:=null;
    end if;
    E_libinterdit := E_interdit;
    if(E_libinterdit='##')then
        E_libinterdit:=null;
    end if;
    E_libpays_naissance := E_pays_naissance;
    if(E_libpays_naissance='##')then
        E_libpays_naissance:=null;
    end if;
    E_libnomprenom := LTRIM(E_libnom || ' ' || E_libprenom);

    nbupdate := 0;
    nbinsert := 0;

    PS_SOCIETE(1,'','',E_libsociete,E_libsociete_siret,'',E_libsociete_adresse,E_libsociete_cp,E_libsociete_ville,E_libsociete_pays,'','','','','','0', E_libsocieteid);
    SELECT nom into E_libsociete FROM societe where societeid = (Split(E_libsocieteid,1,','));

    nbinsert:=nbinsert+CAST(split(E_libsocieteid,2,',') AS int) ;
    nbupdate:=nbupdate+CAST(split(E_libsocieteid,3,',') AS int) ;
    E_libsocieteid := Split(E_libsocieteid,1,',') ;



    PS_FONCTION(0,'',E_libfonction, E_libfonctionid);
    SELECT libelle into E_libfonction FROM fonction where codefonction = (Split(E_libfonctionid,1,','));

    nbinsert:=nbinsert+CAST(split(E_libfonctionid,2,',') AS int) ;
    nbupdate:=nbupdate+CAST(split(E_libfonctionid,3,',') AS int) ;
    E_libfonctionid := Split(E_libfonctionid,1,',') ;



    PS_CIVILITE(0,'',E_libcivilite,E_libcivilite, E_libciviliteid);


    nbinsert:=nbinsert+CAST(split(E_libciviliteid,2,',') AS int) ;
    nbupdate:=nbupdate+CAST(split(E_libciviliteid,3,',') AS int) ;
    E_libciviliteid := Split(E_libciviliteid,1,',') ;

    if(E_libciviliteid>-1)then
        SELECT civilite into E_libcivilite FROM civilite where codecivilite = E_libciviliteid;
    END IF;



    PS_NATURE(0,'',E_libnature,'','',E_libinterdit, E_libnatureid);

    nbinsert:=nbinsert+CAST(split(E_libnatureid,2,',') AS int) ;
    nbupdate:=nbupdate+CAST(split(E_libnatureid,3,',') AS int) ;
    E_libnatureid := Split(E_libnatureid,1,',') ;



    PS_PAYS(0,'LIBELLE',E_libpays,E_libpays,'',E_libnationalite, '', '','','','','','',E_libinterdit,E_debutinterdit,E_fininterdit, '', '', '', '','','', E_libnationaliteid);
    SELECT libelle into E_libnationalite FROM pays where paysid = (Split(E_libnationaliteid,1,','));

    nbinsert:=nbinsert+CAST(split(E_libnationaliteid,2,',') AS int) ;
    nbupdate:=nbupdate+CAST(split(E_libnationaliteid,3,',') AS int) ;
    E_libnationaliteid := Split(E_libnationaliteid,1,',') ;


    PS_PAYS(0,'LIBELLE',E_libpays_naissance,E_libpays_naissance,'','', '', '','','','','','',E_libinterdit,E_debutinterdit,E_fininterdit, '', '', '', '','','', E_libnaissnationaliteid);
    SELECT libelle into E_libpays_naissance FROM pays where paysid = (Split(E_libnaissnationaliteid,1,','));

    IF (E_libnomprenom    IS NOT NULL) THEN



       select count(*) into tmp FROM interlocuteur i WHERE
              CASE
                    WHEN  E_champctrl is null AND UPPER(LTRIM(NOMPRENOM))=UPPER(E_libnomprenom) THEN 1
                    WHEN  E_champctrl='NOMPRENOM' AND UPPER(LTRIM(NOMPRENOM))=UPPER(E_libnomprenom) THEN 1
                    WHEN  E_champctrl='IMMATRICULATION' AND IMMATRICULATION=E_libimmatriculation AND UPPER(LTRIM(NOMPRENOM))=UPPER(E_libnomprenom) THEN 1
                    WHEN  E_champctrl='EMAIL' AND UPPER(EMAIL)=UPPER(E_libemail) AND UPPER(LTRIM(NOMPRENOM))=UPPER(E_libnomprenom) THEN 1
                    ELSE 0
              END=1;
        IF (tmp>0) THEN



                select interlocuteurid into E_ID FROM (select interlocuteurid from interlocuteur i WHERE UPPER(NOMPRENOM)=UPPER(E_libnomprenom)  AND
              CASE
                    WHEN  E_champctrl is null THEN 1
                    WHEN  E_champctrl='NOMPRENOM' THEN 1
                    WHEN  E_champctrl='IMMATRICULATION' AND IMMATRICULATION=E_libimmatriculation THEN 1
                    WHEN  E_champctrl='EMAIL' AND UPPER(EMAIL)=UPPER(E_libemail) THEN 1
                    ELSE 0
              END = 1 AND ROWNUM=1);

                PS_IDENTITES( 1,'',E_libtypeidentiteid,E_libdelivrepar,E_finvalidite,E_libnumero,E_ID,E_libidentitieid);

                nbinsert:=nbinsert+CAST(split(E_libidentitieid,2,',') AS int) ;
                nbupdate:=nbupdate+CAST(split(E_libidentitieid,3,',') AS int) ;
                E_libidentitieid := Split(E_libidentitieid,1,',') ;



                update INTERLOCUTEUR
                SET civilite = E_libcivilite ,nom = E_libnom, prenom = E_libprenom ,nomjeunefille = E_libnomjeunefille,    datenaissance = E_datenaissance,lieunaissance = E_liblieunaissance,societe = E_libsociete,fonction=E_libfonction,adresse = E_libadresse,codepostal = E_libcodepostal,ville = E_libville,refimportation = E_librefimportation,immatriculation = E_libimmatriculation,telephone = E_libtelephone,email=E_libemail,gsm = E_libgsm,fax = E_libfax,datedernvisite=E_datedernvisite,societeid=E_libsocieteid,codecivilite=E_libciviliteid,codefonction=E_libfonctionid,natureid=E_libnatureid,nationaliteid=E_libnationaliteid
                WHERE interlocuteurid = E_ID;
                IF (E_debutinterdit is not null) THEN
                update INTERLOCUTEUR SET debutinterdit = E_debutinterdit where interlocuteurid=E_ID;
                END IF;
                IF (E_fininterdit is not null) THEN
                update INTERLOCUTEUR SET fininterdit = E_fininterdit where interlocuteurid=E_ID ;
                END IF;
                IF (E_finvaliditeauto is not null) THEN
                update INTERLOCUTEUR SET finvaliditeauto = E_finvaliditeauto where interlocuteurid=E_ID;
                END IF;
                IF E_libinterdit is not null and E_libinterdit<>''  then
                    update INTERLOCUTEUR SET interdit = E_libinterdit where interlocuteurid=E_ID;
                END IF;
                IF E_libpays_naissance is not null and E_libpays_naissance<>''  then
                    update INTERLOCUTEUR SET pays_naissance = E_libpays_naissance where interlocuteurid=E_ID;
                END IF;
                nbupdate := nbupdate+1;

                E_ID := E_ID || ',' || TO_CHAR(nbinsert) || ',' || TO_CHAR(nbupdate);
        ELSE
            IF(E_flagin = 1)THEN



                SELECT SEQ_IDENTITY.nextval INTO myid FROM DUAL ;
                SELECT SUBSTR(VERSION, 1, 3) INTO FLAG FROM VERSION_SFW WHERE ROWNUM = 1;
                E_ID := flag || myid;

                PS_IDENTITES(1,'',E_libtypeidentiteid,E_libdelivrepar,E_finvalidite,E_libnumero,E_ID,E_libidentitieid);

                nbinsert:=nbinsert+CAST(split(E_libidentitieid,2,',') AS int) ;
                nbupdate:=nbupdate+CAST(split(E_libidentitieid,3,',') AS int) ;
                E_libidentitieid := Split(E_libidentitieid,1,',') ;



                INSERT INTO interlocuteur(interlocuteurid, societeid, societe, codecivilite, civilite, nom, prenom, nomprenom, nomjeunefille, datenaissance, lieunaissance, pays_naissance, codefonction, fonction, natureid, nationaliteid, pays, adresse, codepostal, ville, pays_adresse, interdit, debutinterdit, fininterdit, datecreation, datemaj,immatriculation,telephone,email,gsm,fax,DATEDERNVISITE,FINVALIDITEAUTO)
                    VALUES(E_ID, E_libsocieteid, E_libsociete, E_libciviliteid, E_libcivilite, E_libnom, E_libprenom, LTRIM(E_libnomprenom), E_libnomjeunefille, E_datenaissance, E_liblieunaissance, E_libpays_naissance, E_libfonctionid, E_libfonction, E_libnatureid, E_libnationaliteid, E_libnationalite, E_libadresse,E_libcodepostal, E_libville, E_libpays, E_libinterdit, sysdate - 1, sysdate + 36525, sysdate, sysdate,E_libimmatriculation,E_libtelephone,E_libemail,E_libgsm,E_libfax,E_datedernvisite,E_finvaliditeauto);
                nbinsert := nbinsert+1;
                E_ID := E_ID || ',' || TO_CHAR(nbinsert) || ',' || TO_CHAR(nbupdate);
            ELSE



                E_ID := '0,' || TO_CHAR(nbinsert) || ',' || TO_CHAR(nbupdate);
            END IF;
        END IF;
    ELSE



        E_ID := '0,' || TO_CHAR(nbinsert) || ',' || TO_CHAR(nbupdate);
    END IF;



    IF(E_ID='' or E_ID is null) THEN
        E_ID := 'sa marche pas';
    END IF;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_VEHICULE(

 E_flagin INT,
 E_champctrl VARCHAR2,
 E_residantid VARCHAR2,
 E_immatriculation VARCHAR2,
 E_marque VARCHAR2,
 E_modele VARCHAR2,
 E_datelimite DATE,
 E_numeropass VARCHAR2,
 E_ID OUT VARCHAR2
)

IS
 flag VARCHAR2(14);
 myid VARCHAR2(14);
 TMP INT;
BEGIN
    E_ID:=null;
    SELECT COUNT(*) INTO TMP FROM vehicule WHERE immatriculation = E_immatriculation;
    IF TMP>0 THEN
        SELECT vehiculeid INTO E_ID FROM vehicule WHERE immatriculation = E_immatriculation and rownum=1;
        E_ID := E_ID || ',0,0';
    ELSE
          IF (E_immatriculation IS NOT NULL ) AND (LTRIM(E_immatriculation) IS NOT NULL) THEN
                SELECT SEQ_IDENTITY.nextval INTO myid FROM DUAL ;
                SELECT SUBSTR(VERSION, 1, 3) INTO FLAG FROM VERSION_SFW WHERE ROWNUM = 1;
                E_ID := flag || myid;
                INSERT INTO vehicule(residantid,immatriculation,marque,modele,datelimite,numeropass,vehiculeid,datecreation,datemaj) values(E_residantid,E_immatriculation,E_marque,E_modele,E_datelimite,E_numeropass,E_ID,sysdate,sysdate);
                COMMIT;
                E_ID := E_ID || ',1,0';
          ELSE
                E_ID := '-1,0,0';
          END IF;
    END IF;
END;
/

COMMIT;



CREATE OR REPLACE PROCEDURE PS_TYPEVISITE(
 E_flagin IN INT,
 E_typevisiteid IN VARCHAR2,
 E_ID OUT VARCHAR2
)

IS
TMP INT;
BEGIN
    E_ID:=null;
    SELECT COUNT(*) INTO TMP FROM TYPEVISITE  WHERE TO_NUMBER(TYPEVISITEID)= E_typevisiteid;
    IF TMP>0 THEN
        SELECT TYPEVISITEID INTO E_ID FROM TYPEVISITE  WHERE TO_NUMBER(TYPEVISITEID) = E_typevisiteid;
    ELSE
        SELECT COUNT(*) INTO TMP FROM TYPEVISITE  WHERE UPPER(TYPEVISITE) = UPPER(E_typevisiteid);
        IF TMP>0 THEN
         SELECT *  INTO E_ID  FROM( SELECT TYPEVISITEID FROM TYPEVISITE  WHERE UPPER(TYPEVISITE) = UPPER(E_typevisiteid)) WHERE ROWNUM=1;
        ELSE
            IF E_flagin=0 THEN
                E_ID := '0';
            ELSE
                E_ID := NULL;
            END IF;
        END IF;
    END IF;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_VISITES(
    E_flagin INT,
    E_champctrl VARCHAR2,

    E_nomint VARCHAR2,
    E_prenomint VARCHAR2,
    E_nomres VARCHAR2,
    E_prenomres VARCHAR2,

    E_societeresid IN VARCHAR2,
    E_societevisit VARCHAR2,
    E_ifonction VARCHAR2,
    E_idatenaissance date,
    E_ilieunaissance VARCHAR2,
    E_ipays VARCHAR2,
    E_inomjeunefille VARCHAR2,
    E_vip int,
    E_istatut VARCHAR2,

    E_debutprevu date,
    E_finprevu date,
    E_hdebutprevu date,
    E_hfinprevu date,

    E_numerobadge VARCHAR2,
    E_numerovisite IN int,
    E_debutvisite date,
    E_finvisite date,
    E_hdebut date,
    E_hfin date,
    E_statutvisite in VARCHAR2,
    E_boite VARCHAR2,
    E_casier VARCHAR2,
    E_objet VARCHAR2,
    E_piece VARCHAR2,
    E_numero VARCHAR2,
    E_validite date,
    E_parking VARCHAR2,
    E_immatriculation VARCHAR2,
    E_observation VARCHAR2,
    E_lieu VARCHAR2,
    E_originevisite in out int,
    E_marque VARCHAR2,
    E_modele VARCHAR2,
    E_preenreg int,
    E_cle VARCHAR2,

    --Salle : codesalle
    --E_SalleLibelle VARCHAR2(35),
    --E_nosalle VARCHAR2(15),
    --E_batiment VARCHAR2(35),
    E_site VARCHAR2,
    --E_teleSalle VARCHAR2(20),
    E_LAST_ACTION VARCHAR2,
    E_RES_FINAL varchar2,
    E_RES_MOTEUR1 varchar2,
    E_RES_MOTEUR2 varchar2,
    E_RES_OS varchar2,
    E_INFO VARCHAR2,
    E_ALERTE VARCHAR2,
    E_PROFIL_CTRL_ID VARCHAR2,
    E_PROFIL_CTRL2 VARCHAR2,
    E_SIGNATURE_ENTREE VARCHAR2,
    E_SIGNATURE_SORTIE VARCHAR2,
    E_TYPEVISITEID int,
    E_ID out VARCHAR2
)
IS

    flag VARCHAR2(14);
    myid VARCHAR2(14);
    E_IDRES VARCHAR2(18);
    E_idint VARCHAR2(18);
    E_codesalle VARCHAR2(18);
    E_siteid VARCHAR2(14);
    E_libstatutvisiteid int;
    E_nbupdate int;
    E_nbinsert int;
    E_nomprenomresid VARCHAR2(70);
    E_nomprenomvisit VARCHAR2(70);
    TMP int;

    E_libnomint VARCHAR2(35);
    E_libprenomint VARCHAR2(35);
    E_libnomres VARCHAR2(35);
    E_libprenomres VARCHAR2(35);
    E_libsocieteresid VARCHAR2(35);
    E_libsocietevisit VARCHAR2(35);
    E_libifonction VARCHAR2(35);
    E_libilieunaissance VARCHAR2(70);
    E_libipays VARCHAR2(35);
    E_libinomjeunefille VARCHAR2(35);
    E_libistatut VARCHAR2(35);
    E_libnumerobadge VARCHAR2(200);
    E_libstatutvisite VARCHAR2(50);
    E_libboite VARCHAR2(6);
    E_libcasier VARCHAR2(6);
    E_libobjet VARCHAR2(200);
    E_libpiece VARCHAR2(20);
    E_libnumero VARCHAR2(20);
    E_libparking VARCHAR2(35);
    E_libimmatriculation VARCHAR2(15);
    E_libobservation VARCHAR2(200);
    E_liblieu VARCHAR2(50);
    E_libmarque VARCHAR2(20);
    E_libmodele VARCHAR2(40);
    E_libcle VARCHAR2(500);
    E_libsite VARCHAR2(35);
    E_libtypevisiteid int;
    idtypevisite int;
    libnumerovisite int;
    E_libpreenreg int;

BEGIN

    E_nbupdate := 0;
    E_nbinsert := 0;

    libnumerovisite:=E_numerovisite;

    E_libnomint := E_nomint;
    if(E_libnomint='##')then
        E_libnomint := null;
    end if;
    E_libprenomint := E_prenomint;
    if(E_libprenomint='##')then
        E_libprenomint:=null;
    end if;
    E_libnomres :=E_nomres;
    if(E_libnomres='##')then
        E_libnomres:=null;
    end if;
    E_libprenomres :=E_prenomres;
    if(E_libprenomres='##')then
        E_libprenomres:=null;
    end if;
    E_libsocieteresid :=E_societeresid;
    if(E_libsocieteresid='##')then
        E_libsocieteresid:=null;
    end if;
    E_libsocietevisit :=E_societevisit;
    if(E_libsocietevisit='##')then
        E_libsocietevisit:=null;
    end if;
    E_libifonction :=E_ifonction;
    if(E_libifonction='##')then
        E_libifonction:=null;
    end if;
    E_libilieunaissance :=E_ilieunaissance;
    if(E_libilieunaissance='##')then
        E_libilieunaissance := null;
    end if;
    E_libipays :=E_ipays;
    if(E_libipays='##')then
        E_libipays:=null;
    end if;
    E_libinomjeunefille :=E_inomjeunefille;
    if(E_libinomjeunefille='##')then
        E_libinomjeunefille:=null;
    end if;
    E_libistatut :=E_istatut;
    if(E_libistatut='##')then
        E_libistatut:=null;
    end if;
    E_libnumerobadge :=E_numerobadge;
    if(E_libnumerobadge='##')then
        E_libnumerobadge:=null;
    end if;
    E_libstatutvisite :=E_statutvisite;
    if(E_libstatutvisite='##')then
        E_libstatutvisite:=null;
    end if;
    E_libboite :=E_boite;
    if(E_libboite='##')then
        E_libboite:=null;
    end if;
    E_libcasier :=E_casier;
    if(E_libcasier='##')then
        E_libcasier:=null;
    end if;
    E_libobjet :=E_objet;
    if(E_libobjet='##')then
        E_libobjet:=null;
    end if;
    E_libpiece :=E_piece;
    if(E_libpiece='##')then
        E_libpiece:=null;
    end if;
    E_libnumero :=E_numero;
    if(E_libnumero='##')then
        E_libnumero:=null;
    end if;
    E_libparking :=E_parking;
    if(E_libparking='##')then
        E_libparking:=null;
    end if;
    E_libimmatriculation :=E_immatriculation;
    if(E_libimmatriculation='##')then
        E_libimmatriculation:=null;
    end if;
    E_libobservation :=E_observation;
    if(E_libobservation='##')then
        E_libobservation:=null;
    end if;
    E_liblieu :=E_lieu;
    if(E_liblieu='##')then
        E_liblieu:=null;
    end if;
    E_libmarque :=E_marque;
    if(E_libmarque='##')then
        E_libmarque:=null;
    end if;
    E_libmodele :=E_modele;
    if(E_libmodele='##')then
        E_libmodele:=null;
    end if;
    E_libcle :=E_cle;
    if(E_libcle='##')then
        E_libcle:=null;
    end if;
    E_libsite := E_site;
    if(E_libsite='##')then
        E_libsite:=null;
    end if;
    E_libtypevisiteid:=E_typevisiteid;

    PS_TYPEVISITE(0,E_libtypevisiteid,idtypevisite);
    --set E_numerovisite = (select max(numerovisite) from visites)
    if(libnumerovisite is null or libnumerovisite=0 )then
        select NVL(max(dernvisite),1) into libnumerovisite from parametres;
        update parametres set dernvisite=NVL(dernvisite,1)+1 ;
    end IF;
    if(E_originevisite is null or E_originevisite=0 )then
        E_originevisite:=libnumerovisite ;
    end IF;
    E_nomprenomresid := upper(E_libnomres) || ' ' || upper(E_libprenomres);
    E_nomprenomvisit := upper(E_libnomint) || ' ' || upper(E_libprenomint);


    IF(E_nomprenomresid is not null and LTRIM(E_nomprenomresid) is not null) then

        PS_RESIDANTS (1,'NOMPRENOM',E_libsocieteresid,'','',E_libnomres,E_libprenomres,'','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',0,E_IDRES);

        E_nbinsert:=E_nbinsert+CAST(split(E_IDRES,2,',') AS int) ;
        E_nbupdate:=E_nbupdate+CAST(split(E_IDRES,3,',') AS int) ;
        E_IDRES := Split(E_IDRES,1,',') ;

        IF(E_nomprenomvisit is not null and LTRIM(E_nomprenomvisit)is not null)then

            PS_INTERLOCUTEUR(1,'NOMPRENOM','',E_libnomint,E_libprenomint,E_libinomjeunefille,E_idatenaissance,E_libilieunaissance,E_libipays,E_libsocietevisit,E_libifonction,E_libistatut,'','','','','','','','','','','','','','','','','','','','','','','0',NULL,NULL,E_idint);

            E_nbinsert:=E_nbinsert+CAST(split(E_idint,2,',') AS int) ;
            E_nbupdate:=E_nbupdate+CAST(split(E_idint,3,',') AS int) ;
            E_idint := Split(E_idint,1,',') ;

            select count(*) into TMP from RESIDANTS where NOMPRENOM=E_nomint+' '+E_prenomint;
            if idtypevisite=-1 AND TMP>0 THEN
                UPDATE INTERLOCUTEUR SET EXTERNALID=(SELECT RESIDANTID FROM RESIDANTS WHERE NOMPRENOM=E_nomint+' '+E_prenomint AND ROWNUM=1)  -- ATTENTION ISCATIF doit e^tre égal à 1
            WHERE INTERLOCUTEURID=E_idint;
            END IF;

            select count(*) into TMP from statutvisite where statutvisite = E_libstatutvisite;
            if(TMP>0)then
                E_libpreenreg:=1;
                select statutid into E_libstatutvisiteid from statutvisite where statutvisite = E_libstatutvisite and rownum=1;
                select statutvisite into E_libstatutvisite from statutvisite where statutvisite = E_libstatutvisite and rownum=1;
            else
                E_libpreenreg:=0;
                E_libstatutvisiteid:= 2;
                select statutvisite into E_libstatutvisite from statutvisite where statutid=E_libstatutvisiteid and rownum=1;
            end if;


            PS_SITE(0,E_libsite,E_siteid);

            select count(*) into TMP FROM visites WHERE UPPER(LTRIM(NOMPRENOMRESID))=UPPER(LTRIM(E_nomprenomresid)) AND LTRIM(upper(nomprenomvisit))=LTRIM(upper(E_nomprenomvisit)) AND (debutprevu = E_debutprevu or (debutprevu is null and E_debutprevu is null)) AND (finprevu = E_finprevu or (finprevu is null and E_finprevu is null)) AND (hdebutprevu = E_hdebutprevu or (hdebutprevu is null and E_hdebutprevu is null)) AND (hfinprevu=E_hfinprevu or (hfinprevu is null and E_hfinprevu is null)) AND
              CASE
                    WHEN  E_champctrl is null THEN 1
                    WHEN  E_champctrl='NOMPRENOM' THEN 1
                    WHEN  E_champctrl='SOCIETE' AND upper(SOCIETERESID)=upper(E_libsocieteresid) AND UPPER(LTRIM(societevisit))=UPPER(E_libsocietevisit) THEN 1
                    ELSE 0
              END=1;

            IF TMP>0    THEN --update
                select visiteid into E_ID FROM visites WHERE UPPER(LTRIM(NOMPRENOMRESID))=UPPER(LTRIM(E_nomprenomresid)) AND LTRIM(upper(nomprenomvisit))=LTRIM(upper(E_nomprenomvisit)) AND (debutprevu = E_debutprevu or (debutprevu is null and E_debutprevu is null)) AND (finprevu = E_finprevu or (finprevu is null and E_finprevu is null)) AND (hdebutprevu = E_hdebutprevu or (hdebutprevu is null and E_hdebutprevu is null)) AND (hfinprevu=E_hfinprevu or (hfinprevu is null and E_hfinprevu is null)) AND
              CASE
                    WHEN  E_champctrl is null THEN 1
                    WHEN  E_champctrl='NOMPRENOM' THEN 1
                    WHEN  E_champctrl='SOCIETE' AND upper(SOCIETERESID)=upper(E_libsocieteresid) AND UPPER(LTRIM(societevisit))=UPPER(LTRIM(E_libsocietevisit)) THEN 1
                    ELSE 0
              END=1 AND rownum=1;

                update visites
                set societeresid=upper(E_libsocieteresid),nomprenomresid=E_nomprenomresid,societevisit=upper(E_libsocietevisit),nomprenomvisit=E_nomprenomvisit,ifonction=E_libifonction,idatenaissance=E_idatenaissance,ilieunaissance=E_libilieunaissance,ipays=E_libipays,inomjeunefille=E_libinomjeunefille,istatut=E_libistatut,debutprevu=E_debutprevu,finprevu=E_finprevu,hdebutprevu=E_hdebutprevu,hfinprevu=E_hfinprevu,numerobadge=E_libnumerobadge,numerovisite=libnumerovisite,debutvisite=E_debutvisite,finvisite=E_finvisite,hdebut=E_hdebut,hfin=E_hfin,statutvisite=E_libstatutvisite,boite=E_libboite,casier=E_libcasier,objet=E_libobjet,piece=E_libpiece,numero=E_libnumero,validite=E_validite,parking=E_libparking,immatriculation=E_libimmatriculation,observation=E_libobservation,lieu=E_liblieu,originevisite=E_originevisite,marque=E_libmarque,modele=E_libmodele,preenreg=E_libpreenreg,cle=E_libcle,interlocuteurid = E_idint,residantid = E_IDRES,siteid=E_siteid,statutid=E_libstatutvisiteid,datemaj=sysdate
                where visiteid = E_ID;
                if (E_debutprevu is null) or (E_finprevu is null) THEN
                    update visites set DEBUTPREVU=TO_DATE(SYSDATE,'DD/MM/YYYY HH24:MI:SS'), FINPREVU=TO_DATE(SYSDATE,'DD/MM/YYYY HH24:MI:SS') WHERE VISITEID=E_ID ;
                END IF;
                if (E_hdebutprevu is null) THEN
                    update visites set HDEBUTPREVU=TO_DATE('08:00','HH24:MI') WHERE VISITEID=E_ID;
                END IF;
                if (E_hfinprevu is null) THEN
                    update visites set HFINPREVU=TO_DATE('23:00','HH24:MI') WHERE VISITEID=E_ID;
                END IF;
                if (E_libtypevisiteid is not null) THEN
                    update visites set typevisiteid=idtypevisite where visiteid=E_ID ;
                END IF;
                if(E_vip is null) THEN
                    update visites set vip='0' where visiteid=E_ID ;
                end    if;
                E_ID := E_ID || ',' || TO_CHAR(E_nbinsert) || ',' || TO_CHAR(E_nbupdate+1);

            ELSE --insert
                IF(E_flagin = 1)then

                    SELECT SEQ_IDENTITY.nextval INTO myid FROM DUAL ;
                    SELECT SUBSTR(VERSION, 1, 3) INTO FLAG FROM VERSION_SFW WHERE ROWNUM = 1;
                    E_ID := flag || myid;

                    insert into visites(visiteid,societeresid ,nomprenomresid,societevisit,nomprenomvisit,ifonction,idatenaissance,ilieunaissance,ipays,inomjeunefille,istatut,debutprevu,finprevu,hdebutprevu,hfinprevu,numerobadge,numerovisite,debutvisite,finvisite,hdebut,hfin,statutvisite,boite,casier,objet,piece,numero,validite,parking,immatriculation,observation,lieu,originevisite,marque,modele,preenreg,cle,interlocuteurid,residantid,siteid,statutid,datecreation,datemaj,externalid,typevisiteid,nbbdgimprtotal,bureauid)
                    values(E_ID,upper(E_libsocieteresid),E_nomprenomresid,upper(E_libsocietevisit),E_nomprenomvisit,E_libifonction,E_idatenaissance,E_libilieunaissance,E_libipays,E_libinomjeunefille,E_libistatut,E_debutprevu,E_finprevu,E_hdebutprevu,E_hfinprevu,E_libnumerobadge,libnumerovisite,E_debutvisite,E_finvisite,E_hdebut,E_hfin,E_libstatutvisite,E_libboite,E_libcasier,E_libobjet,E_libpiece,E_libnumero,E_validite,E_libparking,E_libimmatriculation,E_libobservation,E_liblieu,libnumerovisite,E_libmarque,E_libmodele,E_libpreenreg,E_libcle,E_idint,E_idres,E_siteid,E_libstatutvisiteid,sysdate,sysdate,E_idres,idtypevisite,0,libnumerovisite);

                    if (E_vip is not null) THEN
                           update visites set vip=E_vip where visiteid=E_ID;
                    end if;
                     if (E_debutprevu is null) or (E_finprevu is null) THEN
                        update visites set DEBUTPREVU=TO_DATE(SYSDATE,'DD/MM/YYYY HH24:MI:SS'), FINPREVU=TO_DATE(SYSDATE,'DD/MM/YYYY HH24:MI:SS') WHERE VISITEID=E_ID ;
                    END IF;
                    if (E_hdebutprevu is null) THEN
                        update visites set HDEBUTPREVU=TO_DATE('08:00','HH24:MI') WHERE VISITEID=E_ID;
                    END IF;
                    if (E_hfinprevu is null) THEN
                        update visites set HFINPREVU=TO_DATE('23:00','HH24:MI') WHERE VISITEID=E_ID;
                    END IF;
                    update visites set ifonction=(SELECT LIBELLE FROM FONCTION WHERE CODEFONCTION=(SELECT CODEFONCTION FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=E_idint)),istatut=(SELECT LIBELLE FROM NATURE WHERE NATUREID=(SELECT NATUREID FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=E_idint)), idatenaissance=(SELECT DATENAISSANCE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=E_idint),inomjeunefille=(SELECT NOMJEUNEFILLE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=E_idint)  where visiteid=E_ID;
                    E_nbinsert := E_nbinsert+1;
                else
                    E_ID := '0';
                end IF;
                E_ID := E_ID || ',' || TO_CHAR(E_nbinsert) || ',' || TO_CHAR(E_nbupdate);
            END IF;
        ELSE
            E_ID := '0,' || TO_CHAR(E_nbinsert) || ',' || TO_CHAR(E_nbupdate);
        END IF;
    ELSE
        E_ID := '0,' || TO_CHAR(E_nbinsert) || ',' || TO_CHAR(E_nbupdate);
    END IF;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_CORRESPONDANCE(
    E_flagin INT,
    E_champctrl varchar2,

    E_libsSrc varchar2,--libsrc1,libsrc2,libsrc3...
    E_rangsSrc varchar2,--rang(libsrc1),rang(libsrc2),rang(libsrc3)...
    E_libDst varchar2,
    E_cfg_fichier varchar2,
    E_corres_rang int,

    E_ID out VARCHAR2
)
IS
    E_CORRESID INT;
    E_cfg_fichierid INT;

    E_tmp int;
BEGIN


    if(LENGTH(TRIM(TRANSLATE(E_cfg_fichier, ' +-.0123456789', ' '))) is null) THEN

        select count(*) into E_tmp from cfg_fichier where cfg_fichierid=CAST(E_cfg_fichier as int);

        if(E_tmp>0)then
            E_cfg_fichierid := cast(E_cfg_fichier as int);
        ELSE

            select count(*) into E_tmp from cfg_fichier where libelle=E_cfg_fichier;

            if(E_tmp>0)then
                select cfg_fichierid into E_cfg_fichierid from cfg_fichier where libelle=E_cfg_fichier and rownum=1;
            ELSE
                E_cfg_fichierid := -1;
            END IF;
        END IF;
    ELSE

        select count(*) into E_tmp from cfg_fichier where libelle=E_cfg_fichier;

        if(E_tmp>0)then
             select cfg_fichierid into E_cfg_fichierid from cfg_fichier where libelle=E_cfg_fichier AND rownum=1;
        ELSE
            E_cfg_fichierid := -1;
        END IF;
    END IF;



    if(E_cfg_fichierid<>-1)then

        select count(*) into E_tmp from correspondance where corresid = CAST(E_ID as int);

        if(E_tmp>0)then

            update correspondance
            set libsSrc=E_libsSrc,rangsSrc=E_rangsSrc,libDst=E_libDst,cfg_fichierid=E_cfg_fichierid,corres_rang = E_corres_rang,datemaj=sysdate
            WHERE Corresid = CAST(E_ID as int);

            E_ID := E_ID || ',0,1';
        ELSE

            select count(*) into E_tmp from correspondance where cfg_fichierid=E_cfg_fichierid and libsSrc=E_libsSrc AND rangsSrc = E_rangsSrc AND libDst=E_libDst AND corres_rang=E_corres_rang;

            if(E_tmp>0)then

                select CAST(corresid as VARCHAR2(18)) into E_ID from correspondance where cfg_fichierid=E_cfg_fichierid and libsSrc=E_libsSrc AND rangsSrc = E_rangsSrc AND libDst=E_libDst AND corres_rang=E_corres_rang AND rownum=1;

                E_ID := E_ID || ',0,0';
            ELSE

                select nvl(max(nvl(corresid,0)),0) into E_CORRESID from correspondance;
                if(E_CORRESID is null)then
                    E_CORRESID := 0;
                END IF;
                E_CORRESID := E_CORRESID+1;
                insert into correspondance(Corresid,libsSrc,rangsSrc,libDst,cfg_fichierid,corres_rang,datemaj,datecreation)
                VALUES(E_CORRESID,E_libsSrc,E_rangsSrc,E_libDst,E_cfg_fichierid,E_corres_rang,sysdate,sysdate);

                E_ID := cast(E_corresid as varchar) || ',1,0';
            END IF;
        END IF;
    ELSE
        E_ID := '-1,0,0';
    END IF;

END;
/
commit;

CREATE OR REPLACE PROCEDURE PS_TACHE_ORDER
IS
    CURSOR EMP IS SELECT TACHEID FROM TACHE WHERE ACTIF<>-2 ORDER BY TACHE_RANG ASC;
    LC$ID TACHE.TACHEID%Type ;
    MYINDICE INT;
BEGIN
    MYINDICE:=0;
    Open EMP ; -- ouverture du curseur
    Loop -- boucle sur les lignes
    Fetch EMP Into LC$ID ; -- Lecture d'une ligne
    Exit When EMP%NOTFOUND ; -- sortie lorsque le curseur ne ramène plus de ligne
    UPDATE TACHE SET TACHE_RANG=MYINDICE WHERE TACHEID=LC$ID;
    MYINDICE:=MYINDICE+1;
    End loop ;
    Close  EMP ; -- fermeture du curseur
END;
/

COMMIT;

CREATE OR REPLACE PROCEDURE PS_TACHE_UPDOWN
 (UPDOWN_ID NUMBER,
 SENS VARCHAR2)
IS
 MYRG INT;
 MYRULECOUNT INT;
BEGIN

 SELECT COUNT(*) INTO MYRULECOUNT FROM TACHE WHERE ACTIF<>-2 ;

 SELECT TACHE_RANG INTO MYRG FROM TACHE WHERE TACHEID=UPDOWN_ID;

 IF (SENS='UP') AND (MYRG>0)  THEN
  UPDATE TACHE SET TACHE_RANG=MYRG WHERE TACHE_RANG=MYRG-1 ;
  UPDATE TACHE SET TACHE_RANG=MYRG-1 WHERE TACHEID=UPDOWN_ID  ;
 ELSE
  IF  (SENS='DOWN') AND (MYRG<MYRULECOUNT-1)  THEN
   UPDATE TACHE SET TACHE_RANG=MYRG WHERE TACHE_RANG=MYRG+1 ;
   UPDATE TACHE SET TACHE_RANG=MYRG+1 WHERE TACHEID=UPDOWN_ID  ;
  END IF;
 END IF;
COMMIT;
END;
/

COMMIT;


CREATE OR REPLACE PROCEDURE PS_ZCL27_NEXTUSER
    (E_RET OUT VARCHAR2)
IS
    E_MAX INT;
    E_NUM INT;
BEGIN
    E_MAX := 100000;

    SELECT SEQ_ZCL37_CTPUSER.NEXTVAL INTO E_NUM FROM DUAL;

    IF E_NUM >= E_MAX THEN
        EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_ZCL37_CTPUSER';
        EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_ZCL37_CTPUSER';
        SELECT SEQ_ZCL37_CTPUSER.NEXTVAL INTO E_NUM FROM DUAL;
    END IF;

    E_RET := E_NUM;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_ZCL27_NEXTPWD
    (E_RET OUT VARCHAR2)
IS
    E_MAX INT;
    E_NUM INT;
    E_OFFSET INT;
BEGIN
    E_OFFSET := 109654;
    E_MAX := 100000;

    SELECT SEQ_ZCL37_CPTPWD.NEXTVAL INTO E_NUM FROM DUAL;

    IF E_NUM >= E_MAX THEN
        EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_ZCL37_CPTPWD';
        EXECUTE IMMEDIATE 'CREATE SEQUENCE SEQ_ZCL37_CPTPWD';
        SELECT SEQ_ZCL37_CPTPWD.NEXTVAL INTO E_NUM FROM DUAL;
    END IF;

    E_RET := E_OFFSET+E_NUM;
END;
/
COMMIT;

create or replace function BLOBTOVARCHAR(B BLOB)
return varchar is
  c clob;
  n number;
  T number;
begin

  T := dbms_lob.GETLENGTH(B);

  if (b is null) then
    return null;
  end if;
  if (T = 0 ) then
    return empty_clob();
  end if;
  dbms_lob.createtemporary(c,true);
  n:=1;
  while (n+32767<=T) loop
    dbms_lob.writeappend(c,32767,utl_raw.cast_to_varchar2(dbms_lob.substr(b,32767,n)));
    n:=n+32767;
  end loop;
  dbms_lob.writeappend(c,T-n+1,utl_raw.cast_to_varchar2(dbms_lob.substr(b,T-n+1,n)));
  return TO_CHAR(SUBSTR(c,1,4000));
end;
/
COMMIT;

--    PROCEDURE STOCKEE : PS_TLQM_VERIF
CREATE OR REPLACE PROCEDURE PS_TLQM_VERIF
IS
BEGIN
 UPDATE SITE SET TLMQ_HEURE_FIN='23:30' WHERE TLMQ_HEURE_FIN=':';
 UPDATE SITE SET TLMQ_HEURE_EXEC='23:00' WHERE TLMQ_HEURE_FIN=':';
 UPDATE SITE SET TLMQ_DERN_EXEC=TRUNC(SYSDATE-1) WHERE TLMQ_DERN_EXEC IS NULL;
 COMMIT;
END;
/
COMMIT;

-- ACCES PARKING
CREATE OR REPLACE PROCEDURE PREVISITE_LPM
    (E_VISITEID IN VARCHAR2,
    E_VALEUR IN VARCHAR2)
IS
BEGIN
    UPDATE VISITES SET ATTENDU = E_VALEUR, DATEMAJ = SYSDATE WHERE VISITEID = E_VISITEID;
    COMMIT;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_CORRESPONDANCE(
    E_flagin INT,
    E_champctrl varchar2,

    E_libsSrc varchar2,--libsrc1,libsrc2,libsrc3...
    E_rangsSrc varchar2,--rang(libsrc1),rang(libsrc2),rang(libsrc3)...
    E_libDst varchar2,
    E_cfg_fichier varchar2,
    E_corres_rang int,

    E_ID out VARCHAR2
)
IS
    E_CORRESID INT;
    E_cfg_fichierid INT;
    E_tmp int;
BEGIN
    if(LENGTH(TRIM(TRANSLATE(E_cfg_fichier, ' +-.0123456789', ' '))) = null) THEN

        select count(*) into E_tmp from cfg_fichier where cfg_fichierid=CAST(E_cfg_fichier as int);

        if(E_tmp>0)then
            E_cfg_fichierid := cast(E_cfg_fichier as int);
        ELSE

            select count(*) into E_tmp from cfg_fichier where libelle=E_cfg_fichier;

            if(E_tmp>0)then
                select cfg_fichierid into E_cfg_fichierid from cfg_fichier where libelle=E_cfg_fichier and rownum=1;
            ELSE
                E_cfg_fichierid := -1;
            END IF;
        END IF;
    ELSE

        select count(*) into E_tmp from cfg_fichier where libelle=E_cfg_fichier;

        if(E_tmp>0)then
             select cfg_fichierid into E_cfg_fichierid from cfg_fichier where libelle=E_cfg_fichier AND rownum=1;
        ELSE
            E_cfg_fichierid := -1;
        END IF;
    END IF;


    if(E_cfg_fichierid<>-1)then

        select count(*) into E_tmp from correspondance where corresid = CAST(E_ID as int);

        if(E_tmp>0)then

            update correspondance
            set libsSrc=E_libsSrc,rangsSrc=E_rangsSrc,libDst=E_libDst,cfg_fichierid=E_cfg_fichierid,corres_rang = E_corres_rang,datemaj=sysdate
            WHERE Corresid = CAST(E_ID as int);

            E_ID := E_ID || ',0,1';
        ELSE

            select count(*) into E_tmp from correspondance where cfg_fichierid=E_cfg_fichierid and libsSrc=E_libsSrc AND rangsSrc = E_rangsSrc AND libDst=E_libDst AND corres_rang=E_corres_rang;

            if(E_tmp>0)then

                select corresid into E_ID from correspondance where cfg_fichierid=E_cfg_fichierid and libsSrc=E_libsSrc AND rangsSrc = E_rangsSrc AND libDst=E_libDst AND corres_rang=E_corres_rang AND rownum=1;

                E_ID := E_ID || ',0,0';
            ELSE

                select max(corresid) into E_CORRESID from correspondance;
                if(E_CORRESID is null)then
                    E_CORRESID := 0;
                END IF;
                E_CORRESID := E_CORRESID+1;
                insert into correspondance(Corresid,libsSrc,rangsSrc,libDst,cfg_fichierid,corres_rang,datemaj,datecreation)
                VALUES(E_CORRESID,E_libsSrc,E_rangsSrc,E_libDst,E_cfg_fichierid,E_corres_rang,sysdate,sysdate);

                E_ID := cast(E_corresid as varchar) || ',1,0';
            END IF;
        END IF;
    ELSE
        E_ID := '-1,0,0';
    END IF;

END;
/
COMMIT;

CREATE OR REPLACE FUNCTION F_DEDUP_REMOVESPECHARS(MYSTR VARCHAR2) RETURN VARCHAR2
IS
STRTEMP VARCHAR2(4000);
BEGIN
STRTEMP := LOWER(REPLACE(MYSTR,' ',''));
STRTEMP := REPLACE(STRTEMP,'-','');
STRTEMP:=Replace(STRTEMP,'ã','a');
STRTEMP:=Replace(STRTEMP,'à','a');
STRTEMP:=Replace(STRTEMP,'â','a');
STRTEMP:=Replace(STRTEMP,'ä','a');
STRTEMP:=Replace(STRTEMP,'ç','c');
STRTEMP:=Replace(STRTEMP,'é','e');
STRTEMP:=Replace(STRTEMP,'è','e');
STRTEMP:=Replace(STRTEMP,'ê','e');
STRTEMP:=Replace(STRTEMP,'ë','e');
STRTEMP:=Replace(STRTEMP,'î','i');
STRTEMP:=Replace(STRTEMP,'ï','i');
STRTEMP:=Replace(STRTEMP,'ñ','n');
STRTEMP:=Replace(STRTEMP,'õ','o');
STRTEMP:=Replace(STRTEMP,'ô','o');
STRTEMP:=Replace(STRTEMP,'ö','o');
STRTEMP:=Replace(STRTEMP,'û','u');
STRTEMP:=Replace(STRTEMP,'ü','u');
STRTEMP:=Replace(STRTEMP,'ù','u');
STRTEMP:=Replace(STRTEMP,'ÿ','y');
STRTEMP:=Replace(STRTEMP,'''','');
STRTEMP:=Replace(STRTEMP,',','');
STRTEMP:=Replace(STRTEMP,'-','');
STRTEMP:=Replace(STRTEMP,'_','');
RETURN STRTEMP ;
END ;
/
COMMIT;

CREATE OR REPLACE FUNCTION F_DEDUP_COMMPREFIXELENGTH(MYSTRDN VARCHAR2, MYSTRUP VARCHAR2) RETURN INT

IS locnbr INT;
distancemin INT ;
i INT;
strindex VARCHAR2(4000);
STRUP VARCHAR2(4000);
STRDN VARCHAR2(4000);
STRDNC VARCHAR2(1);
STRUPC VARCHAR2(1);
maxlength int;
BEGIN
locnbr:=0;
STRDN:=REPLACE(MYSTRDN,' ','');
STRUP:=REPLACE(MYSTRUP,' ','');
i := 0;
SELECT MIN(A) INTO distancemin from (SELECT NVL(LENGTH(STRDN),0) as A FROM DUAL UNION SELECT NVL(LENGTH(STRDN),0) AS A FROM DUAL) ;
SELECT MIN(B) INTO maxlength FROM (SELECT distancemin as B FROM DUAL UNION SELECT 4 AS A FROM DUAL) ;
WHILE i < maxlength LOOP
    STRUPC:=SUBSTR(STRUP,i+1,1);
    STRDNC:=SUBSTR(STRUP,i+1,1);
    if (SUBSTR(STRUP,i+1,1)=SUBSTR(STRDN,i+1,1)) THEN
        locnbr:=locnbr+1;
    ELSE
     EXIT;
    END IF ;
    i:=i+1;
END LOOP ;
RETURN locnbr;
END;
/
COMMIT;



CREATE OR REPLACE FUNCTION F_DEDUP_GETWINKLERNUMBER(MYSTRDN VARCHAR2, MYSTRUP VARCHAR2) RETURN NUMBER
IS
locnbr INT;
distancemin INT;
i INT;
j INT;
k INT;
strindex VARCHAR2(4000);
strij VARCHAR2(4000);
STRUP VARCHAR2(4000);
STRDN VARCHAR2(4000);
pass VARCHAR2(4000);
STRDNC VARCHAR2(1);
STRUPC VARCHAR2(1);
nbr_transpos int;
nbr_communs int;
jaro decimal(5,3);
winkler decimal(5,3);
seuil int;
myretour int;

BEGIN
locnbr:=0;
nbr_communs:=0;
STRDN:=F_DEDUP_REMOVESPECHARS(MYSTRDN);
STRUP:=F_DEDUP_REMOVESPECHARS(MYSTRUP);
IF LENGTH(STRDN)<LENGTH(STRUP) THEN
 PASS:=STRDN;
 STRDN:=STRUP;
 STRUP:=PASS ;
END IF;
strindex:='';
 SELECT MIN(A) INTO distancemin from (SELECT NVL(LENGTH(STRDN),0) as A FROM DUAL UNION SELECT NVL(LENGTH(STRDN),0) AS A FROM DUAL) ;
 strij:='';
 distancemin:=distancemin/2.0;
 nbr_transpos:=0;
 i:=0;
  WHILE i < LENGTH(STRUP) LOOP
 j := 0;
 STRUPC:=SUBSTR(STRUP,i+1,1);
 WHILE j < LENGTH(STRDN) LOOP
        strij:='['||i||','||j||']';
       STRDNC:=SUBSTR(STRDN,j+1,1);
        IF((STRUPC=STRDNC) AND (ABS(i-j)<=distancemin) AND (strindex is null or INSTR(strindex,strij)=0 )) THEN
          nbr_communs:=nbr_communs+1;
     if (i<>j) then
    nbr_transpos:=nbr_transpos+1;
    --transpos:=transpos||STRDNC||'('||i||','||j||')';
     end if ;
         k:=i;
         WHILE k < LENGTH(STRUP) LOOP
                    strindex:=strindex||'['||k||','||j||']';
     k:=k+1;
      END LOOP;
        EXIT ;
  END IF;
  j:=j+1;
 END LOOP;
    i:=i+1;
 END LOOP;
 IF nbr_communs=0 THEN
 myretour:= 0;
 ELSE
    jaro :=  (1.0 / 3 * (nbr_communs / (1.0 * LENGTH(STRUP)) + nbr_communs / (1.0 * LENGTH(STRDN)) + (nbr_communs-0.5*nbr_transpos)/(1.0*nbr_communs)));
    seuil := 71 ;
    winkler := jaro+ F_DEDUP_COMMPREFIXELENGTH(STRDN,STRUP)*0.1*(1-jaro);
    myretour:=Round(winkler*100.0,0) ;
 END IF;
  RETURN myretour ;
END;
/
COMMIT;



CREATE OR REPLACE PROCEDURE PS_DEDUP_INIT_INTERLOCUTEUR
( MYJW INT)
AS
BEGIN
        DELETE FROM DEDUP_DEDUP where ENTITE='INTERLOCUTEUR' ;
        DELETE FROM TEMPSOC;
        DELETE FROM TEMPSOC2;
        INSERT INTO TEMPSOC (TMPID,TMPNOM,TMPRANG) (SELECT INTERLOCUTEURID,NVL(NOMPRENOM,''), ROW_NUMBER() OVER(ORDER BY DATECREATION)  FROM INTERLOCUTEUR);
        INSERT INTO TEMPSOC2 (TMP2ID,TMPNOM,TMPRANG) (SELECT INTERLOCUTEURID,NVL(NOMPRENOM,''), ROW_NUMBER() OVER(ORDER BY DATECREATION)  FROM INTERLOCUTEUR) ;
        INSERT INTO DEDUP_DEDUP (DEDUP1ID, DEDUP2ID,JW)
    (SELECT R1.TMPID,R2.TMP2ID,F_DEDUP_GETWINKLERNUMBER(R2.TMPNOM,R1.TMPNOM) FROM TEMPSOC R1, TEMPSOC2 R2 WHERE R1.TMPID<>R2.TMP2ID AND R1.TMPRANG<R2.TMPRANG AND F_DEDUP_GETWINKLERNUMBER(R2.TMPNOM,R1.TMPNOM)>= MYJW  );
    INSERT INTO DEDUP_DEDUP (DEDUP1ID,DEDUP2ID,JW) (SELECT DEDUP2ID,DEDUP1ID,JW FROM DEDUP_DEDUP WHERE ENTITE IS NULL) ;
    UPDATE DEDUP_DEDUP SET ENTITE='INTERLOCUTEUR' WHERE ENTITE IS NULL ;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_DEDUP_INIT_SOCIETE
( MYJW INT)
IS
BEGIN
        DELETE FROM DEDUP_DEDUP where ENTITE='SOCIETE' ;
        DELETE FROM TEMPSOC;
        DELETE FROM TEMPSOC2;
        INSERT INTO TEMPSOC (TMPID,TMPNOM,TMPRANG) (SELECT SOCIETEID,NVL(NOM,''), ROW_NUMBER() OVER(ORDER BY DATECREATION)  FROM SOCIETE);
        INSERT INTO TEMPSOC2 (TMP2ID,TMPNOM,TMPRANG) (SELECT SOCIETEID,NVL(NOM,''), ROW_NUMBER() OVER(ORDER BY DATECREATION)  FROM SOCIETE) ;
        INSERT INTO DEDUP_DEDUP (DEDUP1ID, DEDUP2ID,JW)
    (SELECT R1.TMPID,R2.TMP2ID, F_DEDUP_GETWINKLERNUMBER(R2.TMPNOM,R1.TMPNOM) FROM TEMPSOC R1, TEMPSOC2 R2 WHERE R1.TMPID<>R2.TMP2ID AND R1.TMPRANG<R2.TMPRANG AND F_DEDUP_GETWINKLERNUMBER(R2.TMPNOM,R1.TMPNOM)>= MYJW  );
    INSERT INTO DEDUP_DEDUP (DEDUP1ID,DEDUP2ID,JW) (SELECT DEDUP2ID,DEDUP1ID,JW FROM DEDUP_DEDUP WHERE ENTITE IS NULL) ;
    UPDATE DEDUP_DEDUP SET ENTITE='SOCIETE' WHERE ENTITE IS NULL ;

END;
/
COMMIT;


CREATE OR REPLACE PROCEDURE PS_DEDUP_INIT_RESIDANT
(
MYJW INT)
IS
BEGIN
        DELETE FROM DEDUP_DEDUP where ENTITE='RESIDANTS' ;
        DELETE FROM TEMPSOC ;
        DELETE FROM TEMPSOC2 ;
        INSERT INTO TEMPSOC (TMPID,TMPNOM,TMPRANG) (SELECT RESIDANTID,NVL(NOMPRENOM,''), ROW_NUMBER() OVER(ORDER BY DATECREATION)  FROM RESIDANTS) ;
        INSERT INTO TEMPSOC2 (TMP2ID,TMPNOM,TMPRANG) (SELECT RESIDANTID,NVL(NOMPRENOM,''), ROW_NUMBER() OVER(ORDER BY DATECREATION)  FROM RESIDANTS) ;
        INSERT INTO DEDUP_DEDUP (DEDUP1ID, DEDUP2ID,JW)
    (SELECT R1.TMPID,R2.TMP2ID,F_DEDUP_GETWINKLERNUMBER(R2.TMPNOM,R1.TMPNOM) FROM TEMPSOC R1, TEMPSOC2 R2 WHERE R1.TMPID<>R2.TMP2ID AND R1.TMPRANG<R2.TMPRANG AND F_DEDUP_GETWINKLERNUMBER(R2.TMPNOM,R1.TMPNOM)>= MYJW  );
    INSERT INTO DEDUP_DEDUP (DEDUP1ID,DEDUP2ID,JW) (SELECT DEDUP2ID,DEDUP1ID,JW FROM DEDUP_DEDUP WHERE ENTITE IS NULL) ;
    UPDATE DEDUP_DEDUP SET ENTITE='RESIDANTS' WHERE ENTITE IS NULL;
END;
/
COMMIT;


CREATE OR REPLACE PROCEDURE PS_DEDUP_ROUTINE
     (MYENTITEID VARCHAR2,
     MYLIBENTITE VARCHAR2,
     MYENTITE VARCHAR2,
     MYJW INT)
IS
BEGIN

    DELETE FROM DEDUP_DEDUP WHERE (DEDUP2ID=MYENTITEID OR DEDUP1ID=MYENTITEID) AND ENTITE=MYENTITE ;
    IF MYENTITE='INTERLOCUTEUR' THEN
        INSERT INTO DEDUP_DEDUP (DEDUP1ID,DEDUP2ID,ENTITE,JW)
        (SELECT MYENTITEID,R2.INTERLOCUTEURID,'INTERLOCUTEUR', F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOMPRENOM),UPPER(MYLIBENTITE)) FROM INTERLOCUTEUR R2 WHERE MYENTITEID<>R2.INTERLOCUTEURID  AND F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOMPRENOM),UPPER(MYLIBENTITE))>=MYJW );
        INSERT INTO DEDUP_DEDUP (DEDUP2ID,DEDUP1ID,ENTITE,JW)
        (SELECT MYENTITEID,R2.INTERLOCUTEURID,'INTERLOCUTEUR', F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOMPRENOM),UPPER(MYLIBENTITE)) FROM INTERLOCUTEUR R2 WHERE MYENTITEID<>R2.INTERLOCUTEURID  AND F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOMPRENOM),UPPER(MYLIBENTITE))>=MYJW );
    END IF;
    IF MYENTITE='SOCIETE' THEN
                INSERT INTO DEDUP_DEDUP (DEDUP1ID,DEDUP2ID,ENTITE,JW)
                (SELECT MYENTITEID,R2.SOCIETEID,'SOCIETE',F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOM),UPPER(MYLIBENTITE)) FROM SOCIETE R2 WHERE MYENTITEID<>R2.SOCIETEID  AND F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOM),UPPER(MYLIBENTITE))>=MYJW)   ;
                INSERT INTO DEDUP_DEDUP (DEDUP2ID,DEDUP1ID,ENTITE,JW)
                (SELECT MYENTITEID,R2.SOCIETEID,'SOCIETE',F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOM),UPPER(MYLIBENTITE)) FROM SOCIETE R2 WHERE MYENTITEID<>R2.SOCIETEID  AND F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOM),UPPER(MYLIBENTITE))>=MYJW)   ;
    END IF;
    IF MYENTITE='RESIDANTS' THEN
                INSERT INTO DEDUP_DEDUP (DEDUP1ID,DEDUP2ID,ENTITE,JW)
                (SELECT MYENTITEID,R2.RESIDANTID,'RESIDANTS',F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOMPRENOM),UPPER(MYLIBENTITE)) FROM RESIDANTS R2 WHERE MYENTITEID<>R2.RESIDANTID  AND F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOMPRENOM),UPPER(MYLIBENTITE))>=MYJW);
                INSERT INTO DEDUP_DEDUP (DEDUP2ID,DEDUP1ID,ENTITE,JW)
                (SELECT MYENTITEID,R2.RESIDANTID,'RESIDANTS',F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOMPRENOM),UPPER(MYLIBENTITE)) FROM RESIDANTS R2 WHERE MYENTITEID<>R2.RESIDANTID  AND F_DEDUP_GETWINKLERNUMBER(UPPER(R2.NOMPRENOM),UPPER(MYLIBENTITE))>=MYJW);
    END IF;
END ;
/
COMMIT;



CREATE OR REPLACE PROCEDURE PS_DEDUP_FLAG (
       MYDEDUP1ID VARCHAR2,
     MYDEDUP2ID VARCHAR2,
     MYENTITE VARCHAR2 )
IS
BEGIN

    DELETE FROM DEDUP_DEDUP WHERE ENTITE=MYENTITE AND (DEDUP1ID=MYDEDUP1ID AND DEDUP2ID=MYDEDUP2ID) ;
    DELETE FROM DEDUP_DEDUP WHERE ENTITE=MYENTITE AND (DEDUP1ID=MYDEDUP2ID AND DEDUP2ID=MYDEDUP1ID);
    INSERT INTO DEDUP_DEDUP (DEDUP1ID,DEDUP2ID,SIMIL_FLAG,ENTITE) VALUES (MYDEDUP1ID,MYDEDUP2ID,'0',MYENTITE);
    INSERT INTO DEDUP_DEDUP (DEDUP1ID,DEDUP2ID,SIMIL_FLAG,ENTITE) VALUES (MYDEDUP2ID,MYDEDUP1ID,'0',MYENTITE)    ;
END ;
/
COMMIT;


CREATE OR REPLACE PROCEDURE PS_DEDUP_INTERLOCUTEUR(MYIDSOURCE IN VARCHAR2,MYIDDEST IN VARCHAR2)
IS
BEGIN
 UPDATE VISITES SET INTERLOCUTEURID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE INTERLOCUTEURID=MYIDDEST ;
 UPDATE COLISEMIS SET INTERLOCUTEURID=MYIDSOURCE,DATEMAJ=SYSDATE WHERE INTERLOCUTEURID=MYIDDEST ;
 UPDATE COLISRECU SET INTERLOCUTEURID=MYIDSOURCE,DATEMAJ=SYSDATE WHERE INTERLOCUTEURID=MYIDDEST ;
 UPDATE CONSIGNE SET INTERLOCUTEURID=MYIDSOURCE,DATEMAJ=SYSDATE WHERE INTERLOCUTEURID=MYIDDEST AND RESIDANTID='VISITEUR';
 UPDATE CONTACT SET INTERLOCUTEURID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE INTERLOCUTEURID=MYIDDEST ;
 UPDATE DEVIS SET INTERLOCUTEURID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE INTERLOCUTEURID=MYIDDEST ;


 UPDATE HLGPARTICIPANT SET INTERLOCUTEURID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE INTERLOCUTEURID=MYIDDEST ;
 UPDATE HVISITES SET INTERLOCUTEURID=MYIDSOURCE,DATEMAJ=SYSDATE WHERE INTERLOCUTEURID=MYIDDEST ;
 UPDATE IDENTITES SET INTERLOCUTEURID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE INTERLOCUTEURID=MYIDDEST ;
 UPDATE INTER_RSERVICE SET INTERLOCUTEURID=MYIDSOURCE WHERE INTERLOCUTEURID=MYIDDEST ;
 UPDATE LGPARTICIPANT SET INTERLOCUTEURID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE INTERLOCUTEURID=MYIDDEST ;

 UPDATE OJOURNAL_PERSMVT SET INTERLOCUTEURID=MYIDSOURCE WHERE INTERLOCUTEURID=MYIDDEST ;
 UPDATE VISITES_TEMP SET INTERLOCUTEURID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE INTERLOCUTEURID=MYIDDEST ;
 UPDATE PASSAGERTAXI SET INTERLOCUTEURID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE INTERLOCUTEURID=MYIDDEST ;
 DELETE FROM INTER_ACTION  WHERE INTERLOCUTEURID=MYIDDEST ;
 UPDATE XANNEXE SET ETAT='-1', DATEMAJ=SYSDATE WHERE ORIGINEID=MYIDDEST AND ORIGINE='INTERLOCUTEUR' ;

 DELETE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=MYIDDEST;
 DELETE FROM DEDUP_DEDUP WHERE DEDUP1ID=MYIDDEST OR DEDUP2ID=MYIDDEST;
END;
/
COMMIT;


CREATE OR REPLACE PROCEDURE PS_DEDUP_CIVILITE(MYIDSOURCE IN VARCHAR2,MYIDDEST IN VARCHAR2)
IS
LIBCOURTCIVILITESRC VARCHAR2(30);
LIBCIVILITEDEST VARCHAR2(30);
LIBCOURTCIVILITEDEST VARCHAR2(30);
BEGIN

    IF MYIDDEST<>'0' THEN
		SELECT LIBELLECOURT INTO LIBCOURTCIVILITESRC FROM CIVILITE WHERE CODECIVILITE=MYIDSOURCE;
		
		SELECT CIVILITE INTO LIBCIVILITEDEST FROM CIVILITE WHERE CODECIVILITE=MYIDDEST;
		SELECT LIBELLECOURT INTO LIBCOURTCIVILITEDEST FROM CIVILITE WHERE CODECIVILITE=MYIDDEST;
		
		UPDATE HLGPARTICIPANT SET CIVILITE=LIBCOURTCIVILITESRC, DATEMAJ=SYSDATE WHERE CIVILITE=LIBCOURTCIVILITEDEST;

		UPDATE RESIDANTS SET CIVILITE=LIBCOURTCIVILITESRC, DATEMAJ=SYSDATE WHERE CODECIVILITE=MYIDDEST;
		UPDATE RESIDANTS SET CODECIVILITE=MYIDSOURCE, DATEMAJ=SYSDATE WHERE CODECIVILITE=MYIDDEST;
		
		UPDATE INTERLOCUTEUR SET CIVILITE=LIBCOURTCIVILITESRC, DATEMAJ=SYSDATE WHERE CODECIVILITE=MYIDDEST;
		UPDATE INTERLOCUTEUR SET CODECIVILITE=MYIDSOURCE, DATEMAJ=SYSDATE WHERE CODECIVILITE=MYIDDEST;
		
	
		
		UPDATE LGPARTICIPANT SET CIVILITE=LIBCOURTCIVILITESRC, DATEMAJ=SYSDATE WHERE CIVILITE=LIBCOURTCIVILITEDEST;
		
		UPDATE USERS SET CIVILITEID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE CIVILITEID=MYIDDEST;
		
		UPDATE CFGDEFAULTAGENDA SET CODECIVILITE=MYIDSOURCE WHERE CODECIVILITE=MYIDDEST;

		DELETE FROM CIVILITE WHERE CODECIVILITE=MYIDDEST;
		DELETE FROM DEDUP_DEDUP WHERE DEDUP1ID=MYIDDEST OR DEDUP2ID=MYIDDEST;
	END IF;

END;
/
COMMIT;
CREATE OR REPLACE PROCEDURE PS_DEDUP_RESIDANTS(MYIDSOURCE IN VARCHAR2,MYIDDEST IN VARCHAR2)
IS
BEGIN

 UPDATE VISITES SET RESIDANTID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE RESIDANTID=MYIDDEST ;
 UPDATE VISITES SET EXTERNALID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE EXTERNALID=MYIDDEST ;

 UPDATE VISITES_RESIDANTS SET RESIDANTID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE RESIDANTID=MYIDDEST ;

 UPDATE VISITE_CONTROLE SET RESIDANTID=MYIDSOURCE  WHERE RESIDANTID=MYIDDEST ;
 UPDATE SECRETARIAT SET RESIDANTID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE RESIDANTID=MYIDDEST ;
 UPDATE SECRETARIAT SET RESIDANTID2=MYIDSOURCE, DATEMAJ=SYSDATE WHERE RESIDANTID2=MYIDDEST ;


 UPDATE COLISEMIS SET RESIDANTID=MYIDSOURCE,DATEMAJ=SYSDATE WHERE RESIDANTID=MYIDDEST ;
 UPDATE COLISRECU SET RESIDANTID=MYIDSOURCE,DATEMAJ=SYSDATE WHERE RESIDANTID=MYIDDEST ;

 UPDATE CONSIGNE SET INTERLOCUTEURID=MYIDSOURCE,DATEMAJ=SYSDATE WHERE INTERLOCUTEURID=MYIDDEST AND RESIDANTID='RESIDANT';

 UPDATE DROITS SET RESIDANTID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE RESIDANTID=MYIDDEST ;
 UPDATE DROITS SET DELEGATIONID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE DELEGATIONID=MYIDDEST ;

 UPDATE HLGPARTICIPANT SET RESIDANTID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE RESIDANTID=MYIDDEST ;

 UPDATE HVISITES SET RESIDANTID=MYIDSOURCE,DATEMAJ=SYSDATE WHERE RESIDANTID=MYIDDEST ;

 UPDATE INTER_RSERVICE SET RESIDANTID=MYIDSOURCE WHERE RESIDANTID=MYIDDEST ;

 UPDATE LGPARTICIPANT SET RESIDANTID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE RESIDANTID=MYIDDEST ;

 UPDATE LIEUPERMIS SET RESIDANTID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE RESIDANTID=MYIDDEST ;

 UPDATE VEHICULE_DEMANDE SET RESIDANTID=MYIDSOURCE WHERE RESIDANTID=MYIDDEST ;

 UPDATE VEHICULE SET RESIDANTID=MYIDSOURCE WHERE RESIDANTID=MYIDDEST ;

 UPDATE EVENEMENTCOLIS SET RESIDANTID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE RESIDANTID=MYIDDEST ;

 UPDATE USERS SET EXTERNALID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE EXTERNALID=MYIDDEST ;
 UPDATE USERS SET PROFIL_ID_ORGA=MYIDSOURCE, DATEMAJ=SYSDATE WHERE PROFIL_ID_ORGA=MYIDDEST ;
 UPDATE USERS SET PROFIL_ID_INTER=MYIDSOURCE, DATEMAJ=SYSDATE WHERE PROFIL_ID_INTER=MYIDDEST ;

 UPDATE PASSAGERTAXI SET RESIDANTID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE RESIDANTID=MYIDDEST ;

 UPDATE XANNEXE SET ETAT='-1', DATEMAJ=SYSDATE WHERE ORIGINEID=MYIDDEST AND ORIGINE='RESIDANT' ;

 UPDATE RESERVATION SET CODEANIMATEUR=MYIDSOURCE, DATEMAJ=SYSDATE WHERE CODEANIMATEUR=MYIDDEST ;
 UPDATE RESERVATION SET INTERLOCUTEURID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE INTERLOCUTEURID=MYIDDEST ;

 DELETE FROM RESIDANTS WHERE RESIDANTID=MYIDDEST;
 DELETE FROM DEDUP_DEDUP WHERE DEDUP1ID=MYIDDEST OR DEDUP2ID=MYIDDEST ;

END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_DEDUP_SOCIETE(MYIDSOURCE IN VARCHAR2,MYIDDEST IN VARCHAR2)
IS

BEGIN
    UPDATE CONTACT SET SOCIETEID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE SOCIETEID=MYIDDEST ;
    UPDATE DEPARTEMENT SET SOCIETEID=MYIDSOURCE,DATEMAJ=SYSDATE WHERE SOCIETEID=MYIDDEST ;
    UPDATE DEVIS SET SOCIETEID=MYIDSOURCE,DATEMAJ=SYSDATE WHERE SOCIETEID=MYIDDEST ;
    UPDATE DIRECTIONS SET SOCIETEID=MYIDSOURCE,DATEMAJ=SYSDATE WHERE SOCIETEID=MYIDDEST ;
    UPDATE INTERLOCUTEUR SET SOCIETEID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE SOCIETEID=MYIDDEST ;
    UPDATE INTERLOCUTEUR SET SOCIETE=(SELECT NOM FROM SOCIETE WHERE SOCIETEID=MYIDSOURCE), DATEMAJ=SYSDATE WHERE SOCIETEID=MYIDDEST ;
    UPDATE MARQUE SET SOCIETEID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE SOCIETEID=MYIDDEST ;


    UPDATE PARKING SET SOCIETEID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE SOCIETEID=MYIDDEST ;
    UPDATE POSTE SET SOCIETEID=MYIDSOURCE,DATEMAJ=SYSDATE WHERE SOCIETEID=MYIDDEST ;

    UPDATE PXACHAT SET SOCIETEID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE SOCIETEID=MYIDDEST ;
    UPDATE RESERVATION SET SOCIETEID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE SOCIETEID=MYIDDEST ;

    UPDATE RESIDANTS SET SOCIETEID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE SOCIETEID=MYIDDEST ;
    UPDATE RESIDANTS SET SOCIETE=(SELECT NOM FROM SOCIETE WHERE SOCIETEID=MYIDSOURCE), DATEMAJ=SYSDATE WHERE SOCIETEID=MYIDDEST     ;

    UPDATE SALLE SET SOCIETEID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE SOCIETEID=MYIDDEST ;

    --UPDATE SOCIETE_LOCALISATION SET SOCIETEID=MYIDSOURCE WHERE SOCIETEID=MYIDDEST ;
    UPDATE SOCIETE_LOCALISATION SET SOCIETEID=MYIDSOURCE WHERE SOCIETEID=MYIDDEST  AND LOCALISATIONID NOT IN (SELECT LOCALISATIONID FROM SOCIETE_LOCALISATION WHERE SOCIETEID=MYIDSOURCE);
    DELETE FROM SOCBAT  WHERE SOCIETEID=MYIDDEST ;
    DELETE FROM SOCMAR WHERE SOCIETEID=MYIDDEST ;
    DELETE FROM SOCSITE  WHERE SOCIETEID=MYIDDEST ;
    DELETE FROM SOCIETE_ACTION WHERE SOCIETEID=MYIDDEST ;

    UPDATE USERS SET SOCIETEID=MYIDSOURCE, DATEMAJ=SYSDATE WHERE SOCIETEID=MYIDDEST ;
    UPDATE XANNEXE SET ETAT='-1', DATEMAJ=SYSDATE WHERE ORIGINEID=MYIDDEST AND ORIGINE='SOCIETE' ;

    DELETE FROM SOCIETE WHERE SOCIETEID=MYIDDEST;
    DELETE FROM DEDUP_DEDUP WHERE DEDUP1ID=MYIDDEST OR DEDUP2ID=MYIDDEST;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_DEDUP_FONCTION(MYIDSOURCE IN VARCHAR2,MYIDDEST IN VARCHAR2)
IS
BEGIN

 UPDATE INTERLOCUTEUR SET CODEFONCTION=MYIDSOURCE, DATEMAJ=SYSDATE WHERE CODEFONCTION=MYIDDEST ;
 UPDATE PERSONNEL SET CODEFONCTION=MYIDSOURCE,DATEMAJ=SYSDATE WHERE CODEFONCTION=MYIDDEST ;
 UPDATE RESIDANTS SET CODEFONCTION=MYIDSOURCE,DATEMAJ=SYSDATE WHERE CODEFONCTION=MYIDDEST ;

 DELETE FROM FONCTION WHERE CODEFONCTION=MYIDDEST;
 DELETE FROM DEDUP_DEDUP WHERE DEDUP1ID=MYIDDEST OR DEDUP2ID=MYIDDEST;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_DEPLACE_VISITE(ENTITE IN VARCHAR2, E_VISITEID IN VARCHAR2,DESTINATAIRE IN VARCHAR2)
IS
BEGIN
IF ENTITE='INTERLOCUTEUR' THEN
    UPDATE VISITES SET NOMPRENOMVISIT=(SELECT NOMPRENOM FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=DESTINATAIRE) WHERE VISITEID=E_VISITEID;
    UPDATE VISITES SET SOCIETEVISIT=(SELECT S.NOM FROM SOCIETE S,INTERLOCUTEUR I WHERE I.SOCIETEID=S.SOCIETEID AND I.INTERLOCUTEURID=DESTINATAIRE) WHERE VISITEID=E_VISITEID;
    UPDATE VISITES SET ILIEUNAISSANCE=(SELECT LIEUNAISSANCE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=DESTINATAIRE) WHERE VISITEID=E_VISITEID;
    UPDATE VISITES SET INOMJEUNEFILLE=(SELECT NOMJEUNEFILLE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=DESTINATAIRE) WHERE VISITEID=E_VISITEID;
    UPDATE VISITES SET IDATENAISSANCE=(SELECT DATENAISSANCE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=DESTINATAIRE) WHERE VISITEID=E_VISITEID;
    UPDATE VISITES SET IFONCTION=(SELECT F.LIBELLE FROM FONCTION F,INTERLOCUTEUR I WHERE I.CODEFONCTION=F.CODEFONCTION AND I.INTERLOCUTEURID=DESTINATAIRE) WHERE VISITEID=E_VISITEID;
    UPDATE VISITES SET IPAYS=(SELECT P.LIBELLE FROM PAYS P,INTERLOCUTEUR I WHERE I.NATIONALITEID=P.PAYSID AND I.INTERLOCUTEURID=DESTINATAIRE) WHERE VISITEID=E_VISITEID;
    UPDATE VISITES SET INTERLOCUTEURID=DESTINATAIRE, DATEMAJ=SYSDATE WHERE VISITEID=E_VISITEID ;
    UPDATE HVISITES SET INTERLOCUTEURID=DESTINATAIRE,DATEMAJ=SYSDATE WHERE VISITEID=E_VISITEID ;
    UPDATE VISITES_TEMP SET INTERLOCUTEURID=DESTINATAIRE, DATEMAJ=SYSDATE WHERE VISITEID=E_VISITEID ;
END IF;
IF ENTITE='RESIDANT' THEN
    UPDATE VISITES SET NOMPRENOMRESID=(SELECT NOMPRENOM FROM RESIDANTS WHERE RESIDANTID=DESTINATAIRE) WHERE VISITEID=E_VISITEID;
    UPDATE VISITES SET SOCIETERESID=(SELECT S.NOM FROM SOCIETE S,RESIDANTS R WHERE R.SOCIETEID=S.SOCIETEID AND R.RESIDANTID=DESTINATAIRE) WHERE VISITEID=E_VISITEID;
    UPDATE VISITES SET RESIDANTID=DESTINATAIRE, DATEMAJ=SYSDATE WHERE VISITEID=E_VISITEID ;
    UPDATE HVISITES SET RESIDANTID=DESTINATAIRE,DATEMAJ=SYSDATE WHERE VISITEID=E_VISITEID ;
    UPDATE VISITES_TEMP SET RESIDANTID=DESTINATAIRE, DATEMAJ=SYSDATE WHERE VISITEID=E_VISITEID ;
END IF;
END;
/
 COMMIT;




CREATE OR REPLACE PROCEDURE PS_MODULE_PURGE(
    --INTERLOCUTEUR
    E_INTsansvisites VARCHAR2,
    E_INTsansvisitesnbjours VARCHAR2,
    E_INTsansvisitesdate varchar2,
    E_INTsesvisites varchar2,
    E_INTanonymevisites varchar2,
    E_INTnoninterdit varchar2,
    E_INTsescolis varchar2,
    E_INTsesconsignesetmessages varchar2,
    E_INTsescourstaxis varchar2,
    E_INTconsigne varchar2,
    --RESIDANTS
    E_RESnonactif VARCHAR2,
    E_RESsesvisites VARCHAR2,
    E_RESnonmajnbjours VARCHAR2,
    E_RESnonmajdate VARCHAR2,

    --VISITEUR
    E_VISdatantdeplusnbjour varchar2,
    E_VISanterieurdate varchar2,
    E_VISanonymevisites varchar2,
    --SOCIETE
    E_SOCnonutilise varchar2,

    --CONSIGNE
    E_CONsupmessageslus varchar2,

    --COLISEMIS/COLISRECU
    E_COLcolis varchar2,

    --TACHE_LOG
    E_TALpurge varchar2,

    --Tache
    E_TACexecuteouinactive varchar2,
    E_TACsesconfigs varchar2,

    --MAIL
    E_MAIenvoye varchar2,

    --AGENDA_JOUR2
    E_AJ2termine varchar2,

    --RESERVATION/LGRESERVATION
    E_LGRtermineedepuisnbjours varchar2,
    E_LGRtermineedepuisdate varchar2,

    E_ID out VARCHAR2
)
IS
    nbrespurge int;
    nbintpurge int;
    nbvispurge int;
    nbpurge int;
BEGIN

    nbrespurge := 0;
    nbintpurge := 0;
    nbvispurge:=0;
    nbpurge := 0;
    DELETE FROM TEMP_MYPURGE ;
    INSERT INTO TEMP_MYPURGE SELECT INTERLOCUTEURID FROM INTERLOCUTEUR I WHERE
          (
       I.INTERLOCUTEURID<>'VPARDEFAUT'
       )
       AND
       0=(SELECT COUNT(INTERLOCUTEURID) FROM VISITES WHERE INTERLOCUTEURID=I.INTERLOCUTEURID AND statutid in (8,1,33,34))
       AND
        (    ((
                (
                 E_INTsansvisites is not null and (0=(SELECT COUNT(INTERLOCUTEURID) FROM VISITES WHERE INTERLOCUTEURID=I.INTERLOCUTEURID AND statutid in (2,16,32,35)))
                )
            )
            OR
            (
                 E_INTsansvisitesnbjours is not null and 0=(select COUNT(interlocuteurid) from visites where
                (To_number(E_INTsansvisitesnbjours)+TO_DATE(finvisite,'DD/MM/YYYY HH24:MI:SS')>To_date(SYSDATE,'DD/MM/YYYY HH24:MI:SS') AND STATUTID IN (16,35)
                OR
                (To_number(E_INTsansvisitesnbjours)+TO_DATE(finprevu,'DD/MM/YYYY HH24:MI:SS')>To_date(SYSDATE,'DD/MM/YYYY HH24:MI:SS') AND STATUTID IN (2,32))
                )     AND (I.INTERLOCUTEURID=INTERLOCUTEURID)
                )
            )
            OR
            (
                E_INTsansvisitesdate is not null and 0=(select count(interlocuteurid) from visites where
                (TO_DATE(finvisite,'DD/MM/YYYY HH24:MI:SS')>TO_DATE(E_INTsansvisitesdate,'DD/MM/YYYY HH24:MI:SS') AND STATUTID IN (16,35)
                OR
                TO_DATE(finprevu,'DD/MM/YYYY HH24:MI:SS')>TO_DATE(E_INTsansvisitesdate,'DD/MM/YYYY HH24:MI:SS')  AND STATUTID IN(2,32)
                )
                AND (I.INTERLOCUTEURID=INTERLOCUTEURID)
                )

            )
        )
        AND
            (
                (E_INTnoninterdit is not null)
                OR
                (
                E_INTnoninterdit is  null and (I.interdit='0' or I.interdit is null)
                )
            )
        AND
            (
                (E_INTconsigne is not null)
                OR
                (
                E_INTconsigne is  null and
                ( 0=(SELECT COUNT(CONSIGNEID) FROM CONSIGNE WHERE RESIDANTID='VISITEUR' AND INTERLOCUTEURID=I.INTERLOCUTEURID))

                )

            )
        )     ;
        SELECT COUNT(*) INTO nbintpurge FROM  TEMP_MYPURGE;
            SELECT COUNT(VISITEID) INTO nbvispurge FROM VISITES WHERE
            STATUTID NOT IN (1,8,33,34) AND
                (INTERLOCUTEURID<>'VPARDEFAUT')
                AND
                (
                    (  E_VISdatantdeplusnbjour IS NOT NULL
                     AND
                        (
                            (  To_number(E_VISdatantdeplusnbjour)+TO_DATE(finvisite,'DD/MM/YYYY HH24:MI:SS')<To_date(SYSDATE,'DD/MM/YYYY HH24:MI:SS') AND STATUTID IN (16,35) )
                            OR
                            ( To_number(E_VISdatantdeplusnbjour)+TO_DATE(finprevu,'DD/MM/YYYY HH24:MI:SS')<To_date(SYSDATE,'DD/MM/YYYY HH24:MI:SS') AND STATUTID IN (2,32))
                         )
                    )
                    OR
                    ( E_VISanterieurdate IS NOT NULL
                    AND
                        (
                            (TO_DATE(finvisite,'DD/MM/YYYY HH24:MI:SS')<To_date(E_VISanterieurdate,'DD/MM/YYYY HH24:MI:SS') AND STATUTID IN (16,35) )
                            OR
                            (TO_DATE(finprevu,'DD/MM/YYYY HH24:MI:SS')<to_date(E_VISanterieurdate,'DD/MM/YYYY HH24:MI:SS') AND STATUTID IN (2,32) )
                        )
                    )
                );

        If  E_VISanonymevisites is not null THEN


        UPDATE VISITES SET INTERLOCUTEURID='VPARDEFAUT',NOMPRENOMVISIT=(SELECT NOMPRENOM FROM INTERLOCUTEUR WHERE INTERLOCUTEURID='VPARDEFAUT') WHERE
            STATUTID NOT IN (1,8,33,34) AND
                (INTERLOCUTEURID<>'VPARDEFAUT')
                AND
                (
                    ( E_VISdatantdeplusnbjour IS NOT NULL
                     AND
                        (
                            (To_number(E_VISdatantdeplusnbjour)+TO_DATE(finvisite,'DD/MM/YYYY HH24:MI:SS')<To_date(SYSDATE,'DD/MM/YYYY HH24:MI:SS') AND STATUTID IN (16,35) )
                            OR
                            ( To_number(E_VISdatantdeplusnbjour)+TO_DATE(finprevu,'DD/MM/YYYY HH24:MI:SS')<To_date(SYSDATE,'DD/MM/YYYY HH24:MI:SS')    AND STATUTID IN (2,32))
                         )
                    )
                    OR
                    ( E_VISanterieurdate IS NOT NULL
                    AND
                        (
                            (TO_DATE(finvisite,'DD/MM/YYYY HH24:MI:SS')<To_date(E_VISanterieurdate,'DD/MM/YYYY HH24:MI:SS') AND STATUTID IN (16,35) )
                            OR
                            (TO_DATE(finprevu,'DD/MM/YYYY HH24:MI:SS')<to_date(E_VISanterieurdate,'DD/MM/YYYY HH24:MI:SS') AND STATUTID IN (2,32) )
                        )
                    )
                );

            ELSE
            DELETE FROM VISITES  WHERE
            STATUTID NOT IN (1,8,33,34) AND
                (INTERLOCUTEURID<>'VPARDEFAUT')
                AND
                (
                    ( E_VISdatantdeplusnbjour IS NOT NULL
                     AND
                        (
                            (To_number(E_VISdatantdeplusnbjour)+TO_DATE(finvisite,'DD/MM/YYYY HH24:MI:SS')<To_date(SYSDATE,'DD/MM/YYYY HH24:MI:SS') AND STATUTID IN (16,35) )
                            OR
                            ( To_number(E_VISdatantdeplusnbjour)+TO_DATE(finprevu,'DD/MM/YYYY HH24:MI:SS')<To_date(SYSDATE,'DD/MM/YYYY HH24:MI:SS')    AND STATUTID IN (2,32))
                         )
                    )
                    OR
                    ( E_VISanterieurdate IS NOT NULL
                    AND
                        (
                            (TO_DATE(finvisite,'DD/MM/YYYY HH24:MI:SS')<To_date(E_VISanterieurdate,'DD/MM/YYYY HH24:MI:SS') AND STATUTID IN (16,35) )
                            OR
                            (TO_DATE(finprevu,'DD/MM/YYYY HH24:MI:SS')<to_date(E_VISanterieurdate,'DD/MM/YYYY HH24:MI:SS') AND STATUTID IN (2,32) )
                        )
                    )
                )    ;
    END IF;

    If E_INTanonymevisites is not null and E_INTsesvisites is not null THEN
        UPDATE VISITES SET INTERLOCUTEURID='VPARDEFAUT',NOMPRENOMVISIT=(SELECT NOMPRENOM FROM INTERLOCUTEUR WHERE INTERLOCUTEURID='VPARDEFAUT') WHERE  STATUTID NOT IN (1,8,33,34) AND interlocuteurid IN (  SELECT INTERLOCUTEURID FROM  TEMP_MYPURGE);
    END    IF    ;
    IF E_INTsesvisites is not null AND (E_INTanonymevisites is null)   THEN
        DELETE FROM VISITES WHERE  STATUTID NOT IN (1,8,33,34) AND interlocuteurid IN ( SELECT MYENTITEID FROM  TEMP_MYPURGE );
    END IF;

	DELETE FROM VISITE_ACTION WHERE (SELECT COUNT(VISITEID) FROM VISITES WHERE VISITEID=VISITE_ACTION.VISITEID)=0;
	DELETE FROM VISITE_REGLE WHERE (SELECT COUNT(VISITEID) FROM VISITES WHERE VISITEID=VISITE_REGLE.VISITEID)=0;

    DELETE FROM IDENTITES WHERE INTERLOCUTEURID IN ( SELECT MYENTITEID FROM  TEMP_MYPURGE );
	DELETE FROM XANNEXE WHERE ORIGINE='INTERLOCUTEUR' AND ORIGINEID IN ( SELECT MYENTITEID FROM  TEMP_MYPURGE );
	DELETE FROM INTER_ACTION WHERE (SELECT COUNT(INTERLOCUTEURID) FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=INTER_ACTION.INTERLOCUTEURID)=0;
    DELETE FROM INTERLOCUTEUR  WHERE INTERLOCUTEURID IN ( SELECT MYENTITEID FROM  TEMP_MYPURGE );

    IF  E_INTsescolis is not null THEN
        DELETE FROM COLISEMIS WHERE INTERLOCUTEURID IN ( SELECT MYENTITEID FROM  TEMP_MYPURGE );
        DELETE FROM COLISRECU WHERE INTERLOCUTEURID IN ( SELECT MYENTITEID FROM  TEMP_MYPURGE )    ;
    END IF;
    if(E_INTsesconsignesetmessages is not null)THEN
        DELETE FROM CONSIGNE WHERE INTERLOCUTEURID IN ( SELECT MYENTITEID FROM  TEMP_MYPURGE );
        END IF;
    IF E_INTsescourstaxis IS NOT NULL THEN
        delete from course where ID_COURSE in (select ID_course from PASSAGERTAXI where interlocuteurid IN ( SELECT MYENTITEID FROM  TEMP_MYPURGE ));
        delete from PASSAGERTAXI where interlocuteurid IN ( SELECT MYENTITEID FROM  TEMP_MYPURGE );
    END IF;

    DELETE FROM TEMP_MYPURGE ;

    INSERT INTO TEMP_MYPURGE SELECT residantid   from residants
        where
        (residantid<>'VPARDEFAUT') AND
        (( E_RESnonmajnbjours is not null and datemaj+to_number(E_RESnonmajnbjours)<SYSDATE) OR
        ( E_RESnonmajdate is not null and datemaj<cast(E_RESnonmajdate as date)) OR
        ( E_RESnonactif is not null and isactif='0')
        AND (
        ( E_INTnoninterdit is not null)
            OR
            (
             E_INTnoninterdit is  null and (interdit='0' or interdit is null)
            )
        ));
            DELETE FROM HVISITES WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;
            DELETE FROM HVISITES WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;
            DELETE FROM PASSAGER WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;
            DELETE FROM PASSAGERTAXI WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;
            DELETE FROM LGPARTICIPANT WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;
            DELETE FROM HLGPARTICIPANT WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;
            DELETE FROM SECRETARIAT where RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) OR RESIDANTID2 IN (SELECT MYENTITEID FROM  TEMP_MYPURGE);
            DELETE FROM LIEUPERMIS WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;
            DELETE FROM USERS WHERE EXTERNALID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;
            DELETE FROM VEHICULE WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;
            DELETE FROM COLISEMIS WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;
            DELETE FROM COLISRECU WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;
            DELETE FROM CONSIGNE WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;
            DELETE FROM EVENEMENTCOLIS WHERE RESIDANTID  IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;
            DELETE FROM FACTURE WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;
            DELETE FROM DROITS WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;
            DELETE FROM VEHICULE_DEMANDE WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;
            DELETE FROM INTER_RSERVICE WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;

            IF   (E_RESsesvisites is not null)  THEN
                    DELETE FROM VISITE_CONTROLE WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;
                    DELETE FROM VISITES_RESIDANTS WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;
                    DELETE FROM VISITES_TEMP WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;
                    DELETE FROM ZCL01_VISITERE WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE);
                    DELETE FROM VISITES WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;

            ELSE
                    UPDATE VISITE_CONTROLE  SET RESIDANTID='VPARDEFAUT'  WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;
                    UPDATE VISITES_RESIDANTS  SET RESIDANTID='VPARDEFAUT'  WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;
                    UPDATE VISITES_TEMP  SET RESIDANTID='VPARDEFAUT'  WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;
                    UPDATE ZCL01_VISITERE  SET RESIDANTID='VPARDEFAUT'  WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE);
                    UPDATE VISITES SET RESIDANTID='VPARDEFAUT', NOMPRENOMRESID=(SELECT NOM||' '||PRENOM FROM RESIDANTS WHERE RESIDANTID='VPARDEFAUT') WHERE RESIDANTID IN (SELECT MYENTITEID FROM  TEMP_MYPURGE) ;
            END IF;

    DELETE from residants where residantid IN (SELECT MYENTITEID FROM  TEMP_MYPURGE);
    DELETE FROM TACHE WHERE E_TACexecuteouinactive is not null and actif<0;
    DELETE FROM CFG_FICHIER WHERE  E_TACsesconfigs is not null AND CFG_FICHIERID IN (SELECT ACT_PARAM FROM TACHE WHERE  E_TACexecuteouinactive is not null and actif<0);
    DELETE FROM TACHE_LOG WHERE E_TALpurge is not null;
    DELETE FROM MAIL WHERE STATUT<>-1 AND E_MAIenvoye is not null;
    DELETE FROM agenda_jour2 where STATUT=5 AND (E_AJ2termine is not null);
    DELETE FROM COLISEMIS WHERE  (E_COLcolis is not null);
    DELETE FROM COLISRECU WHERE  (E_COLcolis is not null);
    DELETE FROM CONSIGNE where TYPECONSIGNE='MESSAGES' AND DATELU is not null AND (E_CONsupmessageslus is not null);
    DELETE FROM SOCIETE WHERE (E_SOCnonutilise is not null) AND societeid in ( SELECT SOCIETEID FROM SOCIETE I WHERE
     0=(Select COUNT(societeid) from interlocuteur WHERE SOCIETEID=I.SOCIETEID) AND 0=(select COUNT(societeid) from residants WHERE SOCIETEID=I.SOCIETEID)) AND SOCIETEID<>'VPARDEFAUT'    ;
    DELETE FROM reservation where codereservation in (SELECT CODERESERVATION FROM LGRESERVATION WHERE CODERESERVATION IN (SELECT codelgreservation
       from lgreservation
       where
        (
        E_LGRtermineedepuisnbjours is not null and to_number(E_LGRtermineedepuisnbjours)+ To_date(datefin,'DD/MM/YYYY HH24:MI:SS')<To_date(SYSDATE,'DD/MM/YYYY HH24:MI:SS')
        OR
        E_LGRtermineedepuisdate is not null and To_date(datefin,'DD/MM/YYYY HH24:MI:SS')<To_date(E_LGRtermineedepuisdate,'DD/MM/YYYY HH24:MI:SS')

        )));

    DELETE FROM LGRESERVATION WHERE  codelgreservation IN (SELECT codelgreservation
       from lgreservation
       where
        E_LGRtermineedepuisnbjours<>'' and E_LGRtermineedepuisnbjours is not null and  to_number(E_LGRtermineedepuisnbjours)+ To_date(datefin,'DD/MM/YYYY HH24:MI:SS')<To_date(SYSDATE,'DD/MM/YYYY HH24:MI:SS')
        OR
        E_LGRtermineedepuisdate is not null and To_date(datefin,'DD/MM/YYYY HH24:MI:SS')<To_date(E_LGRtermineedepuisdate,'DD/MM/YYYY HH24:MI:SS')
        );
    SELECT COUNT(*) INTO nbrespurge FROM  TEMP_MYPURGE ;

    nbpurge:=nbintpurge+nbrespurge+nbvispurge;
    E_ID:=To_char(nbpurge)||','||to_char(nbrespurge)||','||To_char(nbintpurge)||','||To_char(nbvispurge);
    DELETE FROM TEMP_MYPURGE;
END;
/
COMMIT;

CREATE OR REPLACE FUNCTION F_ISMISSION_READY(E_TOLERANCE DATE,E_HEURE DATE,E_ANTICIPE INT,E_HEUREJOUR DATE) RETURN VARCHAR2
IS
S_RET VARCHAR2(1);
BEGIN
   IF E_HEUREJOUR+E_ANTICIPE/24/60 >  E_HEURE-TO_CHAR(E_TOLERANCE,'HH24')/24-TO_CHAR(E_TOLERANCE,'MI')/24/60 THEN
    S_RET:='1';
   ELSE
   S_RET:='0';
   END IF;
   RETURN S_RET;
END;
/
COMMIT;

CREATE OR REPLACE FUNCTION F_GETMISSIONSTATUS (E_STATUS INT,E_TOLERANCE DATE,E_HEURE DATE,E_ANTICIPE INT,E_HEUREJOUR DATE,E_DUREE DATE,E_HEUREDEPART DATE ) RETURN VARCHAR2
 IS
 S_RET INT;
BEGIN

 S_RET:=E_STATUS;
  IF  E_HEUREJOUR<TRUNC(SYSDATE)+TO_CHAR(E_HEURE,'HH24')/24+TO_CHAR(E_HEURE,'MI')/24/60-TO_CHAR(E_TOLERANCE,'HH24')/24-TO_CHAR(E_TOLERANCE,'MI')/(24*60)   AND E_STATUS=0 THEN
    S_RET:=E_STATUS ;
    ELSE
   IF  E_HEUREJOUR<TRUNC(SYSDATE)+TO_CHAR(E_HEURE,'HH24')/24+TO_CHAR(E_HEURE,'MI')/24/60+TO_CHAR(E_TOLERANCE,'HH24')/24+TO_CHAR(E_TOLERANCE,'MI')/(24*60) AND E_STATUS=0 THEN
    S_RET:=1;
    ELSE
   IF  E_HEUREJOUR>TRUNC(SYSDATE)+TO_CHAR(E_HEURE,'HH24')/24+TO_CHAR(E_HEURE,'MI')/24/60+TO_CHAR(E_TOLERANCE,'HH24')/24+TO_CHAR(E_TOLERANCE,'MI')/(24*60)AND (E_STATUS=1 OR E_STATUS=0) THEN
    S_RET:=2;
    ELSE
   IF E_HEUREJOUR>E_HEUREDEPART+(TO_CHAR(E_TOLERANCE,'HH24')+TO_CHAR(E_DUREE,'HH24'))/24+(TO_CHAR(E_TOLERANCE,'MI')+TO_CHAR(E_DUREE,'MI'))/(24*60)  AND E_STATUS=3 THEN
    S_RET:=4;
   END IF;
   END IF;
   END IF;
   END IF;

   RETURN S_RET;
END ;
/

COMMIT;

CREATE OR REPLACE PROCEDURE PS_UPDATE_AGENDA_JOUR2 (E_AGENDA_JOUR2ID VARCHAR)
IS
E_POSTEID INT;
E_SITEID VARCHAR2(14);
E_ID INT ;
E_HEURE_MIS DATE;

E_ANTICIPE INT;
E_LIBMISSION VARCHAR2(100);
E_OBSERVATION VARCHAR2(4000);
E_NEW_STATUT INT;
E_OLD_STATUT INT;
E_DUREE DATE;
E_HEUREDEPART DATE;
E_TOLERANCE_MIS DATE;
E_HEUREJOUR DATE;
E_res DATE ;
BEGIN
    --SET DATEFIRST 7  VARIABLE ENVIRONNEMENT
    SELECT To_DATE(TRUNC(SYSDATE),'DD/MM/YYYY HH24:MI:SS')+TO_CHAR(SYSDATE,'HH24')/24+TO_CHAR(SYSDATE,'MI')/(24*60) INTO E_HEUREJOUR FROM DUAL;
    SELECT OPTION_AVMISS INTO E_ANTICIPE FROM OMNI_PARAM WHERE ROWNUM=1 ;
    SELECT TO_DATE(TRUNC(DATEMISSION),'DD/MM/YYYY HH24:MI:SS')+TO_CHAR(HEURE,'HH24')/24+TO_CHAR(HEURE,'MI')/(24*60) INTO E_HEURE_MIS FROM AGENDA_JOUR2 WHERE AGENDA_JOUR2ID=E_AGENDA_JOUR2ID;
    SELECT SITEID INTO E_SITEID FROM AGENDA_JOUR2 WHERE AGENDA_JOUR2ID=E_AGENDA_JOUR2ID;
    SELECT TO_DATE(TRUNC(SYSDATE),'DD/MM/YYYY HH24:MI:SS')+TO_CHAR(TOLERANCE,'HH24')/24+TO_CHAR(TOLERANCE,'MI')/(24*60) INTO E_TOLERANCE_MIS FROM VUE_AGENDA2MISSION WHERE AGENDA_JOUR2ID=E_AGENDA_JOUR2ID;
    SELECT TO_DATE(TRUNC(SYSDATE),'DD/MM/YYYY HH24:MI:SS')+TO_CHAR(DUREE,'HH24')/24+TO_CHAR(DUREE,'MI')/(24*60) INTO E_DUREE  FROM VUE_AGENDA2MISSION WHERE AGENDA_JOUR2ID=E_AGENDA_JOUR2ID;
    SELECT LIBMISSION INTO E_LIBMISSION FROM VUE_AGENDA2MISSION WHERE AGENDA_JOUR2ID=E_AGENDA_JOUR2ID ;
    SELECT  TO_DATE(TRUNC(DATEMAJ),'DD/MM/YYYY HH24:MI:SS')+TO_CHAR(DATEMAJ,'HH24')/24+TO_CHAR(DATEMAJ,'MI')/(24*60) INTO E_HEUREDEPART FROM AGENDA_JOUR2 WHERE AGENDA_JOUR2ID=E_AGENDA_JOUR2ID;
    SELECT STATUT INTO E_OLD_STATUT FROM AGENDA_JOUR2 WHERE AGENDA_JOUR2ID=E_AGENDA_JOUR2ID;
    SELECT F_GETMISSIONSTATUS(E_OLD_STATUT,E_TOLERANCE_MIS,E_HEURE_MIS,E_ANTICIPE,E_HEUREJOUR,E_DUREE,E_HEUREDEPART) INTO E_NEW_STATUT FROM DUAL;
    SELECT POSTEID INTO E_POSTEID FROM AGENDA_JOUR2 WHERE AGENDA_JOUR2ID=E_AGENDA_JOUR2ID;
    SELECT TO_DATE(E_HEURE_MIS,'DD/MM/YYYY HH24:MI:SS')+To_CHAR(E_TOLERANCE_MIS,'HH24')/24+To_CHAR(E_TOLERANCE_MIS,'HH24')/(24*60) INTO E_res FROM DUAL ;
    SELECT SEQ_OJOURNAL.NEXTVAL INTO E_ID FROM DUAL ;
    --INSERT INTO ALARME(ALARMEID,LIBELLE,DATEMAJ,DATECREATION) VALUES(E_ID,TO_CHAR(E_HEURE_MIS,'DD/MM/YYYY HH24:MI:SS')||':'||TO_char(E_AGENDA_JOUR2ID)||':'||TO_CHAR(E_TOLERANCE_MIS,'DD/MM/YYYY HH24:MI:SS')||':'||TO_CHAR(E_HEUREDEPART,'DD/MM/YYYY HH24:MI:SS')||':'||TO_CHAR(E_HEUREJOUR,'DD/MM/YYYY HH24:MI:SS')||':'||TO_CHAR(E_DUREE,'DD/MM/YYYY HH24:MI:SS'),SYSDATE,SYSDATE);
    IF E_NEW_STATUT<>E_OLD_STATUT AND E_OLD_STATUT<>7 THEN
        UPDATE AGENDA_JOUR2 SET STATUT=F_GETMISSIONSTATUS(E_OLD_STATUT,E_TOLERANCE_MIS,E_HEURE_MIS,E_ANTICIPE,E_HEUREJOUR,E_DUREE,E_HEUREDEPART) WHERE AGENDA_JOUR2ID=E_AGENDA_JOUR2ID;
        IF E_NEW_STATUT=2 OR E_NEW_STATUT=4 THEN
            IF E_NEW_STATUT=2 THEN
                E_OBSERVATION:= E_LIBMISSION|| ' ['||To_CHAR(TRUNC(SYSDATE),'DD/MM/YYYY')||' '||TO_CHAR(E_HEURE_MIS,'HH24:MI')||'] Retard de départ';
            ELSE
               E_OBSERVATION:= E_LIBMISSION|| ' ['||To_CHAR(TRUNC(SYSDATE),'DD/MM/YYYY')||' '||TO_CHAR(E_HEURE_MIS,'HH24:MI')||'] Retard de retour';
            END IF;
            INSERT INTO OJOURNAL(OJOURNALID,EVENEMENTID,PERSONNELDEBUTID,PERSONNELFINID,DEBUT_EFF,FIN_EFF,AGENDA_JOURID,MISSIONTEMPID,AGENDA_JOUR2ID,OBSERVATION,DATECREATION,DATEMAJ,SITEID,POSTEID)
                VALUES (E_ID,'-4',-1,-1,SYSDATE,SYSDATE,0,0,E_AGENDA_JOUR2ID,E_OBSERVATION,SYSDATE,SYSDATE,E_SITEID,E_POSTEID);
        END IF ;
    END IF;
END;
/

COMMIT;

CREATE OR REPLACE PROCEDURE PS_INS_AGENDA_JOUR2
 (E_AGENDA_JOURID IN VARCHAR2)
IS
TMP INT;
E_ID VARCHAR2(14);
E_HEURE_MIS DATE;
E_MISSIONID INT;
E_SITEID  VARCHAR2(14);
BEGIN
   --SET DATEFIRST 7 AJOUTER VARIABLE ENVIRONNEMENT DANS le SERVEUR
   SELECT HEURE INTO E_HEURE_MIS FROM AGENDA_JOUR WHERE AGENDA_JOURID=E_AGENDA_JOURID;
   SELECT MISSIONID INTO E_MISSIONID FROM AGENDA_JOUR WHERE AGENDA_JOURID=E_AGENDA_JOURID;
   SELECT SITEID INTO E_SITEID FROM AGENDA_JOUR WHERE AGENDA_JOURID=E_AGENDA_JOURID ;
   SELECT SEQ_AGENDA_JOUR2.NEXTVAL INTO E_ID FROM DUAL;
  SELECT COUNT(AGENDA_JOUR2ID) INTO TMP FROM AGENDA_JOUR2 WHERE AGENDA_JOURID=E_AGENDA_JOURID AND HEURE=E_HEURE_MIS AND MISSIONID=E_MISSIONID AND DATEMISSION=To_DATE(TRUNC(SYSDATE),'DD/MM/YYYY HH24:MI:SS') AND SITEID=E_SITEID;
    IF (TMP=0)
            THEN
                INSERT INTO AGENDA_JOUR2 (AGENDA_JOUR2ID,AGENDA_JOURID,HEURE,TOLERANCE,MISSIONID,POSTEID,STATUT,DATEMISSION,DATEMAJ,DATECREATION,SITEID)
                SELECT E_ID,AGENDA_JOURID,HEURE,TOLERANCE,MISSIONID,POSTEID,STATUT,TO_DATE(TRUNC(SYSDATE),'DD/MM/YYYY HH24:MI:SS'),SYSDATE,SYSDATE,SITEID FROM AGENDA_JOUR WHERE AGENDA_JOURID=E_AGENDA_JOURID;
            END IF;
END;
/

COMMIT;


CREATE OR REPLACE FUNCTION isResidantInterdit(E_residantid VARCHAR2,E_dt DATE) RETURN varchar2 IS
    E_IdRes INT;
    E_Retour VARCHAR2(50);
BEGIN
    E_Retour:='1';
    E_IdRes:=0;
    SELECT COUNT(RESIDANTID) INTO E_idRes FROM RESIDANTS WHERE INTERDIT=0 AND (TRUNC(TO_DATE(E_dt,'DD/MM/YYYY HH24:MI:SS')) BETWEEN TRUNC(TO_DATE(DEBUTINTERDIT,'DD/MM/YYYY HH24:MI:SS')) AND TRUNC(TO_DATE(FININTERDIT,'DD/MM/YYYY HH24:MI:SS')) ) AND RESIDANTID=E_residantid;
    IF E_IdRes >0 THEN
        E_Retour :='0';
    END IF;
    RETURN E_Retour;
END;
/
COMMIT;

CREATE OR REPLACE FUNCTION isVehiculeInterdit(E_vehiculeid VARCHAR2,E_dt DATE) RETURN varchar2 IS
    E_IdVeh int;
    E_Retour VARCHAR2(50);
BEGIN
    E_Retour:='0';
    E_IdVeh:=0;
    SELECT COUNT(VEHICULEID) INTO E_IdVeh FROM RESIDANTS R, VEHICULE V WHERE R.RESIDANTID=V.RESIDANTID  AND (TRUNC(TO_DATE(E_dt,'DD/MM/YYYY HH24:MI:SS')) <TRUNC(TO_DATE(DATELIMITE,'DD/MM/YYYY HH24:MI:SS'))) AND V.VEHICULEID=E_vehiculeid ;
    IF E_IdVeh>0 THEN
        E_Retour :='0';
    END IF;
    RETURN E_Retour;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_ESVISITES_LOG_INS(
    E_quiid VARCHAR2,
    E_quitype  VARCHAR2,
    E_nomprenom VARCHAR2,
    E_societe VARCHAR2,
    E_numbadge VARCHAR2,
    E_sens VARCHAR2,
    E_etat VARCHAR2,
    E_details VARCHAR2,
    E_datepassage VARCHAR2,
    E_typeinsert VARCHAR2,
    E_remotedate VARCHAR2,
    E_siteid VARCHAR2,
    E_guichetid VARCHAR2,
    E_poste VARCHAR2,
    E_typeLecteur VARCHAR2
)
IS
    E_FLUXID VARCHAR2(14);
    BEGIN
        SELECT SEQ_ESVISITES_LOG.NEXTVAL INTO E_FLUXID FROM DUAL ;
        INSERT INTO ESVISITES_LOG (ESVISITES_LOGID,QUIID,QUITYPE,NOMPRENOM,SOCIETE,NUMBADGE,SENS,ETAT,DETAILS,PASSAGE,TYPEINSERT,REMOTEDATE,SITEID,GUICHETID,POSTE,TYPELECTEUR,DATECREATION,DATEMAJ) VALUES
        (E_FLUXID,E_quiid,E_quitype,E_nomprenom,E_societe,E_numbadge,E_sens,E_etat,E_details,TO_DATE(E_datepassage,'DD/MM/YYYY HH24:MI:SS'),E_typeinsert,E_remotedate,E_siteid,E_guichetid,E_poste,E_typelecteur,SYSDATE,SYSDATE);
    END;
/
COMMIT;



CREATE OR REPLACE PROCEDURE PS_ESVISITES_ININT
    (E_visiteid VARCHAR2,
    E_guichetid  VARCHAR2,
    E_actionDate VARCHAR2
 )
IS
    E_interdit VARCHAR2(1)     ;
    E_VID VARCHAR2(14);
    E_FLAG VARCHAR2(14);
    E_IDENTITY VARCHAR2(14);
    E_VSTATUT VARCHAR2(20);
    E_NUMVISITE INT;
BEGIN
    SELECT MAX(DERNVISITE) INTO E_NUMVISITE FROM PARAMETRES ;
    E_NUMVISITE := E_NUMVISITE + 1;
    UPDATE PARAMETRES SET DERNVISITE = E_NUMVISITE, DATEMAJ=TO_DATE(E_actionDate,'DD/MM/YYYY HH24:MI:SS');
    SELECT STATUTVISITE INTO E_VSTATUT FROM STATUTVISITE WHERE STATUTID = 8 ;

    SELECT SEQ_VISITES.NEXTVAL INTO E_VID FROM DUAL ;

    INSERT INTO VISITES (VISITEID, INTERLOCUTEURID, RESIDANTID, CODESALLE, SITEID, STATUTID, EXTERNALID, SOCIETERESID, NOMPRENOMRESID, SOCIETEVISIT, NOMPRENOMVISIT, DEBUTPREVU, FINPREVU, HDEBUTPREVU, HFINPREVU, NUMEROBADGE, NUMEROVISITE, DEBUTVISITE, FINVISITE, HDEBUT, HFIN, STATUTVISITE, TYPEVISITEID, BOITE, CASIER, OBJET, CASIERID, PIECE, NUMERO, VALIDITE, PARKING, IMMATRICULATION, GUICHETID, OBSERVATION, BUREAUID, LIEU, DATECREATION, DATEMAJ, DATESYNCHRO, ORIGINEVISITE, NBBDGIMPR, NBBDGIMPRTOTAL, FREE1, FREE2, FREE3, FREE4, FREE5, FREE6, FREE7, FREE8, FREE9, FREE10, MARQUE, MODELE, COTE, PREMIER, PREENREG, ECHANGES, ZONE, DESCENTE, BADGEPHYSIQUE, ATTENDU, ATTENDU_VENU, DATEHEUREENTREEPARKING, DATEHEURESORTIEPARKING, STATUTPARKING, DEBLOC, DEBLOC_USER, DEBLOC_USERID, DEBLOC_HEURE, IFONCTION, IDATENAISSANCE, ILIEUNAISSANCE, IPAYS, INOMJEUNEFILLE, MODIFICATION, ETATVISITE, ISTATUT, VIP, CODELGRESERVATION, TICKET, RONDIER, RONDIERID,LAST_ACTION,PROFIL_CTRL,PROFIL_CTRL2,PROFIL_CTRL_ID) SELECT E_VID, INTERLOCUTEURID, RESIDANTID, CODESALLE, SITEID, STATUTID, EXTERNALID, SOCIETERESID, NOMPRENOMRESID, SOCIETEVISIT, NOMPRENOMVISIT, DEBUTPREVU, FINPREVU, HDEBUTPREVU, HFINPREVU, NUMEROBADGE, NUMEROVISITE, DEBUTVISITE, FINPREVU, HDEBUT, HFINPREVU, STATUTVISITE, TYPEVISITEID, BOITE, CASIER, OBJET, CASIERID, PIECE, NUMERO, VALIDITE, PARKING, IMMATRICULATION, GUICHETID, OBSERVATION, BUREAUID, LIEU, DATECREATION, DATEMAJ, DATESYNCHRO, ORIGINEVISITE, '0', NBBDGIMPRTOTAL, FREE1, FREE2, FREE3, FREE4, FREE5, FREE6, FREE7, FREE8, FREE9, FREE10, MARQUE, MODELE, COTE, PREMIER, PREENREG, ECHANGES, ZONE, DESCENTE, BADGEPHYSIQUE, ATTENDU, ATTENDU_VENU, DATEHEUREENTREEPARKING, DATEHEURESORTIEPARKING, STATUTPARKING, DEBLOC, DEBLOC_USER, DEBLOC_USERID, DEBLOC_HEURE, IFONCTION, IDATENAISSANCE, ILIEUNAISSANCE, IPAYS, INOMJEUNEFILLE, MODIFICATION, ETATVISITE, ISTATUT, VIP, CODELGRESERVATION, TICKET, RONDIER, RONDIERID,LAST_ACTION,PROFIL_CTRL,PROFIL_CTRL2,PROFIL_CTRL_ID FROM VISITES WHERE VISITEID=E_visiteid ;

    UPDATE VISITES SET DATECREATION=TO_DATE(E_actionDate,'DD/MM/YYYY HH24:MI:SS'), DATEMAJ=TO_DATE(E_actionDate,'DD/MM/YYYY HH24:MI:SS'), DATESYNCHRO=NULL,
    DEBUTVISITE=TRUNC(TO_DATE(E_actiondate,'DD/MM/YYYY HH24:MI:SS')),
    HDEBUT=TO_DATE(SUBSTR(E_actiondate,12,5),'HH24:MI'),
    HFIN=TO_DATE(SUBSTR(E_actiondate,12,5),'HH24:MI')+2/24,
    STATUTID='8',
    GUICHETID=E_guichetid,
    NUMEROVISITE=E_NUMVISITE,
    STATUTVISITE=E_VSTATUT
    WHERE VISITEID=E_VID;

END;
/

COMMIT;

CREATE OR REPLACE PROCEDURE PS_ESVISITES_OUTINT
    (E_visiteid VARCHAR2,
    E_actionDate VARCHAR2)
IS
E_VSTATUT VARCHAR2(20);
BEGIN
   SELECT STATUTVISITE INTO E_VSTATUT FROM STATUTVISITE WHERE STATUTID = 16 ;
    UPDATE VISITES SET STATUTID='16',STATUTVISITE=E_VSTATUT,DATEMAJ=TO_DATE(E_actiondate,'DD/MM/YYYY HH24:MI:SS'),FINVISITE=TRUNC(TO_DATE(E_actionDate,'DD/MM/YYYY HH24:MI:SS')), HFIN=TO_DATE(SUBSTR(E_actiondate,12,5),'HH24:MI') WHERE VISITEID=E_visiteid ;
END ;
/

COMMIT;


CREATE OR REPLACE PROCEDURE PS_ESVISITES_INOUT_RES (
    E_residantid VARCHAR2,
    E_guichetid  VARCHAR2,
    E_dateaction VARCHAR2,
    E_badge VARCHAR2,
    E_mode_action VARCHAR2,
    E_siteid VARCHAR2,
    E_passagerid IN OUT VARCHAR2)
IS
    E_nomprenom VARCHAR2(80);
BEGIN
    --INSERT INTO ALARME (ALARMEID,LIBELLE,DATEMAJ,DATECREATION) VALUES ('1',E_passagerid,SYSDATE,SYSDATE);
    IF E_passagerid IS NULL THEN
        SELECT SEQ_VISITES.NEXTVAL INTO E_passagerid FROM DUAL ;
        INSERT INTO VISITES_RESIDANTS (PASSAGERID,RESIDANTID,NOMPRENOM,ENTREE,CODEACCES,OBSERVATION,DATECREATION,DATEMAJ,DATESYNCHRO,TYPEENTREE,GUICHET_E,CIRCULATION,SITEID)
        VALUES (E_passagerid,E_residantid,E_nomprenom,To_DATE(E_dateaction,'DD/MM/YYYY HH24:MI:SS'),E_badge,'',SYSDATE,SYSDATE,SYSDATE, To_NUMBER(E_mode_action),E_guichetid,'',E_siteid);
    ELSE
        UPDATE VISITES_RESIDANTS SET SORTIE=To_DATE(E_dateaction,'DD/MM/YYYY HH24:MI:SS'),GUICHET_S=E_guichetid,CIRCULATION='',OBSERVATION=OBSERVATION||'',DATEMAJ=SYSDATE,DATESYNCHRO=SYSDATE WHERE PASSAGERID=E_passagerid;
    END IF;
END ;
/
COMMIT;


CREATE OR REPLACE PROCEDURE PS_ESVISITES_INVEHICULE(
    E_residantid VARCHAR2,
    E_guichetid  VARCHAR2,
    E_actionDate VARCHAR2,
    E_badge VARCHAR2,
    E_PASSAGERID VARCHAR2)
IS
E_TMP   int ;
BEGIN
    E_tmp:=1;
END ;
/
COMMIT;



CREATE OR REPLACE PROCEDURE PS_ESVISITES_OUTVEHICULE(
    E_residantid VARCHAR2,
    E_guichetid  VARCHAR2,
    E_actionDate VARCHAR2,
    E_badge VARCHAR2,
    E_PASSAGERID VARCHAR2)
IS
E_TMP   int ;
BEGIN
    E_tmp:=1;
END ;
/
COMMIT;



CREATE OR REPLACE PROCEDURE PS_ESVISITEUR(

    --INTERLOCUTEUR
    E_siteid VARCHAR2,
    E_poste  VARCHAR2,
    E_mode_action VARCHAR2,
    E_badge VARCHAR2,
    E_actiondate VARCHAR2,
    E_typeinsert VARCHAR2,
    E_typelecteur VARCHAR2,
    E_RETOUR OUT VARCHAR2
)
IS
    E_interdit VARCHAR2(1);
    E_interlocuteurid VARCHAR2(14);
    E_visiteid VARCHAR2(14);
    E_VID VARCHAR2(14);
    E_FLAG VARCHAR2(14);
    E_IDENTITY VARCHAR2(14);
    E_VSTATUT VARCHAR2(20);
    E_guichetid VARCHAR2(14);
    E_NUMVISITE INT;
    E_tmp VARCHAR2(1);
    E_societevisit VARCHAR2(35);
    E_nomprenomvisit VARCHAR2(70);
    E_dateaction DATE;
    TMP INT;

BEGIN
    E_dateaction:=TO_DATE(E_actiondate,'DD/MM/YYYY HH24:MI:SS');
    E_RETOUR:='-1';
    SELECT GUICHETID INTO E_guichetid FROM TQ_POSTE WHERE NOM_POSTE=E_poste AND SITEId=E_siteID;
    IF E_mode_action='1' THEN
        SELECT COUNT(I.INTERLOCUTEURID) INTO TMP FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=E_badge AND SITEID=E_siteid AND STATUTID IN (8,35);
        IF tmp>0 THEN
            SELECT V.VISITEID INTO E_visiteid FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=E_badge AND SITEID=E_siteid AND STATUTID IN (8,35) AND ROWNUM=1;
            PS_ESVISITES_OUTINT(E_visiteid,E_actionDate);
            E_RETOUR:='OK,VIS_SORTI';
            SELECT INTERLOCUTEURID INTO E_interlocuteurid FROM VISITES WHERE VISITEID=E_visiteid;
            SELECT NOMPRENOMVISIT INTO E_nomprenomvisit FROM VISITES WHERE VISITEID=E_visiteid;
            SELECT SOCIETEVISIT INTO E_societevisit FROM VISITES WHERE VISITEID=E_visiteid;
            PS_ESVISITES_LOG_INS (E_interlocuteurid,'VISITEUR', E_nomprenomvisit,E_societevisit,E_badge,'Entrée forcée badge','OK','Sortie validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
        END IF;
        SELECT COUNT(I.INTERLOCUTEURID) INTO TMP FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=E_badge AND SITEID=E_SITEID AND STATUTID IN (2,32) AND (TRUNC(E_dateaction) BETWEEN DEBUTPREVU AND FINPREVU);
        IF TMP>0 THEN
            SELECT  V.VISITEID INTO E_visiteid FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=E_badge AND SITEID=E_SITEID AND STATUTID IN (2,32) AND (TRUNC(E_dateaction) BETWEEN DEBUTPREVU AND FINPREVU) AND ROWNUM=1;
            SELECT INTERLOCUTEURID INTO E_interlocuteurid FROM VISITES WHERE VISITEID=E_visiteid ;
            SELECT NOMPRENOMVISIT INTO E_nomprenomvisit FROM VISITES WHERE VISITEID=E_visiteid;
            SELECT SOCIETEVISIT INTO E_societevisit FROM VISITES WHERE VISITEID=E_visiteid;
            IF (isVisiteurInterdit(E_interlocuteurid,E_dateaction)='0' or isVisiteurInterdit(E_interlocuteurid,E_dateaction)='1' ) THEN
                PS_ESVISITES_ININT(E_visiteid,E_guichetid,E_actionDate);
                IF (E_RETOUR<>'-1') THEN
                    E_RETOUR:='OK,VIS_SORTIENTRE';
                ELSE
                    E_RETOUR:='OK,VIS_ENTRE';
                END    IF;
                PS_ESVISITES_LOG_INS(E_interlocuteurid,'VISITEUR', E_nomprenomvisit,E_societevisit,E_badge,'Entrée forcée badge','OK','Entrée validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
            ELSE
                E_RETOUR:='PAS OK,MES_VIS_INTERDIT';
                PS_ESVISITES_LOG_INS(E_interlocuteurid,'VISITEUR', E_nomprenomvisit,E_societevisit,E_badge,'Entrée forcée badge','PAS OK','Visiteur interdit',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
            END IF;
        END IF;

    END IF;
    IF E_mode_action='2' THEN
        SELECT COUNT(I.INTERLOCUTEURID) INTO TMP FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=E_badge AND SITEID=E_siteid AND STATUTID IN (8,35);
        IF TMP>0 THEN
            SELECT visiteid INTO E_visiteid FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=E_badge AND SITEID=E_siteid AND STATUTID IN (8,35) AND ROWNUM=1;
            E_RETOUR:='PAS OK,MES_VIS_DENTRE,'||E_visiteid;
            SELECT INTERLOCUTEURID INTO E_interlocuteurid FROM VISITES WHERE VISITEID=E_visiteid ;
            SELECT NOMPRENOMVISIT INTO E_nomprenomvisit FROM VISITES WHERE VISITEID=E_visiteid;
            SELECT SOCIETEVISIT INTO E_societevisit FROM VISITES WHERE VISITEID=E_visiteid;
            PS_ESVISITES_LOG_INS(E_interlocuteurid,'VISITEUR', E_nomprenomvisit,E_societevisit,E_badge,'Entrée badge','OK','Visiteur déjà entré',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
        ELSE
            SELECT COUNT(I.INTERLOCUTEURID) INTO TMP FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=E_badge AND SITEID=E_SITEID AND STATUTID IN (2,32) AND (TRUNC(E_dateaction) BETWEEN DEBUTPREVU AND FINPREVU);
            IF TMP>0 THEN
                SELECT V.VISITEID INTO E_visiteid FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=E_badge AND SITEID=E_SITEID AND STATUTID IN (2,32) AND (TRUNC(E_dateaction) BETWEEN DEBUTPREVU AND FINPREVU) AND ROWNUM=1;
                SELECT INTERLOCUTEURID INTO E_interlocuteurid FROM VISITES WHERE VISITEID=E_visiteid ;
                SELECT NOMPRENOMVISIT INTO E_nomprenomvisit FROM VISITES WHERE VISITEID=E_visiteid;
                SELECT SOCIETEVISIT INTO E_societevisit FROM VISITES WHERE VISITEID=E_visiteid;
                IF (isVisiteurInterdit(E_interlocuteurid,E_dateaction)='0' or isVisiteurInterdit(E_interlocuteurid,E_dateaction)='1' ) THEN
                    PS_ESVISITES_ININT(E_visiteid,E_guichetid,E_actionDate);
                    PS_ESVISITES_LOG_INS (E_interlocuteurid,'VISITEUR', E_nomprenomvisit,E_societevisit,E_badge,'Entrée badge','OK','Entrée Validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                    E_RETOUR:='OK,MES_VIS_ENTRE,'||E_visiteid;
                ELSE
                    E_RETOUR:='PAS OK,MES_VIS_INTERDIT';
                    PS_ESVISITES_LOG_INS(E_interlocuteurid,'VISITEUR', E_nomprenomvisit,E_societevisit,E_badge,'Entrée badge','PAS OK','Visiteur interdit',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                END IF;
            END IF;
        END IF;
    END IF;
    IF E_mode_action='3' THEN
        SELECT COUNT(I.INTERLOCUTEURID) INTO TMP FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=E_badge AND SITEID=E_siteid AND STATUTID IN (8,35);
        IF TMP>0 THEN
            SELECT V.VISITEID INTO E_visiteid FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=E_badge AND SITEID=E_siteid AND STATUTID IN (8,35) AND ROWNUM=1;
            PS_ESVISITES_OUTINT(E_visiteid,E_actionDate);
            E_RETOUR:='OK,MES_VIS_SORTI,'||E_visiteid;
            SELECT INTERLOCUTEURID INTO E_interlocuteurid FROM VISITES WHERE VISITEID=E_visiteid ;
            SELECT NOMPRENOMVISIT INTO E_nomprenomvisit FROM VISITES WHERE VISITEID=E_visiteid;
            SELECT SOCIETEVISIT INTO E_societevisit FROM VISITES WHERE VISITEID=E_visiteid;
            PS_ESVISITES_LOG_INS (E_interlocuteurid,'VISITEUR', E_nomprenomvisit,E_societevisit,E_badge,'Sortie forcée badge','OK','Sortie validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
        ELSE
            SELECT COUNT(I.INTERLOCUTEURID) INTO TMP FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=E_badge AND SITEID=E_SITEID AND STATUTID IN (2,32) AND (TRUNC(E_dateaction) BETWEEN DEBUTPREVU AND FINPREVU);
            IF TMP>0 THEN
                SELECT V.VISITEID INTO E_visiteid FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=E_badge AND SITEID=E_SITEID AND STATUTID IN (2,32) AND (TRUNC(E_dateaction) BETWEEN DEBUTPREVU AND FINPREVU) AND ROWNUM=1;
                PS_ESVISITES_ININT(E_visiteid,E_guichetid,E_actionDate);
                SELECT INTERLOCUTEURID INTO E_interlocuteurid FROM VISITES WHERE VISITEID=E_visiteid ;
                SELECT NOMPRENOMVISIT INTO E_nomprenomvisit FROM VISITES WHERE VISITEID=E_visiteid;
                SELECT SOCIETEVISIT INTO E_societevisit FROM VISITES WHERE VISITEID=E_visiteid;
                PS_ESVISITES_LOG_INS(E_interlocuteurid,'VISITEUR', E_nomprenomvisit,E_societevisit,E_badge,'Sortie forcée badge','OK','Entrée validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                SELECT V.VISITEID INTO E_visiteid FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=E_badge AND SITEID=E_siteid AND STATUTID IN (8,35) AND ROWNUM=1;
                PS_ESVISITES_OUTINT(E_visiteid,E_actiondate);
                PS_ESVISITES_LOG_INS(E_interlocuteurid,'VISITEUR', E_nomprenomvisit,E_societevisit,E_badge,'Sortie forcée badge','OK','Sortie validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                E_RETOUR:='OK,MES_VIS_ENTRESORTI,'||E_visiteid;
            END    IF;
        END IF;
    END IF;
    IF E_mode_action='4' THEN
        SELECT COUNT(I.INTERLOCUTEURID) INTO TMP FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=E_badge AND SITEID=E_siteid AND STATUTID IN (8,35);
        IF TMP>0 THEN
            SELECT V.VISITEID INTO E_visiteid FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=E_badge AND SITEID=E_siteid AND STATUTID IN (8,35) AND ROWNUM=1;
            PS_ESVISITES_OUTINT(E_visiteid,E_actionDate);
            E_RETOUR:='OK,MES_VIS_SORTI'||E_visiteid;
            SELECT INTERLOCUTEURID INTO E_interlocuteurid FROM VISITES WHERE VISITEID=E_visiteid ;
            SELECT NOMPRENOMVISIT INTO E_nomprenomvisit FROM VISITES WHERE VISITEID=E_visiteid;
            SELECT SOCIETEVISIT INTO E_societevisit FROM VISITES WHERE VISITEID=E_visiteid;
            PS_ESVISITES_LOG_INS(E_interlocuteurid,'VISITEUR', E_nomprenomvisit,E_societevisit,E_badge,'Sortie badge','OK','Sortie validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
        ELSE
            SELECT COUNT(I.INTERLOCUTEURID) INTO TMP FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=E_badge AND SITEID=E_siteid AND STATUTID IN (16);
            IF TMP>0 THEN
                SELECT V.VISITEID INTO E_visiteid FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=E_badge AND SITEID=E_siteid AND STATUTID IN (16) AND ROWNUM=1;
                E_RETOUR:='PAS OK,MES_VIS_DSORTI,'||E_visiteid;
                SELECT INTERLOCUTEURID INTO E_interlocuteurid FROM VISITES WHERE VISITEID=E_visiteid ;
                SELECT NOMPRENOMVISIT INTO E_nomprenomvisit FROM VISITES WHERE VISITEID=E_visiteid;
                SELECT SOCIETEVISIT INTO E_societevisit FROM VISITES WHERE VISITEID=E_visiteid;
                PS_ESVISITES_LOG_INS(E_interlocuteurid,'VISITEUR', E_nomprenomvisit,E_societevisit,E_badge,'Sortie badge','OK','Visiteur déjà sorti',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
            ELSE
                SELECT COUNT(I.INTERLOCUTEURID) INTO TMP FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=E_badge AND SITEID=E_siteid AND STATUTID IN (2,32);
                IF TMP>0 THEN
                    SELECT V.VISITEID INTO E_visiteid FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=E_badge AND SITEID=E_siteid AND STATUTID IN (2,32) AND ROWNUM=1;
                    E_RETOUR:='PAS OK,MES_VIS_DSORTI,'||E_visiteid;
                    SELECT INTERLOCUTEURID INTO E_interlocuteurid FROM VISITES WHERE VISITEID=E_visiteid ;
                    SELECT NOMPRENOMVISIT INTO E_nomprenomvisit FROM VISITES WHERE VISITEID=E_visiteid;
                    SELECT SOCIETEVISIT INTO E_societevisit FROM VISITES WHERE VISITEID=E_visiteid;
                    PS_ESVISITES_LOG_INS(E_interlocuteurid,'VISITEUR', E_nomprenomvisit,E_societevisit,E_badge,'Sortie badge','PAS OK','Visiteur non entré',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                END IF;
            END IF;
        END IF;
    END IF;
    IF E_mode_action='5' THEN
        SELECT COUNT(I.INTERLOCUTEURID) INTO TMP FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=E_badge AND SITEID=E_siteid AND STATUTID IN (8,35);
        IF TMP>0 THEN
            SELECT V.VISITEID INTO E_visiteid FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=E_badge AND SITEID=E_siteid AND STATUTID IN (8,35) AND ROWNUM=1;
            PS_ESVISITES_OUTINT(E_visiteid,E_actionDate);
            E_RETOUR:='OK,MES_VIS_SORTI,'||E_visiteid;
            SELECT INTERLOCUTEURID INTO E_interlocuteurid FROM VISITES WHERE VISITEID=E_visiteid ;
            SELECT NOMPRENOMVISIT INTO E_nomprenomvisit FROM VISITES WHERE VISITEID=E_visiteid;
            SELECT SOCIETEVISIT INTO E_societevisit FROM VISITES WHERE VISITEID=E_visiteid;
            PS_ESVISITES_LOG_INS(E_interlocuteurid,'VISITEUR', E_nomprenomvisit,E_societevisit,E_badge,'Entrée/Sortie badge','OK','Sortie validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
        ELSE
            SELECT COUNT(I.INTERLOCUTEURID) INTO TMP FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=E_badge AND SITEID=E_SITEID AND STATUTID IN (2,32) AND (TRUNC(E_dateaction) BETWEEN DEBUTPREVU AND FINPREVU);
            IF TMP>0 THEN
                SELECT V.VISITEID INTO E_visiteid FROM VISITES V, INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=V.INTERLOCUTEURID AND NUMEROBADGE=E_badge AND SITEID=E_SITEID AND STATUTID IN (2,32) AND (TRUNC(E_dateaction) BETWEEN DEBUTPREVU AND FINPREVU) AND ROWNUM=1;
                SELECT INTERLOCUTEURID INTO E_interlocuteurid FROM VISITES WHERE VISITEID=E_visiteid ;
                SELECT NOMPRENOMVISIT INTO E_nomprenomvisit FROM VISITES WHERE VISITEID=E_visiteid;
                SELECT SOCIETEVISIT INTO E_societevisit FROM VISITES WHERE VISITEID=E_visiteid;
                IF (isVisiteurInterdit(E_interlocuteurid,E_dateaction)='0' or isVisiteurInterdit(E_interlocuteurid,E_dateaction)='1' ) THEN
                    PS_ESVISITES_ININT(E_visiteid,E_guichetid,E_actionDate);
                    E_RETOUR:='OK,MES_VIS_ENTRE';
                    PS_ESVISITES_LOG_INS(E_interlocuteurid,'VISITEUR', E_nomprenomvisit,E_societevisit,E_badge,'Entrée/Sortie badge','OK','Entrée validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                ELSE
                    E_RETOUR:='PAS OK,MES_VIS_INTERDIT';
                    PS_ESVISITES_LOG_INS(E_interlocuteurid,'VISITEUR', E_nomprenomvisit,E_societevisit,E_badge,'Entrée/Sortie badge','PAS OK','Visiteur interdit',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                END IF;
            END IF;
        END IF;
    END IF;
    IF E_RETOUR='-1' THEN
        PS_ESVISITES_LOG_INS('-Inconnu-','VISITEUR', '-Inconnu-','-Inconnue-',E_badge,'',' PAS OK','Badge non valide',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
        E_RETOUR:='PAS OK,MES_BADGE_NON_VALIDE';
    END IF;
END;
/
COMMIT;



CREATE OR REPLACE PROCEDURE PS_ESRESIDANT
(
    --RESIDANT
    E_siteid VARCHAR2,
    E_poste  VARCHAR2,
    E_mode_action VARCHAR2,
    E_badge VARCHAR2,
    E_actiondate VARCHAR2,
    E_typeinsert VARCHAR2,
    E_typelecteur VARCHAR2,
    E_RETOUR OUT VARCHAR2
)
IS
    E_residantid VARCHAR2(14);
    E_passagerid VARCHAR2(14);
    E_guichetid VARCHAR2(14);
    E_societeresid VARCHAR2(35);
    E_nomprenomresid VARCHAR2(70);
    E_dateaction DATE;
    TMP INT;
BEGIN
    E_RETOUR:='-1';

    SELECT GUICHETID INTO E_guichetid FROM TQ_POSTE WHERE NOM_POSTE=E_poste AND SITEId=E_siteID;
    SELECT COUNT(RESIDANTID) INTO TMP FROM RESIDANTS WHERE CODEACCES=E_badge;
    IF TMP>0 THEN
        SELECT RESIDANTID INTO E_residantid FROM RESIDANTS WHERE CODEACCES=E_badge and rownum=1;
        SELECT NOMPRENOM INTO E_nomprenomresid FROM RESIDANTS WHERE RESIDANTID=E_residantid;
        SELECT S.NOM INTO E_societeresid FROM SOCIETE S, RESIDANTS R WHERE R.SOCIETEID=S.SOCIETEID AND R.RESIDANTID=E_residantid;
        E_dateaction:=TO_DATE(E_actiondate,'DD/MM/YYYY HH24:MI:SS');
        IF E_mode_action='1' THEN         --ENTRE FORCEE
            SELECT COUNT(VR.PASSAGERID) INTO TMP FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid AND SORTIE IS NULL;
            IF TMP>0 THEN
                SELECT PASSAGERID INTO E_passagerid FROM (SELECT  VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid AND SORTIE IS NULL ORDER BY VR.DATEMAJ) WHERE ROWNUM=1;
                PS_ESVISITES_INOUT_RES(E_residantid,E_guichetid,E_actionDate,E_badge,E_mode_action,E_siteid,E_passagerid);
                E_RETOUR:='OK,RES_SORTI';
                PS_ESVISITES_LOG_INS(E_residantid,'RESIDANT', E_nomprenomresid,E_societeresid,E_badge,'Entrée forcée badge','OK','Sortie validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
            END IF;
            E_passagerid:='';
            IF (isresidantInterdit(E_residantid,E_dateaction)='0') THEN
                PS_ESVISITES_INOUT_RES(E_residantid,E_guichetid,E_actionDate,E_badge,E_mode_action,E_siteid,E_passagerid);
                IF (E_RETOUR<>'-1') THEN
                    E_RETOUR:='OK,RES_SORTIENTRE';
                ELSE
                    E_RETOUR:='OK,RES_ENTRE';
                END    IF;
                PS_ESVISITES_LOG_INS(E_residantid,'RESIDANT', E_nomprenomresid,E_societeresid,E_badge,'Entrée forcée badge','OK','Entrée validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
            ELSE
                E_RETOUR:='PAS OK,MES_RES_INTERDIT';
                PS_ESVISITES_LOG_INS(E_residantid,'RESIDANT', E_nomprenomresid,E_societeresid,E_badge,'Entrée forcée badge','PAS OK','Résident interdit',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
            END IF;
        END IF;
        IF E_mode_action='2' THEN --ENTREE SEULEMENT
            SELECT COUNT(VR.PASSAGERID) INTO TMP FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid AND SORTIE IS NULL;
             IF TMP>0 THEN
                SELECT PASSAGERID INTO E_passagerid FROM (SELECT  VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid AND SORTIE IS NULL ORDER BY VR.DATEMAJ) WHERE ROWNUM=1;
                E_RETOUR:='PAS OK,MES_RES_ENTRE,'||E_passagerid;
                PS_ESVISITES_LOG_INS(E_residantid,'RESIDANT', E_nomprenomresid,E_societeresid,E_badge,'Entrée badge','OK','Résidant déjà entré',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
            ELSE
                E_passagerid:='';
                IF (isresidantInterdit(E_residantid,E_dateaction)='0' ) THEN
                    E_RETOUR:='OK,RES_ENTRE';
                    PS_ESVISITES_INOUT_RES(E_residantid,E_guichetid,E_actionDate,E_badge,E_mode_action,E_siteid,E_passagerid);
                    PS_ESVISITES_LOG_INS(E_residantid,'RESIDANT', E_nomprenomresid,E_societeresid,E_badge,'Entrée badge','OK','Entrée validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                ELSE
                    E_RETOUR:='PAS OK,MES_RES_INTERDIT';
                    PS_ESVISITES_LOG_INS(E_residantid,'RESIDANT', E_nomprenomresid,E_societeresid,E_badge,'Entrée badge','PAS OK','Résident interdit',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                END IF;
            END IF;
        END IF;
        IF E_mode_action='3' THEN    --SORTIE FORCEE
            SELECT COUNT(VR.PASSAGERID) INTO TMP FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid AND SORTIE IS NULL;
            IF TMP>0 THEN
                SELECT PASSAGERID INTO E_passagerid FROM (SELECT  VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid AND SORTIE IS NULL ORDER BY VR.DATEMAJ) WHERE ROWNUM=1;
                PS_ESVISITES_INOUT_RES(E_residantid,E_guichetid,E_actionDate,E_badge,E_mode_action,E_siteid,E_passagerid);
                E_RETOUR:='OK,MES_RES_SORTI,'||E_passagerid;
                PS_ESVISITES_LOG_INS(E_residantid,'RESIDANT', E_nomprenomresid,E_societeresid,E_badge,'Sortie forcée badge','OK','Sortie validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
            ELSE
                E_passagerid:='';
                IF (isresidantInterdit(E_residantid,E_dateaction)='0' ) THEN
                    PS_ESVISITES_INOUT_RES(E_residantid,E_guichetid,E_actionDate,E_badge,E_mode_action,E_siteid,E_passagerid);
                    E_RETOUR:='OK,RES_ENTRE';
                    PS_ESVISITES_LOG_INS(E_residantid,'RESIDANT', E_nomprenomresid,E_societeresid,E_badge,'Sortie forcée badge','OK','Entrée validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                    PS_ESVISITES_INOUT_RES(E_residantid,E_guichetid,E_actionDate,E_badge,E_mode_action,E_siteid,E_passagerid);
                    PS_ESVISITES_LOG_INS(E_residantid,'RESIDANT', E_nomprenomresid,E_societeresid,E_badge,'Sortie forcée badge','OK','Sortie validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                    E_RETOUR:='OK,MES_RES_ENTRESORTI,'||E_passagerid;
                ELSE
                    E_RETOUR:='PAS OK,MES_RES_INTERDIT';
                    PS_ESVISITES_LOG_INS(E_residantid,'RESIDANT', E_nomprenomresid,E_societeresid,E_badge,'Entrée badge','PAS OK','Résident interdit',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                END IF;
            END IF;
        END IF;
        IF E_mode_action='4' THEN    --SORTIE
            SELECT COUNT(VR.PASSAGERID) INTO TMP FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid AND SORTIE IS NULL;
            IF TMP>0 THEN
                    SELECT PASSAGERID INTO E_passagerid FROM (SELECT  VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid AND SORTIE IS NULL ORDER BY VR.DATEMAJ) WHERE ROWNUM=1;
                    PS_ESVISITES_INOUT_RES(E_residantid,E_guichetid,E_actionDate,E_badge,E_mode_action,E_siteid,E_passagerid);
                    E_RETOUR:='OK,RES_SORTI';
                    PS_ESVISITES_LOG_INS(E_residantid,'RESIDANT', E_nomprenomresid,E_societeresid,E_badge,'Sortie badge','OK','Sortie validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
            ELSE
                SELECT COUNT(VR.PASSAGERID) INTO TMP FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid AND SORTIE IS NOT NULL ;
                IF TMP >0 THEN
                SELECT PASSAGERID INTO E_passagerid FROM (SELECT  VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid AND SORTIE IS NOT NULL ORDER BY VR.DATEMAJ) WHERE ROWNUM=1;
                    E_RETOUR:='PAS OK,MES_RES_DSORTI,'||E_passagerid;
                    PS_ESVISITES_LOG_INS(E_residantid,'RESIDANT', E_nomprenomresid,E_societeresid,E_badge,'Sortie badge','OK','Résident déjà sorti',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                ELSE
                    E_passagerid:='';
                    E_RETOUR:='PAS OK,MES_RES_DSORTI,'||E_passagerid;
                    PS_ESVISITES_LOG_INS(E_residantid,'RESIDANT', E_nomprenomresid,E_societeresid,E_badge,'Sortie badge','PAS OK','Résident non entré',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                END IF;
            END IF;
        END IF;
        IF E_mode_action='5' THEN    --ENTRE/SORTIE
            SELECT COUNT(VR.PASSAGERID) INTO TMP FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid AND SORTIE IS NULL ;
            IF TMP>0 THEN
                SELECT PASSAGERID INTO E_passagerid FROM (SELECT  VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid  AND SORTIE IS NULL  ORDER BY VR.DATEMAJ) WHERE ROWNUM=1;
                --INSERT INTO ALARME (ALARMEID,LIBELLE,DATEMAJ,DATECREATION) VALUES ('0',E_passagerid,SYSDATE,SYSDATE);
                PS_ESVISITES_INOUT_RES(E_residantid,E_guichetid,E_actionDate,E_badge,E_mode_action,E_siteid,E_passagerid);
                E_RETOUR:='OK,MES_RES_SORTI,'||E_passagerid;
                PS_ESVISITES_LOG_INS(E_residantid,'RESIDANT', E_nomprenomresid,E_societeresid,E_badge,'Entrée/Sortie badge','OK','Sortie validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
            ELSE
                E_passagerid:='';
                IF (isresidantInterdit(E_residantid,E_dateaction)='0' ) THEN
                    PS_ESVISITES_INOUT_RES(E_residantid,E_guichetid,E_actionDate,E_badge,E_mode_action,E_siteid,E_passagerid);
                    E_RETOUR:='OK,MES_RES_ENTRE';
                    PS_ESVISITES_LOG_INS(E_residantid,'RESIDANT', E_nomprenomresid,E_societeresid,E_badge,'Entrée/Sortie badge','OK','Entrée validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                ELSE
                    E_RETOUR:='PAS OK,MES_RES_INTERDIT';
                    PS_ESVISITES_LOG_INS(E_residantid,'RESIDANT', E_nomprenomresid,E_nomprenomresid,E_badge,'Entrée/Sortie badge','PAS OK','Résident interdit',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                END IF;
            END IF;
        END IF;
    ELSE
        PS_ESVISITES_LOG_INS('-Inconnu-','RESIDANT', '-Inconnu-','-Inconnue-',E_badge,'',' PAS OK','Badge non valide',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
        E_RETOUR:='PAS OK,MES_BADGE_NON_VALIDE';
    END IF ;
END;
/
COMMIT;



CREATE OR REPLACE PROCEDURE PS_ESVEHICULE

  (  --RESIDANT
    E_siteid VARCHAR2,
    E_poste  VARCHAR2,
    E_mode_action VARCHAR2,
    E_badge VARCHAR2,
    E_actiondate VARCHAR2,
    E_typeinsert VARCHAR2,
    E_typelecteur VARCHAR2,
    E_RETOUR OUT VARCHAR2
)
IS

    E_residantid VARCHAR2(14);
    E_vehiculeid VARCHAR2(14);
    E_PASSAGERID VARCHAR2(14);
    E_guichetid VARCHAR2(14);
    E_societeresid VARCHAR2(35);
    E_nomprenomresid VARCHAR2(70);
    E_dateaction DATE;
    TMP INT;
BEGIN
    E_RETOUR:='-1';

    SELECT GUICHETID INTO E_guichetid FROM TQ_POSTE WHERE NOM_POSTE=E_poste AND SITEId=E_siteID;
    SELECT COUNT(V.VEHICULEID) INTO TMP FROM RESIDANTS R, VEHICULE V WHERE R.RESIDANTID=V.RESIDANTID AND V.NUMEROPASS=E_badge;
    IF TMP>0 THEN
        SELECT VEHICULEID INTO E_vehiculeid FROM (SELECT V.VEHICULEID  FROM RESIDANTS R, VEHICULE V WHERE R.RESIDANTID=V.RESIDANTID AND V.NUMEROPASS=E_badge) WHERE ROWNUM=1;
        SELECT RESIDANTID INTO E_residantid FROM VEHICULE WHERE VEHICULEID=E_vehiculeid ;
        SELECT NOMPRENOM INTO E_nomprenomresid FROM RESIDANTS WHERE RESIDANTID=E_residantid;
        SELECT S.NOM INTO E_societeresid FROM SOCIETE S, RESIDANTS R WHERE R.SOCIETEID=S.SOCIETEID AND R.RESIDANTID=E_residantid;
        E_dateaction:=TO_DATE(E_actiondate,'DD/MM/YYYY HH24:MI:SS');
        IF E_mode_action='1' THEN         --ENTRE FORCEE
            SELECT COUNT(VR.PASSAGERID) INTO TMP FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid AND SORTIE IS NULL;
            IF TMP>0 THEN
                SELECT PASSAGERID INTO E_passagerid FROM (SELECT  VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid AND SORTIE IS NULL ORDER BY VR.DATEMAJ) WHERE ROWNUM=1;
                PS_ESVISITES_INOUT_RES(E_residantid,E_guichetid,E_actionDate,E_badge,E_mode_action,E_siteid,E_passagerid);
                E_RETOUR:='OK,VEH_SORTI';
                PS_ESVISITES_LOG_INS(E_residantid,'VEHICULE', E_nomprenomresid,E_societeresid,E_badge,'Entrée forcée badge','OK','Sortie validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
            END IF;
            E_passagerid:='';
            IF (isvehiculeInterdit(E_vehiculeid,E_dateaction)='0') THEN
                PS_ESVISITES_INOUT_RES(E_residantid,E_guichetid,E_actionDate,E_badge,E_mode_action,E_siteid,E_passagerid);
                IF (E_RETOUR<>'-1') THEN
                    E_RETOUR:='OK,RES_SORTIENTRE';
                ELSE
                    E_RETOUR:='OK,VEH_ENTRE';
                END    IF;
                PS_ESVISITES_LOG_INS(E_residantid,'VEHICULE', E_nomprenomresid,E_societeresid,E_badge,'Entrée forcée badge','OK','Entrée validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
            ELSE
                E_RETOUR:='PAS OK,MES_VEH_INTERDIT';
                PS_ESVISITES_LOG_INS(E_residantid,'VEHICULE', E_nomprenomresid,E_societeresid,E_badge,'Entrée forcée badge','PAS OK','Véhicule interdit',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
            END IF;
        END IF;
        IF E_mode_action='2' THEN --ENTREE SEULEMENT
            SELECT COUNT(VR.PASSAGERID) INTO TMP FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid AND SORTIE IS NULL;
             IF TMP>0 THEN
                SELECT PASSAGERID INTO E_passagerid FROM (SELECT  VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid AND SORTIE IS NULL ORDER BY VR.DATEMAJ) WHERE ROWNUM=1;
                E_RETOUR:='PAS OK,MES_VEH_ENTRE,'||E_passagerid;
                PS_ESVISITES_LOG_INS(E_residantid,'VEHICULE', E_nomprenomresid,E_societeresid,E_badge,'Entrée badge','OK','Résidant déjà entré',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
            ELSE
                E_passagerid:='';
                IF (isvehiculeInterdit(E_vehiculeid,E_dateaction)='0' ) THEN
                    E_RETOUR:='OK,VEH_ENTRE';
                    PS_ESVISITES_INOUT_RES(E_residantid,E_guichetid,E_actionDate,E_badge,E_mode_action,E_siteid,E_passagerid);
                    PS_ESVISITES_LOG_INS(E_residantid,'VEHICULE', E_nomprenomresid,E_societeresid,E_badge,'Entrée badge','OK','Entrée validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                ELSE
                    E_RETOUR:='PAS OK,MES_VEH_INTERDIT';
                    PS_ESVISITES_LOG_INS(E_residantid,'VEHICULE', E_nomprenomresid,E_societeresid,E_badge,'Entrée badge','PAS OK','Véhicule interdit',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                END IF;
            END IF;
        END IF;
        IF E_mode_action='3' THEN    --SORTIE FORCEE
            SELECT COUNT(VR.PASSAGERID) INTO TMP FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid AND SORTIE IS NULL;
            IF TMP>0 THEN
                SELECT PASSAGERID INTO E_passagerid FROM (SELECT  VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid AND SORTIE IS NULL ORDER BY VR.DATEMAJ) WHERE ROWNUM=1;
                PS_ESVISITES_INOUT_RES(E_residantid,E_guichetid,E_actionDate,E_badge,E_mode_action,E_siteid,E_passagerid);
                E_RETOUR:='OK,MES_VEH_SORTI,'||E_passagerid;
                PS_ESVISITES_LOG_INS(E_residantid,'VEHICULE', E_nomprenomresid,E_societeresid,E_badge,'Sortie forcée badge','OK','Sortie validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
            ELSE
                E_passagerid:='';
                IF (isvehiculeInterdit(E_vehiculeid,E_dateaction)='0' ) THEN
                    PS_ESVISITES_INOUT_RES(E_residantid,E_guichetid,E_actionDate,E_badge,E_mode_action,E_siteid,E_passagerid);
                    E_RETOUR:='OK,VEH_ENTRE';
                    PS_ESVISITES_LOG_INS(E_residantid,'VEHICULE', E_nomprenomresid,E_societeresid,E_badge,'Sortie forcée badge','OK','Entrée validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                    PS_ESVISITES_INOUT_RES(E_residantid,E_guichetid,E_actionDate,E_badge,E_mode_action,E_siteid,E_passagerid);
                    PS_ESVISITES_LOG_INS(E_residantid,'VEHICULE', E_nomprenomresid,E_societeresid,E_badge,'Sortie forcée badge','OK','Sortie validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                    E_RETOUR:='OK,MES_VEH_ENTRESORTI,'||E_passagerid;
                ELSE
                    E_RETOUR:='PAS OK,MES_VEH_INTERDIT';
                    PS_ESVISITES_LOG_INS(E_residantid,'VEHICULE', E_nomprenomresid,E_societeresid,E_badge,'Entrée badge','PAS OK','Véhicule interdit',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                END IF;
            END IF;
        END IF;
        IF E_mode_action='4' THEN    --SORTIE
            SELECT COUNT(VR.PASSAGERID) INTO TMP FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid AND SORTIE IS NULL;
            IF TMP>0 THEN
                    SELECT PASSAGERID INTO E_passagerid FROM (SELECT  VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid AND SORTIE IS NULL ORDER BY VR.DATEMAJ) WHERE ROWNUM=1;
                    PS_ESVISITES_INOUT_RES(E_residantid,E_guichetid,E_actionDate,E_badge,E_mode_action,E_siteid,E_passagerid);
                    E_RETOUR:='OK,VEH_SORTI';
                    PS_ESVISITES_LOG_INS(E_residantid,'VEHICULE', E_nomprenomresid,E_societeresid,E_badge,'Sortie badge','OK','Sortie validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
            ELSE
                SELECT COUNT(VR.PASSAGERID) INTO TMP FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid AND SORTIE IS NOT NULL ;
                IF TMP >0 THEN
                SELECT PASSAGERID INTO E_passagerid FROM (SELECT  VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid AND SORTIE IS NOT NULL ORDER BY VR.DATEMAJ) WHERE ROWNUM=1;
                    E_RETOUR:='PAS OK,MES_VEH_DSORTI,'||E_passagerid;
                    PS_ESVISITES_LOG_INS(E_residantid,'VEHICULE', E_nomprenomresid,E_societeresid,E_badge,'Sortie badge','OK','Véhicule déjà sorti',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                ELSE
                    E_passagerid:='';
                    E_RETOUR:='PAS OK,MES_VEH_DSORTI,'||E_passagerid;
                    PS_ESVISITES_LOG_INS(E_residantid,'VEHICULE', E_nomprenomresid,E_societeresid,E_badge,'Sortie badge','PAS OK','Véhicule non entré',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                END IF;
            END IF;
        END IF;
        IF E_mode_action='5' THEN    --ENTRE/SORTIE
            SELECT COUNT(VR.PASSAGERID) INTO TMP FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid AND SORTIE IS NULL ;
            IF TMP>0 THEN
                SELECT PASSAGERID INTO E_passagerid FROM (SELECT  VR.PASSAGERID FROM VISITES_RESIDANTS VR, RESIDANTS R WHERE R.RESIDANTID=VR.RESIDANTID AND VR.CODEACCES=E_badge AND VR.SITEID=E_siteid  AND SORTIE IS NULL  ORDER BY VR.DATEMAJ) WHERE ROWNUM=1;
                --INSERT INTO ALARME (ALARMEID,LIBELLE,DATEMAJ,DATECREATION) VALUES ('0',E_passagerid,SYSDATE,SYSDATE);
                PS_ESVISITES_INOUT_RES(E_residantid,E_guichetid,E_actionDate,E_badge,E_mode_action,E_siteid,E_passagerid);
                E_RETOUR:='OK,MES_VEH_SORTI,'||E_passagerid;
                PS_ESVISITES_LOG_INS(E_residantid,'VEHICULE', E_nomprenomresid,E_societeresid,E_badge,'Entrée/Sortie badge','OK','Sortie validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
            ELSE
                E_passagerid:='';
                IF (isvehiculeInterdit(E_vehiculeid,E_dateaction)='0' ) THEN
                    PS_ESVISITES_INOUT_RES(E_residantid,E_guichetid,E_actionDate,E_badge,E_mode_action,E_siteid,E_passagerid);
                    E_RETOUR:='OK,MES_VEH_ENTRE';
                    PS_ESVISITES_LOG_INS(E_residantid,'VEHICULE', E_nomprenomresid,E_societeresid,E_badge,'Entrée/Sortie badge','OK','Entrée validée',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                ELSE
                    E_RETOUR:='PAS OK,MES_RES_INTERDIT';
                    PS_ESVISITES_LOG_INS(E_residantid,'VEHICULE', E_nomprenomresid,E_nomprenomresid,E_badge,'Entrée/Sortie badge','PAS OK','Véhicule interdit',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
                END IF;
            END IF;
        END IF;
    ELSE
        PS_ESVISITES_LOG_INS('-Inconnu-','VEHICULE', '-Inconnu-','-Inconnue-',E_badge,'',' PAS OK','Badge non valide',E_actionDate,E_typeinsert,E_actionDate,E_siteid,E_guichetid,E_poste,E_typelecteur);
        E_RETOUR:='PAS OK,MES_BADGE_NON_VALIDE';
    END IF ;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_ESVISITES_MODE_DEUX
(
    --INTERLOCUTEUR
    E_siteid VARCHAR2,
    E_poste  VARCHAR2,
    E_mode_action VARCHAR2,
    E_badge VARCHAR2,
    E_entite VARCHAR2,
    E_actiondate VARCHAR2,
    E_typeinsert VARCHAR2,
    E_typelecteur VARCHAR2,
    E_RETOUR OUT VARCHAR2
)
IS

BEGIN
    IF E_entite='VISITEUR' THEN
        PS_ESVISITEUR(E_siteid,E_poste,E_mode_action,E_badge,E_actiondate,E_typeinsert,E_typelecteur, E_RETOUR);
    ELSE
        IF E_entite='RESIDANT' THEN
            PS_ESRESIDANT(E_siteid,E_poste,E_mode_action,E_badge,E_actiondate,E_typeinsert,E_typelecteur, E_RETOUR);
       ELSE
        IF E_entite='VEHICULE' THEN
            PS_ESVEHICULE(E_siteid,E_poste,E_mode_action,E_badge,E_actiondate,E_typeinsert,E_typelecteur, E_RETOUR);
        ELSE
            IF E_entite='TRAVAILLEUR' THEN
              PS_ESVISITEUR(E_siteid,E_poste,E_mode_action,E_badge,E_actiondate,E_typeinsert,E_typelecteur, E_RETOUR);
            END IF;
        END IF;
       END IF;
    END IF;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_SORTIE_VISITES_RESIDANTS
IS
BEGIN
    UPDATE VISITES_RESIDANTS SET SORTIE=SYSDATE, OBSERVATION=OBSERVATION || ' | Sortie automatique', DATEMAJ=SYSDATE, DATESYNCHRO=SYSDATE, GUICHET_S='TLMQ SERVEUR' WHERE SORTIE IS NULL;
    COMMIT;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_IMPORT_ROI
(    E_flagin IN INT,
    E_champctrl IN VARCHAR2,
    E_mvt IN VARCHAR2,
    E_source IN VARCHAR2,
    E_etat IN VARCHAR2,
    E_raison IN VARCHAR2,
    E_identifiant IN VARCHAR2,
    E_qualitecivilite IN VARCHAR2,
    E_nom IN VARCHAR2,
    E_prenom IN VARCHAR2,
    E_societe IN VARCHAR2,
    E_unitemanageriale IN VARCHAR2,
    E_labelunitemanageriale IN VARCHAR2,
    E_typepopulation IN VARCHAR2,
    E_typepersonne IN VARCHAR2,
    E_iesocieteprestation IN VARCHAR2,
    E_iedebutmission IN VARCHAR2,
    E_iefinmission IN VARCHAR2,
    E_mail IN VARCHAR2,
    E_codefonction IN VARCHAR2,
    E_fonction IN VARCHAR2,
    E_site IN VARCHAR2,
    E_libellesite IN VARCHAR2,
    E_batiment IN VARCHAR2,
    E_etage IN VARCHAR2,
    E_numerobureau IN VARCHAR2,
    E_rue IN VARCHAR2,
    E_codepostal IN VARCHAR2,
    E_ville IN VARCHAR2,
    E_pays IN VARCHAR2,
    E_telephone IN VARCHAR2,
    E_telephoneinterne IN VARCHAR2,
    E_fax IN VARCHAR2,
    E_codenaturecontrattravail IN VARCHAR2,
    E_indabsencelongueduree IN VARCHAR2,
    E_statutpersonne IN VARCHAR2,
    E_codeantenne IN VARCHAR2,
    E_anciensite IN VARCHAR2,
    E_anciencodeantenne IN VARCHAR2,
    E_thelogin IN VARCHAR2,

    E_ID OUT VARCHAR2
)
IS

    flag VARCHAR2(14);
    myid VARCHAR2(14);

    locmvt varchar2(03);
    locsource varchar2(12);
    locetat varchar2(06);
    locraison varchar2(10);
    locidentifiant varchar2(10);
    locqualitecivilite varchar2(5);
    locnom varchar2(50);
    locprenom varchar2(32);
    locsociete varchar2(05);
    locunitemanageriale varchar2(20);
    loclabelunitemanageriale varchar2(100);
    loctypepopulation varchar2(02);
    loctypepersonne varchar2(30);
    lociesocieteprestation varchar2(100);
    lociedebutmission varchar2(17);
    lociefinmission varchar2(17);
    locmail varchar2(100);
    loccodefonction varchar2(04);
    locfonction varchar2(50);
    locsite varchar2(3);
    loclibellesite varchar2(32);
    locbatiment varchar2(3);
    locetage varchar2(3);
    locnumerobureau varchar2(6);
    locrue varchar2(120);
    loccodepostal varchar2(5);
    locville varchar2(32);
    locpays varchar2(3);
    loctelephone varchar2(13);
    loctelephoneinterne varchar2(6);
    locfax varchar2(13);
    loccodenaturecontrattravail varchar2(05);
    locindabsencelongueduree varchar2(01);
    locstatutpersonne varchar2(02);
    loccodeantenne varchar2(20);
    locanciensite varchar2(3);
    locanciencodeantenne varchar2(20);
    locnomprenom varchar2(70);
    locthelogin varchar2(50);
    nbupdate INT;
    nbinsert INT;
    TMP INT;

BEGIN
    nbupdate := 0;
    nbinsert := 0;

    locmvt:=E_mvt;
    locsource:= E_source;
    locetat:= E_etat;
    locraison:= E_raison;
    locidentifiant:= E_identifiant;
    locqualitecivilite:= E_qualitecivilite;
    locnom:= E_nom;
    locprenom:= E_prenom;
    locsociete:= E_societe;
    locunitemanageriale:= E_unitemanageriale;
    loclabelunitemanageriale:= E_labelunitemanageriale;
    loctypepopulation:= E_typepopulation;
    loctypepersonne:=  E_typepersonne;
    lociesocieteprestation:= E_iesocieteprestation;
    lociedebutmission:= E_iedebutmission;
    lociefinmission:= E_iefinmission;
    locmail:= E_mail ;
    loccodefonction:= E_codefonction;
    locfonction:= E_fonction;
    locsite:= E_site;
    loclibellesite:= E_libellesite;
    locbatiment:= E_batiment;
    locetage:= E_etage;
    locnumerobureau:= E_numerobureau;
    locrue:= E_rue;
    loccodepostal:= E_codepostal;
    locville:= E_ville;
    locpays:= E_pays ;
    loctelephone:= E_telephone;
    loctelephoneinterne:= E_telephoneinterne;
    locfax:= E_fax;
    loccodenaturecontrattravail:= E_codenaturecontrattravail;
    locindabsencelongueduree:= E_indabsencelongueduree;
    locstatutpersonne:= E_statutpersonne;
    loccodeantenne:= E_codeantenne;
    locanciensite:= E_anciensite;
    locanciencodeantenne:= E_anciencodeantenne;
    locthelogin:=E_thelogin;


    IF locmvt='##' THEN
        locmvt:='';
    END IF ;
    IF locsource='##' THEN
    locsource:='';
    END IF ;
    IF locetat='##' THEN
    locetat:='' ;
    END IF ;
    IF locraison='##'  THEN
    locraison:='' ;
    END IF;
    IF locidentifiant='##'  THEN
     locidentifiant:='';
    END IF ;
    IF locqualitecivilite='##'  THEN
    locqualitecivilite:='';
    END IF ;
    IF locnom='##'  THEN
    locnom:='' ;
    END IF;
    IF locprenom='##'  THEN
    locprenom:=''  ;
    END IF ;
    IF locsociete='##'  THEN
    locsociete:='';
    END IF ;
    IF locunitemanageriale='##'  THEN
    locunitemanageriale:='';
    END IF ;
    IF loclabelunitemanageriale='##'  THEN
    loclabelunitemanageriale:='' ;
    END IF ;
    IF loctypepopulation='##'  THEN
    loctypepopulation:='' ;
    END IF ;
    IF loctypepersonne='##'  THEN
    loctypepersonne:='';
    END IF ;
    IF lociesocieteprestation='##'  THEN
    lociesocieteprestation:='';
    END IF ;
    IF lociedebutmission='##'  THEN
    lociedebutmission:='';
    END IF;
    IF lociefinmission='##'  THEN
    lociefinmission:='' ;
    END IF ;
    IF locmail='##'  THEN
    locmail:='' ;
    END IF ;
    IF loccodefonction='##'  THEN
     loccodefonction:='';
    END IF ;
    IF locfonction='##'  THEN
     locfonction:='';
    END IF ;
    IF locsite='##'  THEN
    locsite:=''  ;
    END IF ;
    IF loclibellesite='##'  THEN
    loclibellesite:='';
    END IF ;
    IF locbatiment='##'  THEN
    locbatiment:='';
    END IF ;
    IF locetage='##'  THEN
     locetage:='';
    END IF ;
    IF locnumerobureau='##'  THEN
     locnumerobureau:='';
    END IF ;
    IF locrue='##'  THEN
     locrue:='';
    END IF;
    IF loccodepostal='##'  THEN
     loccodepostal:='';
    END IF ;
    IF locville='##'  THEN
     loccodepostal:='';
    END IF ;
    IF locpays='##'  THEN
     loccodepostal:='';
    END IF ;
    IF loctelephone='##'  THEN
     loctelephone:='';
    END IF ;
    IF loctelephoneinterne='##'  THEN
     loctelephoneinterne:='';
    END IF ;
    IF locfax='##'  THEN
    locfax:='';
    END IF ;
    IF loccodenaturecontrattravail='##'  THEN
    loccodenaturecontrattravail:='';
    END IF ;
    IF locindabsencelongueduree='##'  THEN
    locindabsencelongueduree:='';
    END IF ;
    IF locstatutpersonne='##'  THEN
     locstatutpersonne:='';
    END IF ;
    IF loccodeantenne='##'  THEN
    loccodeantenne:='';
    END IF ;
    IF locanciensite='##'  THEN
     locanciensite:='';
    END IF ;
    IF locanciencodeantenne='##'  THEN
    locanciencodeantenne:='';
    END IF ;
    IF locthelogin='##'  THEN
        locthelogin:='';
    END IF ;

    locnomprenom:=locnom||' '||locprenom;

    IF (locnom IS NOT NULL) AND LTRIM(locnom) IS NOT NULL THEN

        SELECT COUNT(*) INTO TMP FROM IMPORT_ROI WHERE
              CASE
                        WHEN  E_champctrl is null AND (UPPER(NOM||' '||PRENOM)=UPPER(locnomprenom)) THEN 1
                    WHEN  E_champctrl='IDENTIFIANT' AND (UPPER(NOM||' '||PRENOM)=UPPER(locnomprenom)) AND (locidentifiant is null or IDENTIFIANT=locidentifiant) THEN 1
                    ELSE 0
              END=1 ;

        IF TMP>0 THEN
             SELECT IMPORT_ROIID INTO E_ID FROM  (SELECT IMPORT_ROIID FROM IMPORT_ROI WHERE UPPER(NOM||' '||PRENOM)=UPPER(locnomprenom)  AND
              CASE
                        WHEN  E_champctrl is null AND (UPPER(NOM||' '||PRENOM)=UPPER(locnomprenom)) THEN 1
                    WHEN  E_champctrl='IDENTIFIANT' AND (UPPER(NOM||' '||PRENOM)=UPPER(locnomprenom)) AND (locidentifiant is null or IDENTIFIANT=locidentifiant) THEN 1
                    ELSE 0
              END=1) WHERE ROWNUM=1;

            IF locmvt<>'##' or locmvt IS NULL  THEN
                UPDATE IMPORT_ROI SET MVT=locmvt,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID ;
            END IF;
            IF locidentifiant<>'##' or locidentifiant IS NULL  THEN
                UPDATE IMPORT_ROI SET IDENTIFIANT=locidentifiant,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF locsource<>'##' or locsource IS NULL  THEN
                UPDATE IMPORT_ROI SET SOURCE=locsource,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF locetat<>'##' or locetat IS NULL  THEN
                UPDATE IMPORT_ROI SET etat=locetat,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF locraison<>'##' or locraison IS NULL  THEN
                UPDATE IMPORT_ROI SET RAISON=locraison,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF locqualitecivilite<>'##' or locqualitecivilite IS NULL  THEN
                UPDATE IMPORT_ROI SET QUALITECIVILITE=locqualitecivilite,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF locnom<>'##' OR locnom IS NULL THEN
                UPDATE IMPORT_ROI SET NOM=locnom,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF locprenom<>'##' OR locprenom IS NULL THEN
                UPDATE IMPORT_ROI SET PRENOM=locprenom,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF locsociete<>'##' OR locsociete IS NULL THEN
                UPDATE IMPORT_ROI SET SOCIETE=locsociete,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF locunitemanageriale<>'##' OR locunitemanageriale IS NULL THEN
                UPDATE IMPORT_ROI SET UNITEMANAGERIALE=locunitemanageriale,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF loclabelunitemanageriale<>'##' OR loclabelunitemanageriale IS NULL THEN
                UPDATE IMPORT_ROI SET LABELUNITEMANAGERIALE=loclabelunitemanageriale,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF loctypepopulation<>'##' OR loctypepopulation IS NULL THEN
                UPDATE IMPORT_ROI SET TYPEPOPULATION=loctypepopulation,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF loctypepersonne<>'##' OR loctypepersonne IS NULL THEN
                UPDATE IMPORT_ROI SET TYPEPERSONNE=loctypepersonne,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF lociesocieteprestation<>'##' OR lociesocieteprestation IS NULL THEN
                UPDATE IMPORT_ROI SET IESOCIETEPRESTATION=lociesocieteprestation,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF lociedebutmission<>'##' OR lociedebutmission IS NULL THEN
                UPDATE IMPORT_ROI SET IEDEBUTMISSION=lociedebutmission,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF lociefinmission<>'##' OR lociefinmission IS NULL THEN
                UPDATE IMPORT_ROI SET IEFINMISSION=lociefinmission,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF locmail<>'##' OR locmail IS NULL THEN
                UPDATE IMPORT_ROI SET MAIL=locmail,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF loccodefonction<>'##' OR loccodefonction IS NULL THEN
                UPDATE IMPORT_ROI SET CODEFONCTION=loccodefonction,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF locfonction<>'##' OR locfonction IS NULL THEN
                UPDATE IMPORT_ROI SET FONCTION=locfonction,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF locsite<>'##' OR locsite IS NULL THEN
                UPDATE IMPORT_ROI SET SITE=locsite,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF loclibellesite<>'##' OR loclibellesite IS NULL THEN
                UPDATE IMPORT_ROI SET LIBELLESITE=loclibellesite,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF locbatiment<>'##' OR locbatiment IS NULL THEN
                UPDATE IMPORT_ROI SET BATIMENT=locbatiment,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF locetage<>'##' OR locetage IS NULL THEN
                UPDATE IMPORT_ROI SET ETAGE=locetage,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF locnumerobureau<>'##' OR locnumerobureau IS NULL THEN
                UPDATE IMPORT_ROI SET NUMEROBUREAU=locnumerobureau,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF locrue<>'##' OR locrue IS NULL THEN
                UPDATE IMPORT_ROI SET RUE=locrue,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF loccodepostal<>'##' OR loccodepostal IS NULL THEN
                UPDATE IMPORT_ROI SET CODEPOSTAL=loccodepostal,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF locville<>'##' OR locville IS NULL THEN
                UPDATE IMPORT_ROI SET VILLE=locville,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF locpays<>'##' OR locpays IS NULL THEN
                UPDATE IMPORT_ROI SET PAYS=locpays,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF loctelephone<>'##' OR loctelephone IS NULL THEN
                UPDATE IMPORT_ROI SET TELEPHONE=loctelephone,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF loctelephoneinterne<>'##' OR loctelephoneinterne IS NULL THEN
                UPDATE IMPORT_ROI SET TELEPHONEINTERNE=loctelephoneinterne,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF locfax<>'##' OR locfax IS NULL THEN
                UPDATE IMPORT_ROI SET FAX=locfax,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF loccodenaturecontrattravail<>'##' OR loccodenaturecontrattravail IS NULL THEN
                UPDATE IMPORT_ROI SET CODENATURECONTRATTRAVAIL=loccodenaturecontrattravail,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF locindabsencelongueduree<>'##' OR locindabsencelongueduree IS NULL THEN
                UPDATE IMPORT_ROI SET indabsencelongueduree=locindabsencelongueduree,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF locstatutpersonne<>'##' OR locstatutpersonne IS NULL THEN
                UPDATE IMPORT_ROI SET STATUTPERSONNE=locstatutpersonne,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF loccodeantenne<>'##' OR loccodeantenne IS NULL THEN
                UPDATE IMPORT_ROI SET CODEANTENNE=loccodeantenne,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF locanciensite<>'##' OR locanciensite IS NULL THEN
                UPDATE IMPORT_ROI SET ANCIENSITE=locanciensite,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF locanciencodeantenne<>'##' OR locanciencodeantenne IS NULL THEN
                UPDATE IMPORT_ROI SET ANCIENCODEANTENNE=locanciencodeantenne,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            IF locthelogin<>'##' OR locthelogin IS NULL THEN
                UPDATE IMPORT_ROI SET THELOGIN=locthelogin,DATEMAJ=current_timestamp WHERE IMPORT_ROIID=E_ID;
            END IF;
            nbupdate := nbupdate+1;

        ELSE
            SELECT SEQ_IDENTITY.nextval INTO myid FROM DUAL ;
            SELECT SUBSTR(VERSION, 1, 3) INTO FLAG FROM VERSION_SFW WHERE ROWNUM = 1;
            E_ID := flag || myid;

            INSERT INTO IMPORT_ROI (IMPORT_ROIID,MVT,SOURCE,ETAT,RAISON,IDENTIFIANT,QUALITECIVILITE, NOM, PRENOM,SOCIETE,UNITEMANAGERIALE, LABELUNITEMANAGERIALE, TYPEPOPULATION, TYPEPERSONNE, IESOCIETEPRESTATION, IEDEBUTMISSION, IEFINMISSION, MAIL, CODEFONCTION, FONCTION,SITE, LIBELLESITE, BATIMENT, ETAGE, NUMEROBUREAU, RUE, CODEPOSTAL, VILLE, PAYS, TELEPHONE, TELEPHONEINTERNE, FAX,  CODENATURECONTRATTRAVAIL, INDABSENCELONGUEDUREE, STATUTPERSONNE, CODEANTENNE, ANCIENSITE, ANCIENCODEANTENNE, DATECREATION, DATEMAJ,THELOGIN)
                VALUES(E_ID, locmvt,locsource,locetat,locraison,locidentifiant,locqualitecivilite, locnom, locprenom, locsociete,locunitemanageriale, loclabelunitemanageriale, loctypepopulation, loctypepersonne, lociesocieteprestation, lociedebutmission, lociefinmission, locmail, loccodefonction, locfonction,locsite, loclibellesite, locbatiment, locetage, locnumerobureau, locrue, loccodepostal, locville, locpays, loctelephone, loctelephoneinterne, locfax,  loccodenaturecontrattravail, locindabsencelongueduree, locstatutpersonne, loccodeantenne, locanciensite, locanciencodeantenne,SYSDATE,SYSDATE,locthelogin);
            nbinsert := nbinsert + 1;
            COMMIT;
        END IF;
        E_ID := E_ID || ',' || TO_CHAR(nbinsert) || ',' || TO_CHAR(nbupdate);
    ELSE
        E_ID := '-1' || ',' || TO_CHAR(nbinsert) || ',' || TO_CHAR(nbupdate);
    END IF;
END;
/
COMMIT;

CREATE OR REPLACE PROCEDURE PS_ESVISITES_INOUTINT
    (E_visiteid VARCHAR2,
    E_guichetid  VARCHAR2,
    E_actionDate VARCHAR2
 )
IS
    E_interdit VARCHAR2(1)     ;
    E_VID VARCHAR2(14);
    E_FLAG VARCHAR2(14);
    E_IDENTITY VARCHAR2(14);
    E_VSTATUT VARCHAR2(20);
    E_NUMVISITE INT;
    TMPCT INT;
BEGIN
    SELECT count(INTERLOCUTEURID) INTO TMPCT FROM VISITES WHERE STATUTID='8' AND VISITEID=E_visiteid;
    IF TMPCT=0 THEN 
       SELECT MAX(DERNVISITE) INTO E_NUMVISITE FROM PARAMETRES ;
        E_NUMVISITE := E_NUMVISITE + 1;
        UPDATE PARAMETRES SET DERNVISITE = E_NUMVISITE, DATEMAJ=TO_DATE(E_actionDate,'DD/MM/YYYY HH24:MI:SS');
        SELECT STATUTVISITE INTO E_VSTATUT FROM STATUTVISITE WHERE STATUTID = 8 ;

        SELECT SEQ_VISITES.NEXTVAL INTO E_VID FROM DUAL ;

        INSERT INTO VISITES (VISITEID, INTERLOCUTEURID, RESIDANTID, CODESALLE, SITEID, STATUTID, EXTERNALID, SOCIETERESID, NOMPRENOMRESID, 
        SOCIETEVISIT, NOMPRENOMVISIT, DEBUTPREVU, FINPREVU, HDEBUTPREVU, HFINPREVU, NUMEROBADGE, NUMEROVISITE, DEBUTVISITE, FINVISITE, HDEBUT, 
        HFIN, STATUTVISITE, TYPEVISITEID, BOITE, CASIER, OBJET, CASIERID, PIECE, NUMERO, VALIDITE, PARKING, IMMATRICULATION, GUICHETID, OBSERVATION, 
        BUREAUID, LIEU, DATECREATION, DATEMAJ, DATESYNCHRO, ORIGINEVISITE, NBBDGIMPR, NBBDGIMPRTOTAL, FREE1, FREE2, FREE3, FREE4, FREE5, 
        FREE6, FREE7, FREE8, FREE9, FREE10, MARQUE, MODELE, COTE, PREMIER, PREENREG, ECHANGES, ZONE, DESCENTE, BADGEPHYSIQUE, ATTENDU, ATTENDU_VENU, 
        DATEHEUREENTREEPARKING, DATEHEURESORTIEPARKING, STATUTPARKING, DEBLOC, DEBLOC_USER, DEBLOC_USERID, DEBLOC_HEURE, IFONCTION, IDATENAISSANCE, 
        ILIEUNAISSANCE, IPAYS, INOMJEUNEFILLE, MODIFICATION, ETATVISITE, ISTATUT, VIP, CODELGRESERVATION, TICKET, RONDIER, RONDIERID,LAST_ACTION,
        PROFIL_CTRL,PROFIL_CTRL2,PROFIL_CTRL_ID) SELECT E_VID, INTERLOCUTEURID, RESIDANTID, CODESALLE, SITEID, STATUTID, EXTERNALID, SOCIETERESID,
        NOMPRENOMRESID, SOCIETEVISIT, NOMPRENOMVISIT, DEBUTPREVU, FINPREVU, HDEBUTPREVU, HFINPREVU, NUMEROBADGE, NUMEROVISITE, DEBUTVISITE, FINPREVU, 
        HDEBUT, HFINPREVU, STATUTVISITE, TYPEVISITEID, BOITE, CASIER, OBJET, CASIERID, PIECE, NUMERO, VALIDITE, PARKING, IMMATRICULATION, GUICHETID, 
        OBSERVATION, BUREAUID, LIEU, DATECREATION, DATEMAJ, DATESYNCHRO, ORIGINEVISITE, '0', NBBDGIMPRTOTAL, FREE1, FREE2, FREE3, FREE4, FREE5, FREE6,
        FREE7, FREE8, FREE9, FREE10, MARQUE, MODELE, COTE, PREMIER, PREENREG, ECHANGES, ZONE, DESCENTE, BADGEPHYSIQUE, ATTENDU, ATTENDU_VENU,
        DATEHEUREENTREEPARKING, DATEHEURESORTIEPARKING, STATUTPARKING, DEBLOC, DEBLOC_USER, DEBLOC_USERID, DEBLOC_HEURE, IFONCTION, IDATENAISSANCE,
        ILIEUNAISSANCE, IPAYS, INOMJEUNEFILLE, MODIFICATION, ETATVISITE, ISTATUT, VIP, CODELGRESERVATION, TICKET, RONDIER, RONDIERID,
        LAST_ACTION,PROFIL_CTRL,PROFIL_CTRL2,PROFIL_CTRL_ID FROM VISITES WHERE VISITEID=E_visiteid ;

        UPDATE VISITES SET DATECREATION=TO_DATE(E_actionDate,'DD/MM/YYYY HH24:MI:SS'), DATEMAJ=TO_DATE(E_actionDate,'DD/MM/YYYY HH24:MI:SS'), DATESYNCHRO=NULL,
        DEBUTVISITE=TRUNC(TO_DATE(E_actiondate,'DD/MM/YYYY HH24:MI:SS')),
        HDEBUT=TO_DATE(SUBSTR(E_actiondate,12,5),'HH24:MI'),
        HFIN=TO_DATE(SUBSTR(E_actiondate,12,5),'HH24:MI')+2/24,
        STATUTID='8',
        GUICHETID=E_guichetid,
        NUMEROVISITE=E_NUMVISITE,
        STATUTVISITE=E_VSTATUT
        WHERE VISITEID=E_VID;
         INSERT INTO VISITES_LOCALISATION (VISITEID,LOCALISATIONID) SELECT E_VID, L.LOCALISATIONID FROM VISITES_LOCALISATION L WHERE L.VISITEID=E_visiteid;
        
     ELSE
    
        SELECT STATUTVISITE INTO E_VSTATUT FROM STATUTVISITE WHERE STATUTID = 16 ;
        UPDATE VISITES SET STATUTID='16',STATUTVISITE=E_VSTATUT,DATEMAJ=TO_DATE(E_actiondate,'DD/MM/YYYY HH24:MI:SS'),
        FINVISITE=TRUNC(TO_DATE(E_actionDate,'DD/MM/YYYY HH24:MI:SS')), HFIN=TO_DATE(SUBSTR(E_actiondate,12,5),'HH24:MI') WHERE VISITEID=E_visiteid ;
        
    END IF;
END;
/
COMMIT;
CREATE OR REPLACE PROCEDURE PS_IMPORT_PHOTO
(    E_flagin IN INT,
    E_champctrl IN VARCHAR2,
    E_uniquekey IN VARCHAR2,
    E_photo BLOB,
    E_ID OUT VARCHAR2
)
IS
 TMP INT;
BEGIN


    IF (E_champctrl IS NOT NULL) AND LTRIM(E_champctrl) IS NOT NULL  AND E_champctrl<>'##' THEN

        SELECT COUNT(*) INTO TMP FROM RESIDANTS R WHERE
              CASE

                    WHEN  E_champctrl='NOMPRENOM' AND UPPER(NOMPRENOM)=UPPER(E_uniquekey) THEN 1
                    WHEN  E_champctrl='MATRICULE' AND UPPER(MATRICULE)=UPPER(E_uniquekey) THEN 1
                    WHEN  E_champctrl='BADGE' AND UPPER(CODEACCES)=UPPER(E_uniquekey) THEN 1
                    WHEN  E_champctrl='EMAIL' AND UPPER(EMAIL)=UPPER(E_uniquekey) THEN 1
                    ELSE 0
              END=1 ;

        IF TMP>0 THEN
             SELECT RESIDANTID INTO E_ID FROM  (SELECT RESIDANTID FROM RESIDANTS R WHERE
              CASE

                     WHEN  E_champctrl='NOMPRENOM' AND UPPER(NOMPRENOM)=UPPER(E_uniquekey) THEN 1
                    WHEN  E_champctrl='MATRICULE' AND UPPER(MATRICULE)=UPPER(E_uniquekey) THEN 1
                    WHEN  E_champctrl='BADGE' AND UPPER(CODEACCES)=UPPER(E_uniquekey) THEN 1
                    WHEN  E_champctrl='EMAIL' AND UPPER(EMAIL)=UPPER(E_uniquekey) THEN 1
                    ELSE 0
              END=1) WHERE ROWNUM=1;


                UPDATE RESIDANTS SET PHOTO =E_photo, DATEMAJ=SYSDATE WHERE RESIDANTID=E_ID;
                COMMIT;
                E_ID := E_ID || ',0,1';
        ELSE
                 E_ID := E_ID || ',0,0';
        END IF;
    ELSE
        E_ID := '-1,0,1';
    END IF;

END;
/
COMMIT;

CREATE OR REPLACE FUNCTION GET_LOCALISATIONBYVISITE(MYVISITEID VARCHAR2) RETURN VARCHAR2
  IS
    TMP VARCHAR2(4000);
    TMP2 VARCHAR2(4000);
BEGIN
     SELECT COALESCE(TMP||',','')||NVL(L.LIBELLE,'') INTO TMP FROM LOCALISATION L,VISITES_LOCALISATION VL WHERE VL.LOCALISATIONID=L.LOCALISATIONID AND VL.VISITEID=MYVISITEID;
    SELECT SUBSTR(TMP,2,LENGTH(TMP)) INTO TMP2 FROM DUAL;
    RETURN TMP2;
END;
/
COMMIT;

CREATE OR REPLACE FUNCTION GET_CONSIGNE(E_INTERLOCUTEURID VARCHAR2) RETURN VARCHAR2 IS O_RESIDANTID VARCHAR2(14);
BEGIN
    O_RESIDANTID:='';
    SELECT NVL(INTERLOCUTEURID,'') INTO O_RESIDANTID FROM (SELECT INTERLOCUTEURID FROM CONSIGNE WHERE INTERLOCUTEURID =E_INTERLOCUTEURID AND RESIDANTID='VISITEUR'  ORDER BY DATEMAJ) WHERE ROWNUM=1;
    RETURN  O_RESIDANTID;
END;
/
COMMIT;


CREATE OR REPLACE PROCEDURE PS_PURGE_SOCIETE (E_SOCIETEID VARCHAR2)
IS
TMP NUMBER;
BEGIN
    select count(SOCIETEID) INTO TMP from SOCIETE where SOCIETEID=E_SOCIETEID AND (INTERDIT=1 OR (SELECt COUNT(INTERLOCUTEURID) FROM INTERLOCUTEUR I WHERE I.SOCIETEID=E_SOCIETEID AND I.INTERDIT<>'0')>0);
    IF TMP=0 THEN
        DELETE FROM COLISEMIS  WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=E_SOCIETEID AND INTERDIT='0');
        DELETE FROM COLISRECU WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=E_SOCIETEID AND INTERDIT='0');
        DELETE FROM CONSIGNE WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=E_SOCIETEID AND INTERDIT='0');
        DELETE FROM CONTACT WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=E_SOCIETEID AND INTERDIT='0');
        DELETE FROM DEVIS WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=E_SOCIETEID AND INTERDIT='0');

        DELETE FROM HLGPARTICIPANT WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=E_SOCIETEID AND INTERDIT='0');
        DELETE FROM HVISITES WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=E_SOCIETEID AND INTERDIT='0');
        DELETE FROM IDENTITES WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=E_SOCIETEID  AND INTERDIT='0');
        DELETE FROM INTER_RSERVICE WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=E_SOCIETEID AND INTERDIT='0');
        DELETE FROM LGPARTICIPANT WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=E_SOCIETEID AND INTERDIT='0');

        DELETE FROM OJOURNAL_PERSMVT WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=E_SOCIETEID AND INTERDIT='0');
        DELETE FROM VISITES_TEMP WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=E_SOCIETEID AND INTERDIT='0');
        DELETE FROM PASSAGERTAXI WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=E_SOCIETEID AND INTERDIT='0');
        DELETE FROM INTER_ACTION WHERE INTERLOCUTEURID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=E_SOCIETEID AND INTERDIT='0');
        DELETE FROM XANNEXE WHERE ORIGINE='INTERLOCUTEUR' AND ORIGINEID IN (SELECT INTERLOCUTEURID FROM INTERLOCUTEUR  WHERE SOCIETEID=E_SOCIETEID AND INTERDIT='0');
        DELETE FROM XANNEXE WHERE ORIGINE='VISITES' AND (ORIGINEID IN ( SELECT VISITEID FROM VISITES WHERE INTERLOCUTEURID IN (select INTERLOCUTEURID from INTERLOCUTEUR where SOCIETEID=E_SOCIETEID AND INTERDIT='0') ) OR REFID IN ( SELECT VISITEID FROM VISITES WHERE INTERLOCUTEURID IN (select INTERLOCUTEURID from INTERLOCUTEUR where SOCIETEID=E_SOCIETEID AND INTERDIT='0') )) ;

        DELETE FROM VISITES WHERE INTERLOCUTEURID IN (select INTERLOCUTEURID from INTERLOCUTEUR where SOCIETEID=E_SOCIETEID AND INTERDIT='0') ;
        DELETE FROM CONTACT WHERE  SOCIETEID=E_SOCIETEID;
        DELETE FROM SERVICE WHERE DEPTID IN (SELECT DEPTID FROM DEPARTEMENT WHERE SOCIETEID=E_SOCIETEID);
        DELETE FROM DEPARTEMENT WHERE SOCIETEID=E_SOCIETEID;
        DELETE FROM DEVIS WHERE SOCIETEID=E_SOCIETEID;
        DELETE FROM DIRECTIONS WHERE SOCIETEID=E_SOCIETEID;

        DELETE FROM MARQUE WHERE SOCIETEID=E_SOCIETEID;
        DELETE FROM PARKING WHERE SOCIETEID=E_SOCIETEID;
        DELETE FROM POSTE WHERE SOCIETEID=E_SOCIETEID;
        DELETE FROM PXACHAT WHERE SOCIETEID=E_SOCIETEID;
        DELETE FROM RESERVATION WHERE SOCIETEID=E_SOCIETEID;
        DELETE FROM SALLE WHERE SOCIETEID=E_SOCIETEID;
        DELETE FROM SOCIETE_LOCALISATION  WHERE SOCIETEID=E_SOCIETEID;
        DELETE FROM SOCBAT WHERE SOCIETEID=E_SOCIETEID;
        DELETE FROM SOCMAR WHERE SOCIETEID=E_SOCIETEID;
        DELETE FROM SOCSITE  WHERE SOCIETEID=E_SOCIETEID;
        DELETE FROM SOCIETE_ACTION WHERE SOCIETEID=E_SOCIETEID;
        DELETE FROM USERS WHERE SOCIETEID=E_SOCIETEID;
        DELETE FROM XANNEXE WHERE ORIGINE='SOCIETE' AND ORIGINEID=E_SOCIETEID;
        DELETE FROM IDENTITES WHERE INTERLOCUTEURID IN (select INTERLOCUTEURID from INTERLOCUTEUR where SOCIETEID=E_SOCIETEID AND INTERDIT='0') ;
        DELETE FROM INTERLOCUTEUR WHERE SOCIETEID=E_SOCIETEID AND INTERDIT='0';
        DELETE FROM SOCIETE WHERE SOCIETEID=E_SOCIETEID;

        DELETE FROM XANNEXE WHERE ORIGINE='INTERLOCUTEUR' AND ((SELECT COUNT(INTERLOCUTEURID) FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=ORIGINEID AND INTERDIT='0')=0);
        DELETE FROM XANNEXE WHERE ORIGINE='SOCIETE' AND ((SELECT COUNT(SOCIETEID) FROM SOCIETE WHERE SOCIETEID=ORIGINEID)=0);
        DELETE FROM XANNEXE WHERE ORIGINE='VISITES' AND ((SELECT COUNT(VISITEID) FROM VISITES WHERE VISITEID=ORIGINEID)=0);
        DELETE FROM IDENTITES IDT WHERE ((SELECT COUNT(INTERLOCUTEURID) FROM INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=IDT.INTERLOCUTEURID AND I.INTERDIT='0')=0);
    END IF;
 END;
/
COMMIT;
CREATE OR REPLACE PROCEDURE PS_PURGE_VISITEUR (E_INTERLOCUTEURID VARCHAR2)
IS
TMP NUMBER;
BEGIN
    select count(INTERLOCUTEURID) INTO TMP from INTERLOCUTEUR where INTERLOCUTEURID=E_INTERLOCUTEURID AND INTERDIT<>0;
    IF TMP=0 THEN
        DELETE FROM COLISEMIS  WHERE INTERLOCUTEURID=E_INTERLOCUTEURID;
        DELETE FROM COLISRECU WHERE INTERLOCUTEURID=E_INTERLOCUTEURID;
        DELETE FROM CONSIGNE WHERE INTERLOCUTEURID=E_INTERLOCUTEURID;
        DELETE FROM CONTACT WHERE INTERLOCUTEURID=E_INTERLOCUTEURID;
        DELETE FROM DEVIS WHERE INTERLOCUTEURID=E_INTERLOCUTEURID;

        DELETE FROM HLGPARTICIPANT WHERE INTERLOCUTEURID=E_INTERLOCUTEURID;
        DELETE FROM HVISITES WHERE INTERLOCUTEURID=E_INTERLOCUTEURID;
        DELETE FROM IDENTITES WHERE INTERLOCUTEURID=E_INTERLOCUTEURID;
        DELETE FROM INTER_RSERVICE WHERE INTERLOCUTEURID=E_INTERLOCUTEURID;
        DELETE FROM LGPARTICIPANT WHERE INTERLOCUTEURID=E_INTERLOCUTEURID;

        DELETE FROM OJOURNAL_PERSMVT WHERE INTERLOCUTEURID=E_INTERLOCUTEURID;
        DELETE FROM VISITES_TEMP WHERE INTERLOCUTEURID=E_INTERLOCUTEURID;
        DELETE FROM PASSAGERTAXI WHERE INTERLOCUTEURID=E_INTERLOCUTEURID;
        DELETE FROM INTER_ACTION WHERE INTERLOCUTEURID=E_INTERLOCUTEURID;
        DELETE FROM XANNEXE WHERE ORIGINE='INTERLOCUTEUR' AND ORIGINEID=E_INTERLOCUTEURID;
        DELETE FROM XANNEXE WHERE ORIGINE='VISITES' AND (ORIGINEID IN ( SELECT VISITEID FROM VISITES WHERE INTERLOCUTEURID=E_INTERLOCUTEURID) ) OR REFID IN ( SELECT VISITEID FROM VISITES WHERE INTERLOCUTEURID=E_INTERLOCUTEURID);

        DELETE FROM VISITES WHERE INTERLOCUTEURID=E_INTERLOCUTEURID;
        DELETE FROM IDENTITES WHERE INTERLOCUTEURID=E_INTERLOCUTEURID;
        DELETE FROM XANNEXE WHERE ORIGINE='INTERLOCUTEUR' AND ORIGINEID=E_INTERLOCUTEURID;
		DELETE FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=E_INTERLOCUTEURID;
        DELETE FROM XANNEXE WHERE ORIGINE='VISITES' AND ((SELECT COUNT(VISITEID) FROM VISITES WHERE VISITEID=ORIGINEID)=0);
        DELETE FROM IDENTITES IDT WHERE ((SELECT COUNT(INTERLOCUTEURID) FROM INTERLOCUTEUR I WHERE I.INTERLOCUTEURID=IDT.INTERLOCUTEURID AND I.INTERDIT='0')=0);
    END IF;
 END;
/

COMMIT;


CREATE OR REPLACE FUNCTION GET_GRPVALIDEUR(MYVISITEID VARCHAR2) RETURN  VARCHAR2
IS
	TMP VARCHAR2(4000);
	TMP2 VARCHAR2(4000);
BEGIN

	SELECT COALESCE(TMP||',','')||TO_CHAR(NVL(GV.GRPVALIDEURID,'')) 
    INTO TMP FROM REGLE_GRPVALIDEUR GV , VISITE_REGLE VR
	WHERE  GV.REGLEID=VR.REGLEID AND VR.VISITEID=MYVISITEID; --AND GV.GRPVALIDEURID=GRPVALIDEURID;
	TMP2:=TMP ;
	RETURN TMP2;
END;
/
COMMIT;

CREATE OR REPLACE FUNCTION GET_VAL_VIS_LOC(MYVISITEID VARCHAR2,MYUSERID VARCHAR2) RETURN  VARCHAR2
IS
	TMP VARCHAR2(1);
	TMPCOUNT NUMBEr;
BEGIN
	TMP:='1';
	TMPCOUNT:=0;
	SELECT LOCALISATIONID INTO TMPCOUNT FROM LOCALISATION_USER WHERE USERID=MYUSERID;
	IF TMPCOUNT>0 THEN
	SELECT TO_CHAR(COUNT(*)) INTO TMP FROM VISITES_LOCALISATION L, LOCALISATION_USER LU WHERE LU.LOCALISATIONID=L.LOCALISATIONID AND L.VISITEID=MYVISITEID  AND LU.USERID=MYUSERID;
	END IF;
	RETURN TMP;
END;
/
COMMIT;
CREATE OR REPLACE FUNCTION GET_ETATGRPVALIDEUR(MYVISITEID VARCHAR2,MYGRPVALIDEURID VARCHAR2) RETURN  VARCHAR2
IS
TMP VARCHAR2(1);
LESGRPVALIDEURID VARCHAR2(20);
BEGIN

    LESGRPVALIDEURID:=GET_GRPVALIDEUR(MYVISITEID);
    SELECT CASE WHEN MYGRPVALIDEURID=-1 AND (RES_OS IS NULL AND INSTR(LESGRPVALIDEURID,'-1')>0 OR INSTR(LESGRPVALIDEURID,'-1')=0)
                                                    AND (GRPVALIDEUR2 IS NOT NULL AND INSTR(LESGRPVALIDEURID,'-2')>0 OR INSTR(LESGRPVALIDEURID,'-2')=0)
                                                    AND (GRPVALIDEUR3 IS NOT NULL AND INSTR(LESGRPVALIDEURID,'-3')>0 OR INSTR(LESGRPVALIDEURID,'-3')=0)
                                                    AND (GRPVALIDEUR4 IS NOT NULL AND INSTR(LESGRPVALIDEURID,'-4')>0 OR INSTR(LESGRPVALIDEURID,'-4')=0)  THEN '1'
                            WHEN MYGRPVALIDEURID=-2 --AND (RES_OS IS NOT NULL AND INSTR('-1',LESGRPVALIDEURID)>0 OR INSTR('-1',LESGRPVALIDEURID)=0)
                                                    AND (GRPVALIDEUR2 IS NULL AND INSTR(LESGRPVALIDEURID,'-2')>0 OR INSTR(LESGRPVALIDEURID,'-2')=0)
                                                    AND (GRPVALIDEUR3 IS NOT NULL AND INSTR(LESGRPVALIDEURID,'-3')>0 OR INSTR(LESGRPVALIDEURID,'-3')=0)
                                                    AND (GRPVALIDEUR4 IS NOT NULL AND INSTR(LESGRPVALIDEURID,'-4')>0 OR  INSTR(LESGRPVALIDEURID,'-4')=0)  THEN '1'
                            WHEN MYGRPVALIDEURID=-3 --AND (RES_OS IS NOT NULL AND INSTR('-1',LESGRPVALIDEURID)>0 OR INSTR('-1',LESGRPVALIDEURID)=0)
                                                    --AND (GRPVALIDEUR2 IS NOT NULL AND INSTR('-2',LESGRPVALIDEURID)>0 OR INSTR('-2',LESGRPVALIDEURID)=0)
                                                    AND (GRPVALIDEUR3 IS NULL AND INSTR(LESGRPVALIDEURID,'-3')>0 OR INSTR(LESGRPVALIDEURID,'-3')=0)
                                                    AND (GRPVALIDEUR4 IS NOT NULL AND INSTR(LESGRPVALIDEURID,'-4')>0 OR INSTR(LESGRPVALIDEURID,'-4')=0)  THEN '1'
                            WHEN MYGRPVALIDEURID=-4 AND --(RES_OS IS NOT NULL AND INSTR('-1',LESGRPVALIDEURID)>0 OR INSTR('-1',LESGRPVALIDEURID)=0)
                                                    --AND (GRPVALIDEUR2 IS NOT NULL AND INSTR('-2',LESGRPVALIDEURID)>0 OR INSTR('-2',LESGRPVALIDEURID)=0)
                                                    --AND (GRPVALIDEUR3 IS NOT NULL AND INSTR('-3',LESGRPVALIDEURID)>0 OR INSTR('-3',LESGRPVALIDEURID)=0)
                                                     (GRPVALIDEUR4 IS NULL AND INSTR(LESGRPVALIDEURID,'-4')>0 OR INSTR(LESGRPVALIDEURID,'-4')=0)  THEN '1'

                           ELSE '0' END INTO TMP FROM  VISITES WHERE VISITEID=MYVISITEID;
    RETURN TMP;
END;
/

COMMIT;

CREATE OR REPLACE FUNCTION F_GET_ASSOCIATION (MYcodesalle VARCHAR2)
RETURN VARCHAR2
IS
    MYWork VARCHAR2(1000);
	MYCOMBI VARCHAR2(150);
	MYSALLE VARCHAR2(150);
    CURSOR CURSEUR
    IS
    SELECT SF.LIBELLE COMBI,S.LIBELLE SALLE FROM SALLEFUS SF,SALLEFUS_COMP SFC,SALLE S
	WHERE SF.CODESALLEFUS=SFC.CODESALLEFUS AND DECODESALLE=S.CODESALLE
	AND SF.CODESALLEFUS IN (SELECT SF.CODESALLEFUS FROM SALLEFUS SF,SALLEFUS_COMP SFC WHERE SF.CODESALLEFUS=SFC.CODESALLEFUS AND (DECODESALLE=MYcodesalle OR SFC.CODESALLE=MYcodesalle))
	UNION SELECT SF.LIBELLE COMBI,S.LIBELLE SALLE FROM SALLEFUS SF,SALLEFUS_COMP SFC,SALLE S
	WHERE SF.CODESALLEFUS=SFC.CODESALLEFUS AND SFC.CODESALLE=S.CODESALLE
	AND SF.CODESALLEFUS IN (SELECT SF.CODESALLEFUS FROM SALLEFUS SF,SALLEFUS_COMP SFC WHERE SF.CODESALLEFUS=SFC.CODESALLEFUS AND (DECODESALLE=MYcodesalle OR SFC.CODESALLE=MYcodesalle)) ORDER BY COMBI,SALLE;

	BEGIN

	MYwork := '';

	OPEN CURSEUR;
	LOOP
		FETCH CURSEUR
		INTO MYCOMBI,MYSALLE;

		Exit When CURSEUR%NOTFOUND;
		MYwork := MYwork||';'||MYCOMBI||'|'||MYSALLE;
	End loop ;

	CLOSE CURSEUR;


    RETURN MYwork;
END;
/
COMMIT;

CREATE OR REPLACE FUNCTION F_GET_AMENAGEMENT (MYcodesalle VARCHAR2)
RETURN VARCHAR2
IS
    MYWork VARCHAR2(1000);
	MYLIBELLE VARCHAR2(150);
	MYCAPACITE VARCHAR2(150);
	MYPREPA VARCHAR2(150);
	MYRANG VARCHAR2(150);
    CURSOR CURSEUR
    IS
    SELECT NVL(LIBELLE,'') LIBELLE,NVL(CAPACITE,'') CAPACITE,NVL(TO_CHAR(PREPARATION,'HH24:MI'),'') PREPA,NVL(TO_CHAR(RANGEMENT,'HH24:MI'),'') RANG FROM AMENAGEMENT,AMENAGSALLE WHERE AMENAGEMENT.CODEAMENAGEMENT=AMENAGSALLE.CODEAMENAGEMENT AND CODESALLE=MYcodesalle ORDER BY LIBELLE;

	BEGIN

	MYwork := '';

	OPEN CURSEUR;
	LOOP
		FETCH CURSEUR
		INTO MYLIBELLE,MYCAPACITE,MYPREPA,MYRANG;

		Exit When CURSEUR%NOTFOUND;
		MYwork := MYwork||';'||MYLIBELLE||'|'||MYCAPACITE||'|'||MYPREPA||'|'||MYRANG;
	End loop ;
	CLOSE CURSEUR;


    RETURN MYwork;
END;
/
COMMIT;
EXIT;


