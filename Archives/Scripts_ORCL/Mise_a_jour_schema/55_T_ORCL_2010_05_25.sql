ALTER TABLE BADGES ADD HAUTEUR INT;
ALTER TABLE BADGES ADD LARGEUR INT;
COMMIT;

CREATE TABLE BADGES_ELEMENTS
(
BADGES_ELEMENTID	VARCHAR2(14 CHAR) PRIMARY KEY,
BADGEID	VARCHAR2(14 CHAR) NOT NULL,
BADGES_IMAGEID	VARCHAR2(14 CHAR),
NATURE	VARCHAR2(35 CHAR),
VALEUR	VARCHAR2(50 CHAR),
CHAMP	VARCHAR2(50 CHAR),
POLICE	VARCHAR2(50 CHAR),
TAILLE	INT,
ALIGNEMENT VARCHAR2(15 CHAR),
GRAS	INT DEFAULT 0,
ITALIQUE	INT DEFAULT 0,
SOULIGNE	INT DEFAULT 0,
COLOR	INT,
HAUT	INT,
GAUCHE	INT,
LARGEUR	INT,
HAUTEUR	INT,
DATECREATION	DATE NOT NULL,
DATEMAJ	DATE NOT NULL
);
COMMIT;

CREATE TABLE BADGES_ELEMENTS_TMP
(
BADGES_ELEMENTID	VARCHAR2(14 CHAR) PRIMARY KEY,
BADGEID	VARCHAR2(14 CHAR) NOT NULL,
BADGES_IMAGEID	VARCHAR2(14 CHAR),
NATURE	VARCHAR2(35 CHAR),
VALEUR	VARCHAR2(50 CHAR),
CHAMP	VARCHAR2(50 CHAR),
POLICE	VARCHAR2(50 CHAR),
TAILLE	INT,
ALIGNEMENT VARCHAR2(15 CHAR),
GRAS	INT DEFAULT 0,
ITALIQUE	INT DEFAULT 0,
SOULIGNE	INT DEFAULT 0,
COLOR	INT,
HAUT	INT,
GAUCHE	INT,
LARGEUR	INT,
HAUTEUR	INT,
DATECREATION	DATE NOT NULL,
DATEMAJ	DATE NOT NULL
);
COMMIT;

CREATE TABLE BADGES_IMAGES
(
BADGES_IMAGEID	VARCHAR2(14 CHAR) PRIMARY KEY,
IMAGE BLOB,
CONTENTTYPE VARCHAR2(50 CHAR),
SOURCEFILENAME VARCHAR2(100 CHAR),
DATASIZE INT,
DATECREATION	DATE NOT NULL,
DATEMAJ	DATE NOT NULL
);
COMMIT;

CREATE TABLE PERIPHERIQUE
(
PERIPHERIQUEID	INT PRIMARY KEY,
PERIPHERIQUE_TRAITEMENTID	INT,
NOM VARCHAR2(50 CHAR),
AVANT VARCHAR2(20 CHAR),
APRES VARCHAR2(20 CHAR),
DEBUT INT,
LONGUEUR INT,
LONGUEUR_MAX INT,
DECOUPE INT,
CONVERSION INT,
TYPE_PORT VARCHAR2(35 CHAR),
BIT_SECONDE INT,
BIT_DONNEE INT,
PARITE VARCHAR2(15 CHAR),
BIT_ARRET VARCHAR2(15 CHAR),
CONTROLE_FLUX VARCHAR2(15 CHAR),
DATECREATION	DATE NOT NULL,
DATEMAJ	DATE NOT NULL
);
COMMIT;

CREATE TABLE PERIPHERIQUE_TRAITEMENT
(
PERIPHERIQUE_TRAITEMENTID	INT PRIMARY KEY,
LIBELLE VARCHAR2(50 CHAR),
FAMILLE INT,
DATECREATION	DATE NOT NULL,
DATEMAJ	DATE NOT NULL
);
COMMIT;

CREATE TABLE PERIPHERIQUE_POSTE
(
PERIPHERIQUEID	INT,
NOM_POSTE VARCHAR2(50 CHAR),
PORT VARCHAR2(15 CHAR),
DATECREATION	DATE NOT NULL,
DATEMAJ	DATE NOT NULL
);
COMMIT;

CREATE TABLE ETATS
(
ETATID		INT	PRIMARY KEY,
LIBELLE		VARCHAR2(100 CHAR),
CHAMP_SELECT	VARCHAR2(2000 CHAR),
CHAMP_FROM		VARCHAR2(1000 CHAR),
CHAMP_WHERE		VARCHAR2(1000 CHAR),
CHAMP_ORDER		VARCHAR2(1000 CHAR),
MODIFICATION	VARCHAR2(1000 CHAR),
MODIFICATION_OPERATEUR	VARCHAR2(1000 CHAR),
MODIFICATION_VALEUR	VARCHAR2(1000 CHAR),
DATECREATION	DATE NOT NULL,
DATEMAJ			DATE NOT NULL
);
COMMIT;

/* INSERT INTO PERIPHERIQUE (PERIPHERIQUEID, NOM, AVANT, APRES, DEBUT, LONGUEUR, LONGUEUR_MAX, DATECREATION, DATEMAJ) VALUES (-1,'Standard','','',NULL,NULL,NULL,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
INSERT INTO PERIPHERIQUE (PERIPHERIQUEID, NOM, AVANT, APRES, DEBUT, LONGUEUR, LONGUEUR_MAX, DATECREATION, DATEMAJ) VALUES (-2,'TIL','','<CR><LF>',0,20,NULL,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
INSERT INTO PERIPHERIQUE (PERIPHERIQUEID, NOM, AVANT, APRES, DEBUT, LONGUEUR, LONGUEUR_MAX, DATECREATION, DATEMAJ) VALUES (-3,'Lecteur2','','<CR>',4,5,NULL,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
INSERT INTO PERIPHERIQUE (PERIPHERIQUEID, NOM, AVANT, APRES, DEBUT, LONGUEUR, LONGUEUR_MAX, DATECREATION, DATEMAJ) VALUES (-4,'AEOS','<CH>','',8,5,NULL,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
INSERT INTO PERIPHERIQUE (PERIPHERIQUEID, NOM, AVANT, APRES, DEBUT, LONGUEUR, LONGUEUR_MAX, DATECREATION, DATEMAJ) VALUES (-5,'STID DK-PROX','','<CR><LF>',5,6,NULL,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
INSERT INTO PERIPHERIQUE (PERIPHERIQUEID, NOM, AVANT, APRES, DEBUT, LONGUEUR, LONGUEUR_MAX, DATECREATION, DATEMAJ) VALUES (-6,'LEGIC','','',3,10,29,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
INSERT INTO PERIPHERIQUE (PERIPHERIQUEID, NOM, AVANT, APRES, DEBUT, LONGUEUR, LONGUEUR_MAX, DATECREATION, DATEMAJ) VALUES (-7,'IBC','','',NULL,NULL,37,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
INSERT INTO PERIPHERIQUE (PERIPHERIQUEID, NOM, AVANT, APRES, DEBUT, LONGUEUR, LONGUEUR_MAX, DATECREATION, DATEMAJ) VALUES (-8,'DEISTER-02-10-ASK','<CH>','<CF>',3,10,NULL,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
INSERT INTO PERIPHERIQUE (PERIPHERIQUEID, NOM, AVANT, APRES, DEBUT, LONGUEUR, LONGUEUR_MAX, DATECREATION, DATEMAJ) VALUES (-9,'DEISTER-PHILIPS','<CH>','<CF>',5,8,NULL,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
INSERT INTO PERIPHERIQUE (PERIPHERIQUEID, NOM, AVANT, APRES, DEBUT, LONGUEUR, LONGUEUR_MAX, DATECREATION, DATEMAJ) VALUES (-10,'DEISTER-05-10-AXA','<CH>','<CF>',5,8,NULL,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
COMMIT; */
INSERT INTO PERIPHERIQUE_TRAITEMENT (PERIPHERIQUE_TRAITEMENTID, LIBELLE, FAMILLE, DATECREATION, DATEMAJ) VALUES (-1,'SWISS_READER',2,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
INSERT INTO PERIPHERIQUE_TRAITEMENT (PERIPHERIQUE_TRAITEMENTID, LIBELLE, FAMILLE, DATECREATION, DATEMAJ) VALUES (-2,'MAGNETA_ESCORT2',4,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
INSERT INTO PERIPHERIQUE_TRAITEMENT (PERIPHERIQUE_TRAITEMENTID, LIBELLE, FAMILLE, DATECREATION, DATEMAJ) VALUES (-3,'DEISTER_GUARDIX',4,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
INSERT INTO PERIPHERIQUE_TRAITEMENT (PERIPHERIQUE_TRAITEMENTID, LIBELLE, FAMILLE, DATECREATION, DATEMAJ) VALUES (-4,'BADGE',1,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
INSERT INTO PERIPHERIQUE_TRAITEMENT (PERIPHERIQUE_TRAITEMENTID, LIBELLE, FAMILLE, DATECREATION, DATEMAJ) VALUES (-5,'HITACHI_BIOVEIN',5,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
INSERT INTO PERIPHERIQUE_TRAITEMENT (PERIPHERIQUE_TRAITEMENTID, LIBELLE, FAMILLE, DATECREATION, DATEMAJ) VALUES (-6,'SRI_RADIO',4,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP);
COMMIT;

ALTER TABLE USERS ADD TYPEUSERID INT;
ALTER TABLE PROFILS_USERS ADD TYPEUSERID INT;
COMMIT;

UPDATE USERS SET TYPEUSERID=(SELECT USERID FROM TYPEUSER WHERE LIBELLE=USERTYPEID);
UPDATE PROFILS_USERS SET TYPEUSERID=(SELECT USERID FROM TYPEUSER WHERE LIBELLE=TYPEUSER);
COMMIT;

ALTER TABLE STATUTVISITE MODIFY STATUTVISITE VARCHAR2(50 CHAR);
UPDATE STATUTVISITE SET STATUTVISITE='Pré-enregistrée interdit' WHERE STATUTID=4;
COMMIT;

UPDATE TQ_COMMUNE SET MODIF_VISITEUR_PREENREG=0,MODIF_VISITEUR_ENCOURS=0,MODIF_VISITEUR_TERMINE=0;
COMMIT;

-- Insertion des types de visite dans la table STATUTVISITE
DELETE FROM STATUTVISITE;
INSERT INTO STATUTVISITE (STATUTID, STATUTVISITE) VALUES (-2,'Non venu');
INSERT INTO STATUTVISITE (STATUTID, STATUTVISITE) VALUES (-1,'Supprimée');
INSERT INTO STATUTVISITE (STATUTID, STATUTVISITE) VALUES (1,'En attente');
INSERT INTO STATUTVISITE (STATUTID, STATUTVISITE) VALUES (2,'Pré-enregistrée');
INSERT INTO STATUTVISITE (STATUTID, STATUTVISITE) VALUES (4,'Pré-enregistrée interdit');
INSERT INTO STATUTVISITE (STATUTID, STATUTVISITE) VALUES (8,'En cours');
INSERT INTO STATUTVISITE (STATUTID, STATUTVISITE) VALUES (16,'Terminée');
INSERT INTO STATUTVISITE (STATUTID, STATUTVISITE) VALUES (32,'Pré-enregistrée extérieur');
INSERT INTO STATUTVISITE (STATUTID, STATUTVISITE) VALUES (33,'En cours extérieur');
INSERT INTO STATUTVISITE (STATUTID, STATUTVISITE) VALUES (34,'En attente extérieur');
INSERT INTO STATUTVISITE (STATUTID, STATUTVISITE) VALUES (35,'Terminée extérieur');
COMMIT;

ALTER TABLE VISITES ADD ISTATUT VARCHAR2(35 CHAR);
COMMIT;
UPDATE VISITES SET ISTATUT=(SELECT N.LIBELLE FROM INTERLOCUTEUR I,NATURE N WHERE I.NATUREID=N.NATUREID AND INTERLOCUTEURID=VISITES.INTERLOCUTEURID);
COMMIT;

ALTER TABLE TYPECONSIGNE MODIFY TYPECONSIGNE VARCHAR2(35 CHAR);
ALTER TABLE CONSIGNE MODIFY TYPECONSIGNE VARCHAR2(35 CHAR);
COMMIT;

ALTER TABLE INTERLOCUTEUR MODIFY NOMJEUNEFILLE VARCHAR2(35 CHAR);
COMMIT;

CREATE OR REPLACE FUNCTION IsVisiteurInterdit ( IntelocuteurID in VARCHAR, dt in date ) RETURN VARCHAR IS      NatureID VARCHAR2(14);
      PaysID VARCHAR2(14);
      SocieteID VARCHAR2(14);
      IdInter VARCHAR2(14);
      IdNature VARCHAR2(14);
       IdPays VARCHAR2(14);
      IdSociete VARCHAR2(14);
      Retour VARCHAR2(50);
      TMP INT;
BEGIN
	Retour := '0';
	/* Interlocuteur */
	SELECT COUNT(*) INTO TMP FROM INTERLOCUTEUR WHERE INTERDIT=0 AND (SYSDATE BETWEEN DEBUTINTERDIT AND FININTERDIT) AND INTERLOCUTEURID=IntelocuteurID;
	IF TMP > 0 THEN
	SELECT INTERLOCUTEURID INTO IdInter FROM INTERLOCUTEUR WHERE ROWNUM = 1 AND INTERDIT=0 AND (SYSDATE BETWEEN DEBUTINTERDIT AND FININTERDIT) AND INTERLOCUTEURID=IntelocuteurID;
		/* NatureID*/
		SELECT NATUREID INTO IdNature FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=IntelocuteurID;
		/* PaysID*/
		SELECT NATIONALITEID INTO IdPays FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=IntelocuteurID;
		/* SocieteID*/
		SELECT SOCIETEID INTO IdSociete FROM INTERLOCUTEUR WHERE INTERLOCUTEURID=IntelocuteurID;

		/*  Ctrl Nature*/
		SELECT COUNT(*) INTO TMP FROM NATURE WHERE INTERDIT=0 AND (SYSDATE BETWEEN DEBUTINTERDIT AND FININTERDIT) AND NATUREID=IDNature;
		IF TMP > 0 THEN
			SELECT NATUREID INTO IdNATURE FROM NATURE WHERE ROWNUM = 1 AND INTERDIT=0 AND (SYSDATE BETWEEN DEBUTINTERDIT AND FININTERDIT) AND NATUREID=IdNature;
			/*  Ctrl Pays*/
			SELECT COUNT(*) INTO TMP FROM PAYS WHERE INTERDIT=0 AND (SYSDATE BETWEEN DEBUTINTERDIT AND FININTERDIT) AND PAYSID=IDPays;
			IF TMP > 0 THEN
				SELECT PAYSID INTO IdPays FROM PAYS WHERE ROWNUM = 1 AND INTERDIT=0 AND (SYSDATE BETWEEN DEBUTINTERDIT AND FININTERDIT) AND PAYSID=IDPays;
				/*  Ctrl Societe*/
				SELECT COUNT(*) INTO TMP FROM SOCIETE WHERE INTERDIT=0 AND (SYSDATE BETWEEN DEBUTINTERDIT AND FININTERDIT) AND SOCIETEID=IDSociete;
				IF TMP > 0 THEN
					SELECT SOCIETEID INTO IdSociete FROM SOCIETE WHERE ROWNUM = 1 AND INTERDIT=0 AND (SYSDATE BETWEEN DEBUTINTERDIT AND FININTERDIT) AND SOCIETEID=IDSociete;
					Retour :='1';
				ELSE
				   Retour := '-4';
				END IF;
			ELSE
				Retour := '-3';
			END IF;
		ELSE
			Retour := '-2';
		END IF;
	ELSE
		Retour := '-1';
	END IF;
	RETURN Retour;
END;
/
COMMIT;
EXIT;